
pr_LCD-OLED_merge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa60  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000904c  0800ac10  0800ac10  0001ac10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013c5c  08013c5c  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  08013c5c  08013c5c  00023c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013c64  08013c64  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013c64  08013c64  00023c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08013c6c  08013c6c  00023c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08013c74  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030080  2**0
                  CONTENTS
 10 .bss          00000f74  20000080  20000080  00030080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ff4  20000ff4  00030080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00065e22  00000000  00000000  000300f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000932d  00000000  00000000  00095f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000028c8  00000000  00000000  0009f248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001f47  00000000  00000000  000a1b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00030113  00000000  00000000  000a3a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002ac33  00000000  00000000  000d3b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001030dc  00000000  00000000  000fe79d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000bd34  00000000  00000000  0020187c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0020d5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800abf8 	.word	0x0800abf8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800abf8 	.word	0x0800abf8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a90:	f000 b970 	b.w	8000d74 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	460d      	mov	r5, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	460f      	mov	r7, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4694      	mov	ip, r2
 8000ac0:	d965      	bls.n	8000b8e <__udivmoddi4+0xe2>
 8000ac2:	fab2 f382 	clz	r3, r2
 8000ac6:	b143      	cbz	r3, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000acc:	f1c3 0220 	rsb	r2, r3, #32
 8000ad0:	409f      	lsls	r7, r3
 8000ad2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ad6:	4317      	orrs	r7, r2
 8000ad8:	409c      	lsls	r4, r3
 8000ada:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ade:	fa1f f58c 	uxth.w	r5, ip
 8000ae2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ae6:	0c22      	lsrs	r2, r4, #16
 8000ae8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000aec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000af0:	fb01 f005 	mul.w	r0, r1, r5
 8000af4:	4290      	cmp	r0, r2
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000af8:	eb1c 0202 	adds.w	r2, ip, r2
 8000afc:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b00:	f080 811c 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b04:	4290      	cmp	r0, r2
 8000b06:	f240 8119 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	4462      	add	r2, ip
 8000b0e:	1a12      	subs	r2, r2, r0
 8000b10:	b2a4      	uxth	r4, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b1e:	fb00 f505 	mul.w	r5, r0, r5
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	d90a      	bls.n	8000b3c <__udivmoddi4+0x90>
 8000b26:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b2e:	f080 8107 	bcs.w	8000d40 <__udivmoddi4+0x294>
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	f240 8104 	bls.w	8000d40 <__udivmoddi4+0x294>
 8000b38:	4464      	add	r4, ip
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b40:	1b64      	subs	r4, r4, r5
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11e      	cbz	r6, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40dc      	lsrs	r4, r3
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0xbc>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80ed 	beq.w	8000d36 <__udivmoddi4+0x28a>
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b62:	4608      	mov	r0, r1
 8000b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b68:	fab3 f183 	clz	r1, r3
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d149      	bne.n	8000c04 <__udivmoddi4+0x158>
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	d302      	bcc.n	8000b7a <__udivmoddi4+0xce>
 8000b74:	4282      	cmp	r2, r0
 8000b76:	f200 80f8 	bhi.w	8000d6a <__udivmoddi4+0x2be>
 8000b7a:	1a84      	subs	r4, r0, r2
 8000b7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b80:	2001      	movs	r0, #1
 8000b82:	4617      	mov	r7, r2
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d0e2      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	e9c6 4700 	strd	r4, r7, [r6]
 8000b8c:	e7df      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b8e:	b902      	cbnz	r2, 8000b92 <__udivmoddi4+0xe6>
 8000b90:	deff      	udf	#255	; 0xff
 8000b92:	fab2 f382 	clz	r3, r2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f040 8090 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9c:	1a8a      	subs	r2, r1, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f fe8c 	uxth.w	lr, ip
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bac:	fb07 2015 	mls	r0, r7, r5, r2
 8000bb0:	0c22      	lsrs	r2, r4, #16
 8000bb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bb6:	fb0e f005 	mul.w	r0, lr, r5
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	d908      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f200 80cb 	bhi.w	8000d64 <__udivmoddi4+0x2b8>
 8000bce:	4645      	mov	r5, r8
 8000bd0:	1a12      	subs	r2, r2, r0
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be0:	fb0e fe00 	mul.w	lr, lr, r0
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d908      	bls.n	8000bfa <__udivmoddi4+0x14e>
 8000be8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bec:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bf0:	d202      	bcs.n	8000bf8 <__udivmoddi4+0x14c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f200 80bb 	bhi.w	8000d6e <__udivmoddi4+0x2c2>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	eba4 040e 	sub.w	r4, r4, lr
 8000bfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c02:	e79f      	b.n	8000b44 <__udivmoddi4+0x98>
 8000c04:	f1c1 0720 	rsb	r7, r1, #32
 8000c08:	408b      	lsls	r3, r1
 8000c0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c12:	fa05 f401 	lsl.w	r4, r5, r1
 8000c16:	fa20 f307 	lsr.w	r3, r0, r7
 8000c1a:	40fd      	lsrs	r5, r7
 8000c1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c20:	4323      	orrs	r3, r4
 8000c22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c26:	fa1f fe8c 	uxth.w	lr, ip
 8000c2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c2e:	0c1c      	lsrs	r4, r3, #16
 8000c30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c34:	fb08 f50e 	mul.w	r5, r8, lr
 8000c38:	42a5      	cmp	r5, r4
 8000c3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c4c:	f080 8088 	bcs.w	8000d60 <__udivmoddi4+0x2b4>
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	f240 8085 	bls.w	8000d60 <__udivmoddi4+0x2b4>
 8000c56:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5a:	4464      	add	r4, ip
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	b29d      	uxth	r5, r3
 8000c60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c64:	fb09 4413 	mls	r4, r9, r3, r4
 8000c68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c70:	45a6      	cmp	lr, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000c7c:	d26c      	bcs.n	8000d58 <__udivmoddi4+0x2ac>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	d96a      	bls.n	8000d58 <__udivmoddi4+0x2ac>
 8000c82:	3b02      	subs	r3, #2
 8000c84:	4464      	add	r4, ip
 8000c86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c8e:	eba4 040e 	sub.w	r4, r4, lr
 8000c92:	42ac      	cmp	r4, r5
 8000c94:	46c8      	mov	r8, r9
 8000c96:	46ae      	mov	lr, r5
 8000c98:	d356      	bcc.n	8000d48 <__udivmoddi4+0x29c>
 8000c9a:	d053      	beq.n	8000d44 <__udivmoddi4+0x298>
 8000c9c:	b156      	cbz	r6, 8000cb4 <__udivmoddi4+0x208>
 8000c9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000ca2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ca6:	fa04 f707 	lsl.w	r7, r4, r7
 8000caa:	40ca      	lsrs	r2, r1
 8000cac:	40cc      	lsrs	r4, r1
 8000cae:	4317      	orrs	r7, r2
 8000cb0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	f1c3 0120 	rsb	r1, r3, #32
 8000cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ccc:	409d      	lsls	r5, r3
 8000cce:	432a      	orrs	r2, r5
 8000cd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd4:	fa1f fe8c 	uxth.w	lr, ip
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ce6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cea:	428d      	cmp	r5, r1
 8000cec:	fa04 f403 	lsl.w	r4, r4, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x258>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cfa:	d22f      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000cfc:	428d      	cmp	r5, r1
 8000cfe:	d92d      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d00:	3802      	subs	r0, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	1b49      	subs	r1, r1, r5
 8000d06:	b292      	uxth	r2, r2
 8000d08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d14:	fb05 f10e 	mul.w	r1, r5, lr
 8000d18:	4291      	cmp	r1, r2
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x282>
 8000d1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d20:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d24:	d216      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000d26:	4291      	cmp	r1, r2
 8000d28:	d914      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000d2a:	3d02      	subs	r5, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a52      	subs	r2, r2, r1
 8000d30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d34:	e738      	b.n	8000ba8 <__udivmoddi4+0xfc>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e708      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000d3c:	4639      	mov	r1, r7
 8000d3e:	e6e6      	b.n	8000b0e <__udivmoddi4+0x62>
 8000d40:	4610      	mov	r0, r2
 8000d42:	e6fb      	b.n	8000b3c <__udivmoddi4+0x90>
 8000d44:	4548      	cmp	r0, r9
 8000d46:	d2a9      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d48:	ebb9 0802 	subs.w	r8, r9, r2
 8000d4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d50:	3b01      	subs	r3, #1
 8000d52:	e7a3      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d54:	4645      	mov	r5, r8
 8000d56:	e7ea      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d58:	462b      	mov	r3, r5
 8000d5a:	e794      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5c:	4640      	mov	r0, r8
 8000d5e:	e7d1      	b.n	8000d04 <__udivmoddi4+0x258>
 8000d60:	46d0      	mov	r8, sl
 8000d62:	e77b      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d64:	3d02      	subs	r5, #2
 8000d66:	4462      	add	r2, ip
 8000d68:	e732      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e70a      	b.n	8000b84 <__udivmoddi4+0xd8>
 8000d6e:	4464      	add	r4, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e742      	b.n	8000bfa <__udivmoddi4+0x14e>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <_ZN6BitmapC1Ev>:
 *      Author: ericl
 */

#include "Bitmap.h"

Bitmap::Bitmap() {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	4abe      	ldr	r2, [pc, #760]	; (800107c <_ZN6BitmapC1Ev+0x304>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	221c      	movs	r2, #28
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f503 628f 	add.w	r2, r3, #1144	; 0x478
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f603 0278 	addw	r2, r3, #2168	; 0x878
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	611a      	str	r2, [r3, #16]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f603 4278 	addw	r2, r3, #3192	; 0xc78
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	615a      	str	r2, [r3, #20]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8000dba:	3318      	adds	r3, #24
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 8000dc6:	3318      	adds	r3, #24
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	61d3      	str	r3, [r2, #28]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8000dd2:	3318      	adds	r3, #24
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	6213      	str	r3, [r2, #32]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 8000dde:	3318      	adds	r3, #24
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	6253      	str	r3, [r2, #36]	; 0x24
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8000dea:	3338      	adds	r3, #56	; 0x38
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	6293      	str	r3, [r2, #40]	; 0x28
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 8000df6:	3338      	adds	r3, #56	; 0x38
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f503 5321 	add.w	r3, r3, #10304	; 0x2840
 8000e02:	3338      	adds	r3, #56	; 0x38
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	6313      	str	r3, [r2, #48]	; 0x30
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f503 5331 	add.w	r3, r3, #11328	; 0x2c40
 8000e0e:	3338      	adds	r3, #56	; 0x38
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	6353      	str	r3, [r2, #52]	; 0x34
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 8000e1a:	3338      	adds	r3, #56	; 0x38
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	6393      	str	r3, [r2, #56]	; 0x38
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f503 5361 	add.w	r3, r3, #14400	; 0x3840
 8000e26:	3338      	adds	r3, #56	; 0x38
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f503 5351 	add.w	r3, r3, #13376	; 0x3440
 8000e32:	3338      	adds	r3, #56	; 0x38
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	6413      	str	r3, [r2, #64]	; 0x40
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f503 5371 	add.w	r3, r3, #15424	; 0x3c40
 8000e3e:	3338      	adds	r3, #56	; 0x38
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	6453      	str	r3, [r2, #68]	; 0x44
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000e4a:	3378      	adds	r3, #120	; 0x78
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	6493      	str	r3, [r2, #72]	; 0x48
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f503 4388 	add.w	r3, r3, #17408	; 0x4400
 8000e56:	3378      	adds	r3, #120	; 0x78
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8000e62:	3378      	adds	r3, #120	; 0x78
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	6513      	str	r3, [r2, #80]	; 0x50
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
 8000e6e:	3378      	adds	r3, #120	; 0x78
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	6553      	str	r3, [r2, #84]	; 0x54
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8000e7a:	3378      	adds	r3, #120	; 0x78
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000e86:	3378      	adds	r3, #120	; 0x78
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8000e92:	3378      	adds	r3, #120	; 0x78
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	6613      	str	r3, [r2, #96]	; 0x60
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f503 43b0 	add.w	r3, r3, #22528	; 0x5800
 8000e9e:	3378      	adds	r3, #120	; 0x78
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	6653      	str	r3, [r2, #100]	; 0x64
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8000eaa:	3378      	adds	r3, #120	; 0x78
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	6693      	str	r3, [r2, #104]	; 0x68
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 8000eb6:	3378      	adds	r3, #120	; 0x78
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	66d3      	str	r3, [r2, #108]	; 0x6c
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f503 43d0 	add.w	r3, r3, #26624	; 0x6800
 8000ec2:	3378      	adds	r3, #120	; 0x78
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 8000ece:	3378      	adds	r3, #120	; 0x78
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	6753      	str	r3, [r2, #116]	; 0x74
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a6a      	ldr	r2, [pc, #424]	; (8001080 <_ZN6BitmapC1Ev+0x308>)
 8000ed8:	3378      	adds	r3, #120	; 0x78
 8000eda:	4611      	mov	r1, r2
 8000edc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f009 fb0f 	bl	800a504 <memcpy>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a66      	ldr	r2, [pc, #408]	; (8001084 <_ZN6BitmapC1Ev+0x30c>)
 8000eea:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8000eee:	4611      	mov	r1, r2
 8000ef0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f009 fb05 	bl	800a504 <memcpy>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a62      	ldr	r2, [pc, #392]	; (8001088 <_ZN6BitmapC1Ev+0x310>)
 8000efe:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8000f02:	4611      	mov	r1, r2
 8000f04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f009 fafb 	bl	800a504 <memcpy>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a5e      	ldr	r2, [pc, #376]	; (800108c <_ZN6BitmapC1Ev+0x314>)
 8000f12:	f603 4378 	addw	r3, r3, #3192	; 0xc78
 8000f16:	4611      	mov	r1, r2
 8000f18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f009 faf1 	bl	800a504 <memcpy>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f28:	4a59      	ldr	r2, [pc, #356]	; (8001090 <_ZN6BitmapC1Ev+0x318>)
 8000f2a:	3378      	adds	r3, #120	; 0x78
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f32:	4618      	mov	r0, r3
 8000f34:	f009 fae6 	bl	800a504 <memcpy>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f3e:	4a55      	ldr	r2, [pc, #340]	; (8001094 <_ZN6BitmapC1Ev+0x31c>)
 8000f40:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8000f44:	4611      	mov	r1, r2
 8000f46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f009 fada 	bl	800a504 <memcpy>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f56:	4a50      	ldr	r2, [pc, #320]	; (8001098 <_ZN6BitmapC1Ev+0x320>)
 8000f58:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f62:	4618      	mov	r0, r3
 8000f64:	f009 face 	bl	800a504 <memcpy>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f6e:	4a4b      	ldr	r2, [pc, #300]	; (800109c <_ZN6BitmapC1Ev+0x324>)
 8000f70:	f603 4378 	addw	r3, r3, #3192	; 0xc78
 8000f74:	4611      	mov	r1, r2
 8000f76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f009 fac2 	bl	800a504 <memcpy>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000f86:	4a46      	ldr	r2, [pc, #280]	; (80010a0 <_ZN6BitmapC1Ev+0x328>)
 8000f88:	3378      	adds	r3, #120	; 0x78
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f90:	4618      	mov	r0, r3
 8000f92:	f009 fab7 	bl	800a504 <memcpy>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000f9c:	4a41      	ldr	r2, [pc, #260]	; (80010a4 <_ZN6BitmapC1Ev+0x32c>)
 8000f9e:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f009 faab 	bl	800a504 <memcpy>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000fb4:	4a3c      	ldr	r2, [pc, #240]	; (80010a8 <_ZN6BitmapC1Ev+0x330>)
 8000fb6:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8000fba:	4611      	mov	r1, r2
 8000fbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f009 fa9f 	bl	800a504 <memcpy>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000fcc:	4a37      	ldr	r2, [pc, #220]	; (80010ac <_ZN6BitmapC1Ev+0x334>)
 8000fce:	f603 4378 	addw	r3, r3, #3192	; 0xc78
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f009 fa93 	bl	800a504 <memcpy>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000fe4:	4a32      	ldr	r2, [pc, #200]	; (80010b0 <_ZN6BitmapC1Ev+0x338>)
 8000fe6:	3378      	adds	r3, #120	; 0x78
 8000fe8:	4611      	mov	r1, r2
 8000fea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f009 fa88 	bl	800a504 <memcpy>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000ffa:	4a2e      	ldr	r2, [pc, #184]	; (80010b4 <_ZN6BitmapC1Ev+0x33c>)
 8000ffc:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8001000:	4611      	mov	r1, r2
 8001002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001006:	4618      	mov	r0, r3
 8001008:	f009 fa7c 	bl	800a504 <memcpy>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001012:	4a29      	ldr	r2, [pc, #164]	; (80010b8 <_ZN6BitmapC1Ev+0x340>)
 8001014:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8001018:	4611      	mov	r1, r2
 800101a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800101e:	4618      	mov	r0, r3
 8001020:	f009 fa70 	bl	800a504 <memcpy>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800102a:	4a24      	ldr	r2, [pc, #144]	; (80010bc <_ZN6BitmapC1Ev+0x344>)
 800102c:	f603 4378 	addw	r3, r3, #3192	; 0xc78
 8001030:	4611      	mov	r1, r2
 8001032:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001036:	4618      	mov	r0, r3
 8001038:	f009 fa64 	bl	800a504 <memcpy>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001042:	4a1f      	ldr	r2, [pc, #124]	; (80010c0 <_ZN6BitmapC1Ev+0x348>)
 8001044:	3378      	adds	r3, #120	; 0x78
 8001046:	4611      	mov	r1, r2
 8001048:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800104c:	4618      	mov	r0, r3
 800104e:	f009 fa59 	bl	800a504 <memcpy>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001058:	4a1a      	ldr	r2, [pc, #104]	; (80010c4 <_ZN6BitmapC1Ev+0x34c>)
 800105a:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 800105e:	4611      	mov	r1, r2
 8001060:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001064:	4618      	mov	r0, r3
 8001066:	f009 fa4d 	bl	800a504 <memcpy>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001070:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <_ZN6BitmapC1Ev+0x350>)
 8001072:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8001076:	4611      	mov	r1, r2
 8001078:	e028      	b.n	80010cc <_ZN6BitmapC1Ev+0x354>
 800107a:	bf00      	nop
 800107c:	08012008 	.word	0x08012008
 8001080:	0800ac10 	.word	0x0800ac10
 8001084:	0800b010 	.word	0x0800b010
 8001088:	0800b410 	.word	0x0800b410
 800108c:	0800b810 	.word	0x0800b810
 8001090:	0800bc10 	.word	0x0800bc10
 8001094:	0800c010 	.word	0x0800c010
 8001098:	0800c410 	.word	0x0800c410
 800109c:	0800c810 	.word	0x0800c810
 80010a0:	0800cc10 	.word	0x0800cc10
 80010a4:	0800d010 	.word	0x0800d010
 80010a8:	0800d410 	.word	0x0800d410
 80010ac:	0800d810 	.word	0x0800d810
 80010b0:	0800dc10 	.word	0x0800dc10
 80010b4:	0800e010 	.word	0x0800e010
 80010b8:	0800e410 	.word	0x0800e410
 80010bc:	0800e810 	.word	0x0800e810
 80010c0:	0800ec10 	.word	0x0800ec10
 80010c4:	0800f010 	.word	0x0800f010
 80010c8:	0800f410 	.word	0x0800f410
 80010cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d0:	4618      	mov	r0, r3
 80010d2:	f009 fa17 	bl	800a504 <memcpy>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80010dc:	4a35      	ldr	r2, [pc, #212]	; (80011b4 <_ZN6BitmapC1Ev+0x43c>)
 80010de:	f603 4378 	addw	r3, r3, #3192	; 0xc78
 80010e2:	4611      	mov	r1, r2
 80010e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e8:	4618      	mov	r0, r3
 80010ea:	f009 fa0b 	bl	800a504 <memcpy>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80010f4:	4a30      	ldr	r2, [pc, #192]	; (80011b8 <_ZN6BitmapC1Ev+0x440>)
 80010f6:	3378      	adds	r3, #120	; 0x78
 80010f8:	4611      	mov	r1, r2
 80010fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010fe:	4618      	mov	r0, r3
 8001100:	f009 fa00 	bl	800a504 <memcpy>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800110a:	4a2c      	ldr	r2, [pc, #176]	; (80011bc <_ZN6BitmapC1Ev+0x444>)
 800110c:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8001110:	4611      	mov	r1, r2
 8001112:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001116:	4618      	mov	r0, r3
 8001118:	f009 f9f4 	bl	800a504 <memcpy>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001122:	4a27      	ldr	r2, [pc, #156]	; (80011c0 <_ZN6BitmapC1Ev+0x448>)
 8001124:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8001128:	4611      	mov	r1, r2
 800112a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112e:	4618      	mov	r0, r3
 8001130:	f009 f9e8 	bl	800a504 <memcpy>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800113a:	4a22      	ldr	r2, [pc, #136]	; (80011c4 <_ZN6BitmapC1Ev+0x44c>)
 800113c:	f603 4378 	addw	r3, r3, #3192	; 0xc78
 8001140:	4611      	mov	r1, r2
 8001142:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001146:	4618      	mov	r0, r3
 8001148:	f009 f9dc 	bl	800a504 <memcpy>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8001152:	4a1d      	ldr	r2, [pc, #116]	; (80011c8 <_ZN6BitmapC1Ev+0x450>)
 8001154:	3378      	adds	r3, #120	; 0x78
 8001156:	4611      	mov	r1, r2
 8001158:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800115c:	4618      	mov	r0, r3
 800115e:	f009 f9d1 	bl	800a504 <memcpy>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8001168:	4a18      	ldr	r2, [pc, #96]	; (80011cc <_ZN6BitmapC1Ev+0x454>)
 800116a:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 800116e:	4611      	mov	r1, r2
 8001170:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001174:	4618      	mov	r0, r3
 8001176:	f009 f9c5 	bl	800a504 <memcpy>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8001180:	4a13      	ldr	r2, [pc, #76]	; (80011d0 <_ZN6BitmapC1Ev+0x458>)
 8001182:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8001186:	4611      	mov	r1, r2
 8001188:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800118c:	4618      	mov	r0, r3
 800118e:	f009 f9b9 	bl	800a504 <memcpy>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8001198:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <_ZN6BitmapC1Ev+0x45c>)
 800119a:	f603 4378 	addw	r3, r3, #3192	; 0xc78
 800119e:	4611      	mov	r1, r2
 80011a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a4:	4618      	mov	r0, r3
 80011a6:	f009 f9ad 	bl	800a504 <memcpy>


}
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	0800f810 	.word	0x0800f810
 80011b8:	0800fc10 	.word	0x0800fc10
 80011bc:	08010010 	.word	0x08010010
 80011c0:	08010410 	.word	0x08010410
 80011c4:	08010810 	.word	0x08010810
 80011c8:	08010c10 	.word	0x08010c10
 80011cc:	08011010 	.word	0x08011010
 80011d0:	08011410 	.word	0x08011410
 80011d4:	08011810 	.word	0x08011810

080011d8 <_ZN6BitmapD1Ev>:

Bitmap::~Bitmap() {
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <_ZN6BitmapD1Ev+0x1c>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	08012008 	.word	0x08012008

080011f8 <_ZN6BitmapD0Ev>:
Bitmap::~Bitmap() {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
}
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff ffe9 	bl	80011d8 <_ZN6BitmapD1Ev>
 8001206:	f247 0178 	movw	r1, #28792	; 0x7078
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f008 ff94 	bl	800a138 <_ZdlPvj>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af04      	add	r7, sp, #16
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, 0xFFFFFFFF);
 8001232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	2301      	movs	r3, #1
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	1dfb      	adds	r3, r7, #7
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2301      	movs	r3, #1
 8001242:	2200      	movs	r2, #0
 8001244:	2178      	movs	r1, #120	; 0x78
 8001246:	4803      	ldr	r0, [pc, #12]	; (8001254 <ssd1306_WriteCommand+0x2c>)
 8001248:	f006 f8fc 	bl	8007444 <HAL_I2C_Mem_Write>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000774 	.word	0x20000774

08001258 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af04      	add	r7, sp, #16
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, 0xFFFFFFFF);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	b29b      	uxth	r3, r3
 8001266:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800126a:	9202      	str	r2, [sp, #8]
 800126c:	9301      	str	r3, [sp, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2301      	movs	r3, #1
 8001274:	2240      	movs	r2, #64	; 0x40
 8001276:	2178      	movs	r1, #120	; 0x78
 8001278:	4803      	ldr	r0, [pc, #12]	; (8001288 <ssd1306_WriteData+0x30>)
 800127a:	f006 f8e3 	bl	8007444 <HAL_I2C_Mem_Write>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000774 	.word	0x20000774

0800128c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001290:	f7ff ffc3 	bl	800121a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001294:	2064      	movs	r0, #100	; 0x64
 8001296:	f003 ffeb 	bl	8005270 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800129a:	2000      	movs	r0, #0
 800129c:	f000 faa0 	bl	80017e0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80012a0:	2020      	movs	r0, #32
 80012a2:	f7ff ffc1 	bl	8001228 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80012a6:	2000      	movs	r0, #0
 80012a8:	f7ff ffbe 	bl	8001228 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80012ac:	20b0      	movs	r0, #176	; 0xb0
 80012ae:	f7ff ffbb 	bl	8001228 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80012b2:	20c8      	movs	r0, #200	; 0xc8
 80012b4:	f7ff ffb8 	bl	8001228 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff ffb5 	bl	8001228 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80012be:	2010      	movs	r0, #16
 80012c0:	f7ff ffb2 	bl	8001228 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80012c4:	2040      	movs	r0, #64	; 0x40
 80012c6:	f7ff ffaf 	bl	8001228 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80012ca:	20ff      	movs	r0, #255	; 0xff
 80012cc:	f000 fa75 	bl	80017ba <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80012d0:	20a1      	movs	r0, #161	; 0xa1
 80012d2:	f7ff ffa9 	bl	8001228 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80012d6:	20a6      	movs	r0, #166	; 0xa6
 80012d8:	f7ff ffa6 	bl	8001228 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80012dc:	20a8      	movs	r0, #168	; 0xa8
 80012de:	f7ff ffa3 	bl	8001228 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80012e2:	203f      	movs	r0, #63	; 0x3f
 80012e4:	f7ff ffa0 	bl	8001228 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80012e8:	20a4      	movs	r0, #164	; 0xa4
 80012ea:	f7ff ff9d 	bl	8001228 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80012ee:	20d3      	movs	r0, #211	; 0xd3
 80012f0:	f7ff ff9a 	bl	8001228 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff ff97 	bl	8001228 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80012fa:	20d5      	movs	r0, #213	; 0xd5
 80012fc:	f7ff ff94 	bl	8001228 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001300:	20f0      	movs	r0, #240	; 0xf0
 8001302:	f7ff ff91 	bl	8001228 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001306:	20d9      	movs	r0, #217	; 0xd9
 8001308:	f7ff ff8e 	bl	8001228 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800130c:	2022      	movs	r0, #34	; 0x22
 800130e:	f7ff ff8b 	bl	8001228 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001312:	20da      	movs	r0, #218	; 0xda
 8001314:	f7ff ff88 	bl	8001228 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001318:	2012      	movs	r0, #18
 800131a:	f7ff ff85 	bl	8001228 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800131e:	20db      	movs	r0, #219	; 0xdb
 8001320:	f7ff ff82 	bl	8001228 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001324:	2020      	movs	r0, #32
 8001326:	f7ff ff7f 	bl	8001228 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800132a:	208d      	movs	r0, #141	; 0x8d
 800132c:	f7ff ff7c 	bl	8001228 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001330:	2014      	movs	r0, #20
 8001332:	f7ff ff79 	bl	8001228 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001336:	2001      	movs	r0, #1
 8001338:	f000 fa52 	bl	80017e0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800133c:	2000      	movs	r0, #0
 800133e:	f000 f80f 	bl	8001360 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001342:	f000 f831 	bl	80013a8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <ssd1306_Init+0xd0>)
 8001348:	2200      	movs	r2, #0
 800134a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <ssd1306_Init+0xd0>)
 800134e:	2200      	movs	r2, #0
 8001350:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001352:	4b02      	ldr	r3, [pc, #8]	; (800135c <ssd1306_Init+0xd0>)
 8001354:	2201      	movs	r2, #1
 8001356:	711a      	strb	r2, [r3, #4]
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	2000049c 	.word	0x2000049c

08001360 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	e00d      	b.n	800138c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <ssd1306_Fill+0x1a>
 8001376:	2100      	movs	r1, #0
 8001378:	e000      	b.n	800137c <ssd1306_Fill+0x1c>
 800137a:	21ff      	movs	r1, #255	; 0xff
 800137c:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <ssd1306_Fill+0x44>)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4413      	add	r3, r2
 8001382:	460a      	mov	r2, r1
 8001384:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3301      	adds	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001392:	d3ed      	bcc.n	8001370 <ssd1306_Fill+0x10>
    }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	2000009c 	.word	0x2000009c

080013a8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013ae:	2300      	movs	r3, #0
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	e016      	b.n	80013e2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	3b50      	subs	r3, #80	; 0x50
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ff34 	bl	8001228 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff ff31 	bl	8001228 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80013c6:	2010      	movs	r0, #16
 80013c8:	f7ff ff2e 	bl	8001228 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	01db      	lsls	r3, r3, #7
 80013d0:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <ssd1306_UpdateScreen+0x4c>)
 80013d2:	4413      	add	r3, r2
 80013d4:	2180      	movs	r1, #128	; 0x80
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff ff3e 	bl	8001258 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	3301      	adds	r3, #1
 80013e0:	71fb      	strb	r3, [r7, #7]
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b07      	cmp	r3, #7
 80013e6:	d9e5      	bls.n	80013b4 <ssd1306_UpdateScreen+0xc>
    }
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000009c 	.word	0x2000009c

080013f8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	460b      	mov	r3, r1
 8001404:	71bb      	strb	r3, [r7, #6]
 8001406:	4613      	mov	r3, r2
 8001408:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db3d      	blt.n	800148e <ssd1306_DrawPixel+0x96>
 8001412:	79bb      	ldrb	r3, [r7, #6]
 8001414:	2b3f      	cmp	r3, #63	; 0x3f
 8001416:	d83a      	bhi.n	800148e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001418:	797b      	ldrb	r3, [r7, #5]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d11a      	bne.n	8001454 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800141e:	79fa      	ldrb	r2, [r7, #7]
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	08db      	lsrs	r3, r3, #3
 8001424:	b2d8      	uxtb	r0, r3
 8001426:	4603      	mov	r3, r0
 8001428:	01db      	lsls	r3, r3, #7
 800142a:	4413      	add	r3, r2
 800142c:	4a1b      	ldr	r2, [pc, #108]	; (800149c <ssd1306_DrawPixel+0xa4>)
 800142e:	5cd3      	ldrb	r3, [r2, r3]
 8001430:	b25a      	sxtb	r2, r3
 8001432:	79bb      	ldrb	r3, [r7, #6]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	2101      	movs	r1, #1
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	b25b      	sxtb	r3, r3
 8001440:	4313      	orrs	r3, r2
 8001442:	b259      	sxtb	r1, r3
 8001444:	79fa      	ldrb	r2, [r7, #7]
 8001446:	4603      	mov	r3, r0
 8001448:	01db      	lsls	r3, r3, #7
 800144a:	4413      	add	r3, r2
 800144c:	b2c9      	uxtb	r1, r1
 800144e:	4a13      	ldr	r2, [pc, #76]	; (800149c <ssd1306_DrawPixel+0xa4>)
 8001450:	54d1      	strb	r1, [r2, r3]
 8001452:	e01d      	b.n	8001490 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001454:	79fa      	ldrb	r2, [r7, #7]
 8001456:	79bb      	ldrb	r3, [r7, #6]
 8001458:	08db      	lsrs	r3, r3, #3
 800145a:	b2d8      	uxtb	r0, r3
 800145c:	4603      	mov	r3, r0
 800145e:	01db      	lsls	r3, r3, #7
 8001460:	4413      	add	r3, r2
 8001462:	4a0e      	ldr	r2, [pc, #56]	; (800149c <ssd1306_DrawPixel+0xa4>)
 8001464:	5cd3      	ldrb	r3, [r2, r3]
 8001466:	b25a      	sxtb	r2, r3
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	2101      	movs	r1, #1
 8001470:	fa01 f303 	lsl.w	r3, r1, r3
 8001474:	b25b      	sxtb	r3, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	b25b      	sxtb	r3, r3
 800147a:	4013      	ands	r3, r2
 800147c:	b259      	sxtb	r1, r3
 800147e:	79fa      	ldrb	r2, [r7, #7]
 8001480:	4603      	mov	r3, r0
 8001482:	01db      	lsls	r3, r3, #7
 8001484:	4413      	add	r3, r2
 8001486:	b2c9      	uxtb	r1, r1
 8001488:	4a04      	ldr	r2, [pc, #16]	; (800149c <ssd1306_DrawPixel+0xa4>)
 800148a:	54d1      	strb	r1, [r2, r3]
 800148c:	e000      	b.n	8001490 <ssd1306_DrawPixel+0x98>
        return;
 800148e:	bf00      	nop
    }
}
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	2000009c 	.word	0x2000009c

080014a0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b089      	sub	sp, #36	; 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4604      	mov	r4, r0
 80014a8:	1d38      	adds	r0, r7, #4
 80014aa:	e880 0006 	stmia.w	r0, {r1, r2}
 80014ae:	461a      	mov	r2, r3
 80014b0:	4623      	mov	r3, r4
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	4613      	mov	r3, r2
 80014b6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	2b1f      	cmp	r3, #31
 80014bc:	d902      	bls.n	80014c4 <ssd1306_WriteChar+0x24>
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	2b7e      	cmp	r3, #126	; 0x7e
 80014c2:	d901      	bls.n	80014c8 <ssd1306_WriteChar+0x28>
        return 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	e06d      	b.n	80015a4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80014c8:	4b38      	ldr	r3, [pc, #224]	; (80015ac <ssd1306_WriteChar+0x10c>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	793b      	ldrb	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	2b80      	cmp	r3, #128	; 0x80
 80014d4:	dc06      	bgt.n	80014e4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80014d6:	4b35      	ldr	r3, [pc, #212]	; (80015ac <ssd1306_WriteChar+0x10c>)
 80014d8:	885b      	ldrh	r3, [r3, #2]
 80014da:	461a      	mov	r2, r3
 80014dc:	797b      	ldrb	r3, [r7, #5]
 80014de:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80014e0:	2b40      	cmp	r3, #64	; 0x40
 80014e2:	dd01      	ble.n	80014e8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	e05d      	b.n	80015a4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
 80014ec:	e04c      	b.n	8001588 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	3b20      	subs	r3, #32
 80014f4:	7979      	ldrb	r1, [r7, #5]
 80014f6:	fb01 f303 	mul.w	r3, r1, r3
 80014fa:	4619      	mov	r1, r3
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	440b      	add	r3, r1
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
 800150c:	e034      	b.n	8001578 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d012      	beq.n	8001544 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800151e:	4b23      	ldr	r3, [pc, #140]	; (80015ac <ssd1306_WriteChar+0x10c>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	b2da      	uxtb	r2, r3
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	4413      	add	r3, r2
 800152a:	b2d8      	uxtb	r0, r3
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <ssd1306_WriteChar+0x10c>)
 800152e:	885b      	ldrh	r3, [r3, #2]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4413      	add	r3, r2
 8001538:	b2db      	uxtb	r3, r3
 800153a:	7bba      	ldrb	r2, [r7, #14]
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff ff5b 	bl	80013f8 <ssd1306_DrawPixel>
 8001542:	e016      	b.n	8001572 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <ssd1306_WriteChar+0x10c>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	b2da      	uxtb	r2, r3
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	4413      	add	r3, r2
 8001550:	b2d8      	uxtb	r0, r3
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <ssd1306_WriteChar+0x10c>)
 8001554:	885b      	ldrh	r3, [r3, #2]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b2d9      	uxtb	r1, r3
 8001560:	7bbb      	ldrb	r3, [r7, #14]
 8001562:	2b00      	cmp	r3, #0
 8001564:	bf0c      	ite	eq
 8001566:	2301      	moveq	r3, #1
 8001568:	2300      	movne	r3, #0
 800156a:	b2db      	uxtb	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	f7ff ff43 	bl	80013f8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	3301      	adds	r3, #1
 8001576:	61bb      	str	r3, [r7, #24]
 8001578:	793b      	ldrb	r3, [r7, #4]
 800157a:	461a      	mov	r2, r3
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	4293      	cmp	r3, r2
 8001580:	d3c5      	bcc.n	800150e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3301      	adds	r3, #1
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	797b      	ldrb	r3, [r7, #5]
 800158a:	461a      	mov	r2, r3
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	4293      	cmp	r3, r2
 8001590:	d3ad      	bcc.n	80014ee <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <ssd1306_WriteChar+0x10c>)
 8001594:	881a      	ldrh	r2, [r3, #0]
 8001596:	793b      	ldrb	r3, [r7, #4]
 8001598:	b29b      	uxth	r3, r3
 800159a:	4413      	add	r3, r2
 800159c:	b29a      	uxth	r2, r3
 800159e:	4b03      	ldr	r3, [pc, #12]	; (80015ac <ssd1306_WriteChar+0x10c>)
 80015a0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3724      	adds	r7, #36	; 0x24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd90      	pop	{r4, r7, pc}
 80015ac:	2000049c 	.word	0x2000049c

080015b0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	1d38      	adds	r0, r7, #4
 80015ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80015be:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80015c0:	e012      	b.n	80015e8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	7818      	ldrb	r0, [r3, #0]
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	1d3a      	adds	r2, r7, #4
 80015ca:	ca06      	ldmia	r2, {r1, r2}
 80015cc:	f7ff ff68 	bl	80014a0 <ssd1306_WriteChar>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d002      	beq.n	80015e2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	e008      	b.n	80015f4 <ssd1306_WriteString+0x44>
        }
        str++;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3301      	adds	r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1e8      	bne.n	80015c2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	781b      	ldrb	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	460a      	mov	r2, r1
 8001606:	71fb      	strb	r3, [r7, #7]
 8001608:	4613      	mov	r3, r2
 800160a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	b29a      	uxth	r2, r3
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <ssd1306_SetCursor+0x2c>)
 8001612:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001614:	79bb      	ldrb	r3, [r7, #6]
 8001616:	b29a      	uxth	r2, r3
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <ssd1306_SetCursor+0x2c>)
 800161a:	805a      	strh	r2, [r3, #2]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	2000049c 	.word	0x2000049c

0800162c <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b089      	sub	sp, #36	; 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	4604      	mov	r4, r0
 8001634:	4608      	mov	r0, r1
 8001636:	4611      	mov	r1, r2
 8001638:	461a      	mov	r2, r3
 800163a:	4623      	mov	r3, r4
 800163c:	71fb      	strb	r3, [r7, #7]
 800163e:	4603      	mov	r3, r0
 8001640:	71bb      	strb	r3, [r7, #6]
 8001642:	460b      	mov	r3, r1
 8001644:	717b      	strb	r3, [r7, #5]
 8001646:	4613      	mov	r3, r2
 8001648:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 800164a:	797a      	ldrb	r2, [r7, #5]
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	bfb8      	it	lt
 8001654:	425b      	neglt	r3, r3
 8001656:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8001658:	793a      	ldrb	r2, [r7, #4]
 800165a:	79bb      	ldrb	r3, [r7, #6]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	bfb8      	it	lt
 8001662:	425b      	neglt	r3, r3
 8001664:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8001666:	79fa      	ldrb	r2, [r7, #7]
 8001668:	797b      	ldrb	r3, [r7, #5]
 800166a:	429a      	cmp	r2, r3
 800166c:	d201      	bcs.n	8001672 <ssd1306_Line+0x46>
 800166e:	2301      	movs	r3, #1
 8001670:	e001      	b.n	8001676 <ssd1306_Line+0x4a>
 8001672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001676:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001678:	79ba      	ldrb	r2, [r7, #6]
 800167a:	793b      	ldrb	r3, [r7, #4]
 800167c:	429a      	cmp	r2, r3
 800167e:	d201      	bcs.n	8001684 <ssd1306_Line+0x58>
 8001680:	2301      	movs	r3, #1
 8001682:	e001      	b.n	8001688 <ssd1306_Line+0x5c>
 8001684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001688:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8001692:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001696:	7939      	ldrb	r1, [r7, #4]
 8001698:	797b      	ldrb	r3, [r7, #5]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff feac 	bl	80013f8 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80016a0:	e024      	b.n	80016ec <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80016a2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80016a6:	79b9      	ldrb	r1, [r7, #6]
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fea4 	bl	80013f8 <ssd1306_DrawPixel>
        error2 = error * 2;
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	425b      	negs	r3, r3
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	429a      	cmp	r2, r3
 80016be:	dd08      	ble.n	80016d2 <ssd1306_Line+0xa6>
            error -= deltaY;
 80016c0:	69fa      	ldr	r2, [r7, #28]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	4413      	add	r3, r2
 80016d0:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	da08      	bge.n	80016ec <ssd1306_Line+0xc0>
            error += deltaX;
 80016da:	69fa      	ldr	r2, [r7, #28]
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	4413      	add	r3, r2
 80016e0:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	79bb      	ldrb	r3, [r7, #6]
 80016e8:	4413      	add	r3, r2
 80016ea:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80016ec:	79fa      	ldrb	r2, [r7, #7]
 80016ee:	797b      	ldrb	r3, [r7, #5]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d1d6      	bne.n	80016a2 <ssd1306_Line+0x76>
 80016f4:	79ba      	ldrb	r2, [r7, #6]
 80016f6:	793b      	ldrb	r3, [r7, #4]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d1d2      	bne.n	80016a2 <ssd1306_Line+0x76>
        }
    }
    return;
 80016fc:	bf00      	nop
}
 80016fe:	3724      	adds	r7, #36	; 0x24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd90      	pop	{r4, r7, pc}

08001704 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	603a      	str	r2, [r7, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
 8001712:	460b      	mov	r3, r1
 8001714:	71bb      	strb	r3, [r7, #6]
 8001716:	4613      	mov	r3, r2
 8001718:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800171a:	797b      	ldrb	r3, [r7, #5]
 800171c:	3307      	adds	r3, #7
 800171e:	2b00      	cmp	r3, #0
 8001720:	da00      	bge.n	8001724 <ssd1306_DrawBitmap+0x20>
 8001722:	3307      	adds	r3, #7
 8001724:	10db      	asrs	r3, r3, #3
 8001726:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db3e      	blt.n	80017b2 <ssd1306_DrawBitmap+0xae>
 8001734:	79bb      	ldrb	r3, [r7, #6]
 8001736:	2b3f      	cmp	r3, #63	; 0x3f
 8001738:	d83b      	bhi.n	80017b2 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800173a:	2300      	movs	r3, #0
 800173c:	73bb      	strb	r3, [r7, #14]
 800173e:	e033      	b.n	80017a8 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001740:	2300      	movs	r3, #0
 8001742:	737b      	strb	r3, [r7, #13]
 8001744:	e026      	b.n	8001794 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8001746:	7b7b      	ldrb	r3, [r7, #13]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	73fb      	strb	r3, [r7, #15]
 8001756:	e00d      	b.n	8001774 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001758:	7bbb      	ldrb	r3, [r7, #14]
 800175a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800175e:	fb02 f303 	mul.w	r3, r2, r3
 8001762:	7b7a      	ldrb	r2, [r7, #13]
 8001764:	08d2      	lsrs	r2, r2, #3
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	4413      	add	r3, r2
 800176a:	461a      	mov	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	4413      	add	r3, r2
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8001774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001778:	2b00      	cmp	r3, #0
 800177a:	da08      	bge.n	800178e <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 800177c:	79fa      	ldrb	r2, [r7, #7]
 800177e:	7b7b      	ldrb	r3, [r7, #13]
 8001780:	4413      	add	r3, r2
 8001782:	b2db      	uxtb	r3, r3
 8001784:	7f3a      	ldrb	r2, [r7, #28]
 8001786:	79b9      	ldrb	r1, [r7, #6]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fe35 	bl	80013f8 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800178e:	7b7b      	ldrb	r3, [r7, #13]
 8001790:	3301      	adds	r3, #1
 8001792:	737b      	strb	r3, [r7, #13]
 8001794:	7b7a      	ldrb	r2, [r7, #13]
 8001796:	797b      	ldrb	r3, [r7, #5]
 8001798:	429a      	cmp	r2, r3
 800179a:	d3d4      	bcc.n	8001746 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 800179c:	7bbb      	ldrb	r3, [r7, #14]
 800179e:	3301      	adds	r3, #1
 80017a0:	73bb      	strb	r3, [r7, #14]
 80017a2:	79bb      	ldrb	r3, [r7, #6]
 80017a4:	3301      	adds	r3, #1
 80017a6:	71bb      	strb	r3, [r7, #6]
 80017a8:	7bba      	ldrb	r2, [r7, #14]
 80017aa:	7e3b      	ldrb	r3, [r7, #24]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d3c7      	bcc.n	8001740 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 80017b0:	e000      	b.n	80017b4 <ssd1306_DrawBitmap+0xb0>
        return;
 80017b2:	bf00      	nop
}
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b084      	sub	sp, #16
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80017c4:	2381      	movs	r3, #129	; 0x81
 80017c6:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fd2c 	bl	8001228 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fd28 	bl	8001228 <ssd1306_WriteCommand>
}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80017f0:	23af      	movs	r3, #175	; 0xaf
 80017f2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <ssd1306_SetDisplayOn+0x38>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	715a      	strb	r2, [r3, #5]
 80017fa:	e004      	b.n	8001806 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80017fc:	23ae      	movs	r3, #174	; 0xae
 80017fe:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <ssd1306_SetDisplayOn+0x38>)
 8001802:	2200      	movs	r2, #0
 8001804:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fd0d 	bl	8001228 <ssd1306_WriteCommand>
}
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000049c 	.word	0x2000049c

0800181c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001842:	d205      	bcs.n	8001850 <_ZSt16__deque_buf_sizej+0x1c>
 8001844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	fbb2 f3f3 	udiv	r3, r2, r3
 800184e:	e000      	b.n	8001852 <_ZSt16__deque_buf_sizej+0x1e>
 8001850:	2301      	movs	r3, #1
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <_ZN5Event11handleEventEv>:
#include "../CustomLib/Bitmap.h"


class Event {
public:
	virtual void handleEvent(){};
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <_ZN5EventD1Ev>:
	virtual ~Event(){};
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <_ZN5EventD1Ev+0x1c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	08013ae4 	.word	0x08013ae4

08001894 <_ZN5EventD0Ev>:
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ffe9 	bl	8001874 <_ZN5EventD1Ev>
 80018a2:	2104      	movs	r1, #4
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f008 fc47 	bl	800a138 <_ZdlPvj>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_ZN5EventC1Ev>:
class Event {
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <_ZN5EventC1Ev+0x1c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	08013ae4 	.word	0x08013ae4

080018d4 <_ZN16CalculationEventC1Ev>:
#include <CalculationEvent.h>
#include "FinalCalculationResultEvent.h"

CalculationEvent::CalculationEvent(){};
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff ffe8 	bl	80018b4 <_ZN5EventC1Ev>
 80018e4:	4a03      	ldr	r2, [pc, #12]	; (80018f4 <_ZN16CalculationEventC1Ev+0x20>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	08013ad0 	.word	0x08013ad0

080018f8 <_ZN16CalculationEventD1Ev>:
CalculationEvent::~CalculationEvent(){};
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	4a05      	ldr	r2, [pc, #20]	; (8001918 <_ZN16CalculationEventD1Ev+0x20>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ffb3 	bl	8001874 <_ZN5EventD1Ev>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	08013ad0 	.word	0x08013ad0

0800191c <_ZN16CalculationEventD0Ev>:
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ffe7 	bl	80018f8 <_ZN16CalculationEventD1Ev>
 800192a:	2104      	movs	r1, #4
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f008 fc03 	bl	800a138 <_ZdlPvj>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <_ZN16CalculationEvent11handleEventEv>:

void CalculationEvent::handleEvent() {
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	T = (t3T - t0)/3.0; 									// yeah not that much but important
 8001944:	4b14      	ldr	r3, [pc, #80]	; (8001998 <_ZN16CalculationEvent11handleEventEv+0x5c>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b14      	ldr	r3, [pc, #80]	; (800199c <_ZN16CalculationEvent11handleEventEv+0x60>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fde8 	bl	8000524 <__aeabi_ui2d>
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <_ZN16CalculationEvent11handleEventEv+0x64>)
 800195a:	f7fe ff87 	bl	800086c <__aeabi_ddiv>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff f869 	bl	8000a3c <__aeabi_d2uiz>
 800196a:	4603      	mov	r3, r0
 800196c:	4a0d      	ldr	r2, [pc, #52]	; (80019a4 <_ZN16CalculationEvent11handleEventEv+0x68>)
 800196e:	6013      	str	r3, [r2, #0]
	event_queue.push(new FinalCalculationResultEvent());	// ...
 8001970:	2004      	movs	r0, #4
 8001972:	f008 fbe3 	bl	800a13c <_Znwj>
 8001976:	4603      	mov	r3, r0
 8001978:	461c      	mov	r4, r3
 800197a:	4620      	mov	r0, r4
 800197c:	f000 feec 	bl	8002758 <_ZN27FinalCalculationResultEventC1Ev>
 8001980:	60fc      	str	r4, [r7, #12]
 8001982:	f107 030c 	add.w	r3, r7, #12
 8001986:	4619      	mov	r1, r3
 8001988:	4807      	ldr	r0, [pc, #28]	; (80019a8 <_ZN16CalculationEvent11handleEventEv+0x6c>)
 800198a:	f000 f80f 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
}
 800198e:	bf00      	nop
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	bd90      	pop	{r4, r7, pc}
 8001996:	bf00      	nop
 8001998:	20000e88 	.word	0x20000e88
 800199c:	20000e84 	.word	0x20000e84
 80019a0:	40080000 	.word	0x40080000
 80019a4:	20000e8c 	.word	0x20000e8c
 80019a8:	20000e54 	.word	0x20000e54

080019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>:
      push(const value_type& __x)
      { c.push_back(__x); }

#if __cplusplus >= 201103L
      void
      push(value_type&& __x)
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 80019b6:	687c      	ldr	r4, [r7, #4]
 80019b8:	6838      	ldr	r0, [r7, #0]
 80019ba:	f000 f809 	bl	80019d0 <_ZSt4moveIRP5EventEONSt16remove_referenceIT_E4typeEOS4_>
 80019be:	4603      	mov	r3, r0
 80019c0:	4619      	mov	r1, r3
 80019c2:	4620      	mov	r0, r4
 80019c4:	f000 f80f 	bl	80019e6 <_ZNSt5dequeIP5EventSaIS1_EE9push_backEOS1_>
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd90      	pop	{r4, r7, pc}

080019d0 <_ZSt4moveIRP5EventEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <_ZNSt5dequeIP5EventSaIS1_EE9push_backEOS1_>:
	  _M_push_back_aux(__x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80019f0:	6838      	ldr	r0, [r7, #0]
 80019f2:	f7ff ffed 	bl	80019d0 <_ZSt4moveIRP5EventEONSt16remove_referenceIT_E4typeEOS4_>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4619      	mov	r1, r3
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f804 	bl	8001a08 <_ZNSt5dequeIP5EventSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <_ZNSt5dequeIP5EventSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename deque<_Tp, _Alloc>::reference
#else
      void
#endif
      deque<_Tp, _Alloc>::
 8001a08:	b5b0      	push	{r4, r5, r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d011      	beq.n	8001a44 <_ZNSt5dequeIP5EventSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3c>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8001a20:	687c      	ldr	r4, [r7, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699d      	ldr	r5, [r3, #24]
 8001a26:	6838      	ldr	r0, [r7, #0]
 8001a28:	f000 f818 	bl	8001a5c <_ZSt7forwardIP5EventEOT_RNSt16remove_referenceIS2_E4typeE>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4629      	mov	r1, r5
 8001a32:	4620      	mov	r0, r4
 8001a34:	f000 f81d 	bl	8001a72 <_ZNSt16allocator_traitsISaIP5EventEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	1d1a      	adds	r2, r3, #4
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	619a      	str	r2, [r3, #24]
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8001a42:	e007      	b.n	8001a54 <_ZNSt5dequeIP5EventSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x4c>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8001a44:	6838      	ldr	r0, [r7, #0]
 8001a46:	f000 f809 	bl	8001a5c <_ZSt7forwardIP5EventEOT_RNSt16remove_referenceIS2_E4typeE>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f822 	bl	8001a98 <_ZNSt5dequeIP5EventSaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_>
      }
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bdb0      	pop	{r4, r5, r7, pc}

08001a5c <_ZSt7forwardIP5EventEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <_ZNSt16allocator_traitsISaIP5EventEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b084      	sub	sp, #16
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	60f8      	str	r0, [r7, #12]
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ffec 	bl	8001a5c <_ZSt7forwardIP5EventEOT_RNSt16remove_referenceIS2_E4typeE>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f000 f848 	bl	8001b20 <_ZN9__gnu_cxx13new_allocatorIP5EventE9constructIS2_JS2_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 8001a90:	bf00      	nop
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_ZNSt5dequeIP5EventSaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8001a98:	b5b0      	push	{r4, r5, r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f852 	bl	8001b4c <_ZNKSt5dequeIP5EventSaIS1_EE4sizeEv>
 8001aa8:	4604      	mov	r4, r0
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f860 	bl	8001b70 <_ZNKSt5dequeIP5EventSaIS1_EE8max_sizeEv>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	429c      	cmp	r4, r3
 8001ab4:	bf0c      	ite	eq
 8001ab6:	2301      	moveq	r3, #1
 8001ab8:	2300      	movne	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d002      	beq.n	8001ac6 <_ZNSt5dequeIP5EventSaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8001ac0:	4816      	ldr	r0, [pc, #88]	; (8001b1c <_ZNSt5dequeIP5EventSaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_+0x84>)
 8001ac2:	f008 fb52 	bl	800a16a <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f862 	bl	8001b92 <_ZNSt5dequeIP5EventSaIS1_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	1d1c      	adds	r4, r3, #4
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	f000 f876 	bl	8001bc8 <_ZNSt11_Deque_baseIP5EventSaIS1_EE16_M_allocate_nodeEv>
 8001adc:	4603      	mov	r3, r0
 8001ade:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8001ae0:	687c      	ldr	r4, [r7, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699d      	ldr	r5, [r3, #24]
 8001ae6:	6838      	ldr	r0, [r7, #0]
 8001ae8:	f7ff ffb8 	bl	8001a5c <_ZSt7forwardIP5EventEOT_RNSt16remove_referenceIS2_E4typeE>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461a      	mov	r2, r3
 8001af0:	4629      	mov	r1, r5
 8001af2:	4620      	mov	r0, r4
 8001af4:	f7ff ffbd 	bl	8001a72 <_ZNSt16allocator_traitsISaIP5EventEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f103 0218 	add.w	r2, r3, #24
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	3304      	adds	r3, #4
 8001b04:	4619      	mov	r1, r3
 8001b06:	4610      	mov	r0, r2
 8001b08:	f000 f870 	bl	8001bec <_ZNSt15_Deque_iteratorIP5EventRS1_PS1_E11_M_set_nodeEPS3_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69da      	ldr	r2, [r3, #28]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1c:	08011c10 	.word	0x08011c10

08001b20 <_ZN9__gnu_cxx13new_allocatorIP5EventE9constructIS2_JS2_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ff95 	bl	8001a5c <_ZSt7forwardIP5EventEOT_RNSt16remove_referenceIS2_E4typeE>
 8001b32:	4603      	mov	r3, r0
 8001b34:	681c      	ldr	r4, [r3, #0]
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	2004      	movs	r0, #4
 8001b3c:	f7ff fe6e 	bl	800181c <_ZnwjPv>
 8001b40:	4603      	mov	r3, r0
 8001b42:	601c      	str	r4, [r3, #0]
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd90      	pop	{r4, r7, pc}

08001b4c <_ZNKSt5dequeIP5EventSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f103 0218 	add.w	r2, r3, #24
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3308      	adds	r3, #8
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4610      	mov	r0, r2
 8001b62:	f000 f85c 	bl	8001c1e <_ZStmiRKSt15_Deque_iteratorIP5EventRS1_PS1_ES6_>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_ZNKSt5dequeIP5EventSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f895 	bl	8001caa <_ZNKSt11_Deque_baseIP5EventSaIS1_EE19_M_get_Tp_allocatorEv>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 f877 	bl	8001c76 <_ZNSt5dequeIP5EventSaIS1_EE11_S_max_sizeERKS2_>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <_ZNSt5dequeIP5EventSaIS1_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	6809      	ldr	r1, [r1, #0]
 8001bac:	1a41      	subs	r1, r0, r1
 8001bae:	1089      	asrs	r1, r1, #2
 8001bb0:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d904      	bls.n	8001bc0 <_ZNSt5dequeIP5EventSaIS1_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	6839      	ldr	r1, [r7, #0]
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f880 	bl	8001cc0 <_ZNSt5dequeIP5EventSaIS1_EE17_M_reallocate_mapEjb>
      }
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <_ZNSt11_Deque_baseIP5EventSaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8001bd0:	687c      	ldr	r4, [r7, #4]
 8001bd2:	2004      	movs	r0, #4
 8001bd4:	f7ff fe2e 	bl	8001834 <_ZSt16__deque_buf_sizej>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4620      	mov	r0, r4
 8001bde:	f000 f909 	bl	8001df4 <_ZNSt16allocator_traitsISaIP5EventEE8allocateERS2_j>
 8001be2:	4603      	mov	r3, r0
      }
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd90      	pop	{r4, r7, pc}

08001bec <_ZNSt15_Deque_iteratorIP5EventRS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685c      	ldr	r4, [r3, #4]
 8001c08:	f000 f903 	bl	8001e12 <_ZNSt15_Deque_iteratorIP5EventRS1_PS1_E14_S_buffer_sizeEv>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	18e2      	adds	r2, r4, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	609a      	str	r2, [r3, #8]
      }
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd90      	pop	{r4, r7, pc}

08001c1e <_ZStmiRKSt15_Deque_iteratorIP5EventRS1_PS1_ES6_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8001c28:	f000 f8f3 	bl	8001e12 <_ZNSt15_Deque_iteratorIP5EventRS1_PS1_E14_S_buffer_sizeEv>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68da      	ldr	r2, [r3, #12]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	109b      	asrs	r3, r3, #2
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	bf14      	ite	ne
 8001c46:	2301      	movne	r3, #1
 8001c48:	2300      	moveq	r3, #0
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	fb01 f303 	mul.w	r3, r1, r3
	  + (__x._M_cur - __x._M_first)
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6811      	ldr	r1, [r2, #0]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6852      	ldr	r2, [r2, #4]
 8001c5a:	1a8a      	subs	r2, r1, r2
 8001c5c:	1092      	asrs	r2, r2, #2
 8001c5e:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	6891      	ldr	r1, [r2, #8]
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	1a8a      	subs	r2, r1, r2
 8001c6a:	1092      	asrs	r2, r2, #2
 8001c6c:	4413      	add	r3, r2
      }
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <_ZNSt5dequeIP5EventSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b084      	sub	sp, #16
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8001c7e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001c82:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f8cc 	bl	8001e22 <_ZNSt16allocator_traitsISaIP5EventEE8max_sizeERKS2_>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8001c8e:	f107 0208 	add.w	r2, r7, #8
 8001c92:	f107 030c 	add.w	r3, r7, #12
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 f8ce 	bl	8001e3a <_ZSt3minIjERKT_S2_S2_>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	681b      	ldr	r3, [r3, #0]
      }
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <_ZNKSt11_Deque_baseIP5EventSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <_ZNSt5dequeIP5EventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8001cc0:	b590      	push	{r4, r7, lr}
 8001cc2:	b08b      	sub	sp, #44	; 0x2c
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	109b      	asrs	r3, r3, #2
 8001cda:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8001cdc:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	6a3a      	ldr	r2, [r7, #32]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d92d      	bls.n	8001d4e <_ZNSt5dequeIP5EventSaIS1_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	1acb      	subs	r3, r1, r3
 8001cfe:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8001d00:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <_ZNSt5dequeIP5EventSaIS1_EE17_M_reallocate_mapEjb+0x4e>
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	e000      	b.n	8001d10 <_ZNSt5dequeIP5EventSaIS1_EE17_M_reallocate_mapEjb+0x50>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8001d12:	4413      	add	r3, r2
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d209      	bcs.n	8001d34 <_ZNSt5dequeIP5EventSaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8001d28:	3304      	adds	r3, #4
 8001d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f000 f898 	bl	8001e62 <_ZSt4copyIPPP5EventS3_ET0_T_S5_S4_>
 8001d32:	e048      	b.n	8001dc6 <_ZNSt5dequeIP5EventSaIS1_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8001d3c:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8001d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d44:	4413      	add	r3, r2
 8001d46:	461a      	mov	r2, r3
 8001d48:	f000 f8a3 	bl	8001e92 <_ZSt13copy_backwardIPPP5EventS3_ET0_T_S5_S4_>
 8001d4c:	e03b      	b.n	8001dc6 <_ZNSt5dequeIP5EventSaIS1_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3304      	adds	r3, #4
 8001d56:	f107 0208 	add.w	r2, r7, #8
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 f8b0 	bl	8001ec2 <_ZSt3maxIjERKT_S2_S2_>
 8001d62:	4603      	mov	r3, r0
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8001d68:	3302      	adds	r3, #2
 8001d6a:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	69b9      	ldr	r1, [r7, #24]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 f8ba 	bl	8001eea <_ZNSt11_Deque_baseIP5EventSaIS1_EE15_M_allocate_mapEj>
 8001d76:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	085b      	lsrs	r3, r3, #1
 8001d80:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <_ZNSt5dequeIP5EventSaIS1_EE17_M_reallocate_mapEjb+0xce>
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	e000      	b.n	8001d90 <_ZNSt5dequeIP5EventSaIS1_EE17_M_reallocate_mapEjb+0xd0>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4413      	add	r3, r2
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8001da0:	3304      	adds	r3, #4
 8001da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da4:	4619      	mov	r1, r3
 8001da6:	f000 f85c 	bl	8001e62 <_ZSt4copyIPPP5EventS3_ET0_T_S5_S4_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6819      	ldr	r1, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	461a      	mov	r2, r3
 8001db6:	f000 f8b5 	bl	8001f24 <_ZNSt11_Deque_baseIP5EventSaIS1_EE17_M_deallocate_mapEPPS1_j>

	  this->_M_impl._M_map = __new_map;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	3308      	adds	r3, #8
 8001dca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff0d 	bl	8001bec <_ZNSt15_Deque_iteratorIP5EventRS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f103 0018 	add.w	r0, r3, #24
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001dde:	3b01      	subs	r3, #1
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de4:	4413      	add	r3, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	f7ff ff00 	bl	8001bec <_ZNSt15_Deque_iteratorIP5EventRS1_PS1_E11_M_set_nodeEPS3_>
    }
 8001dec:	bf00      	nop
 8001dee:	372c      	adds	r7, #44	; 0x2c
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd90      	pop	{r4, r7, pc}

08001df4 <_ZNSt16allocator_traitsISaIP5EventEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001dfe:	2200      	movs	r2, #0
 8001e00:	6839      	ldr	r1, [r7, #0]
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f8b5 	bl	8001f72 <_ZN9__gnu_cxx13new_allocatorIP5EventE8allocateEjPKv>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <_ZNSt15_Deque_iteratorIP5EventRS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8001e12:	b580      	push	{r7, lr}
 8001e14:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8001e16:	2004      	movs	r0, #4
 8001e18:	f7ff fd0c 	bl	8001834 <_ZSt16__deque_buf_sizej>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <_ZNSt16allocator_traitsISaIP5EventEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f8ca 	bl	8001fc4 <_ZNK9__gnu_cxx13new_allocatorIP5EventE8max_sizeEv>
 8001e30:	4603      	mov	r3, r0
#else
	return size_t(-1) / sizeof(value_type);
#endif
      }
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d201      	bcs.n	8001e54 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	e000      	b.n	8001e56 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8001e54:	687b      	ldr	r3, [r7, #4]
    }
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <_ZSt4copyIPPP5EventS3_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8001e62:	b590      	push	{r4, r7, lr}
 8001e64:	b085      	sub	sp, #20
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 f8b4 	bl	8001fdc <_ZSt12__miter_baseIPPP5EventET_S4_>
 8001e74:	4604      	mov	r4, r0
 8001e76:	68b8      	ldr	r0, [r7, #8]
 8001e78:	f000 f8b0 	bl	8001fdc <_ZSt12__miter_baseIPPP5EventET_S4_>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	4619      	mov	r1, r3
 8001e82:	4620      	mov	r0, r4
 8001e84:	f000 f8b5 	bl	8001ff2 <_ZSt13__copy_move_aILb0EPPP5EventS3_ET1_T0_S5_S4_>
 8001e88:	4603      	mov	r3, r0
    }
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd90      	pop	{r4, r7, pc}

08001e92 <_ZSt13copy_backwardIPPP5EventS3_ET0_T_S5_S4_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8001e92:	b590      	push	{r4, r7, lr}
 8001e94:	b085      	sub	sp, #20
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f000 f89c 	bl	8001fdc <_ZSt12__miter_baseIPPP5EventET_S4_>
 8001ea4:	4604      	mov	r4, r0
 8001ea6:	68b8      	ldr	r0, [r7, #8]
 8001ea8:	f000 f898 	bl	8001fdc <_ZSt12__miter_baseIPPP5EventET_S4_>
 8001eac:	4603      	mov	r3, r0
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f000 f8c0 	bl	8002038 <_ZSt22__copy_move_backward_aILb0EPPP5EventS3_ET1_T0_S5_S4_>
 8001eb8:	4603      	mov	r3, r0
    }
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd90      	pop	{r4, r7, pc}

08001ec2 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d201      	bcs.n	8001edc <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	e000      	b.n	8001ede <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8001edc:	687b      	ldr	r3, [r7, #4]
    }
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <_ZNSt11_Deque_baseIP5EventSaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8001eea:	b590      	push	{r4, r7, lr}
 8001eec:	b085      	sub	sp, #20
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8001ef4:	f107 030c 	add.w	r3, r7, #12
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 f8bf 	bl	800207e <_ZNKSt11_Deque_baseIP5EventSaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	6839      	ldr	r1, [r7, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 f8d6 	bl	80020b8 <_ZNSt16allocator_traitsISaIPP5EventEE8allocateERS3_j>
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	bf00      	nop
      }
 8001f10:	f107 030c 	add.w	r3, r7, #12
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 f8c3 	bl	80020a0 <_ZNSaIPP5EventED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8001f1a:	4623      	mov	r3, r4
      }
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd90      	pop	{r4, r7, pc}

08001f24 <_ZNSt11_Deque_baseIP5EventSaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	68f9      	ldr	r1, [r7, #12]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f8a1 	bl	800207e <_ZNKSt11_Deque_baseIP5EventSaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	68b9      	ldr	r1, [r7, #8]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 f8c6 	bl	80020d6 <_ZNSt16allocator_traitsISaIPP5EventEE10deallocateERS3_PS2_j>
      }
 8001f4a:	f107 0314 	add.w	r3, r7, #20
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 f8a6 	bl	80020a0 <_ZNSaIPP5EventED1Ev>
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <_ZNK9__gnu_cxx13new_allocatorIP5EventE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001f62:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <_ZN9__gnu_cxx13new_allocatorIP5EventE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b084      	sub	sp, #16
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f7ff ffeb 	bl	8001f5a <_ZNK9__gnu_cxx13new_allocatorIP5EventE11_M_max_sizeEv>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	bf8c      	ite	hi
 8001f8c:	2301      	movhi	r3, #1
 8001f8e:	2300      	movls	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	bf14      	ite	ne
 8001f96:	2301      	movne	r3, #1
 8001f98:	2300      	moveq	r3, #0
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d007      	beq.n	8001fb0 <_ZN9__gnu_cxx13new_allocatorIP5EventE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa6:	d301      	bcc.n	8001fac <_ZN9__gnu_cxx13new_allocatorIP5EventE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8001fa8:	f008 f8dc 	bl	800a164 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8001fac:	f008 f8d7 	bl	800a15e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f008 f8c1 	bl	800a13c <_Znwj>
 8001fba:	4603      	mov	r3, r0
      }
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <_ZNK9__gnu_cxx13new_allocatorIP5EventE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ffc4 	bl	8001f5a <_ZNK9__gnu_cxx13new_allocatorIP5EventE11_M_max_sizeEv>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <_ZSt12__miter_baseIPPP5EventET_S4_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <_ZSt13__copy_move_aILb0EPPP5EventS3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8001ff2:	b5b0      	push	{r4, r5, r7, lr}
 8001ff4:	b084      	sub	sp, #16
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 f878 	bl	80020f4 <_ZSt12__niter_baseIPPP5EventET_S4_>
 8002004:	4604      	mov	r4, r0
 8002006:	68b8      	ldr	r0, [r7, #8]
 8002008:	f000 f874 	bl	80020f4 <_ZSt12__niter_baseIPPP5EventET_S4_>
 800200c:	4605      	mov	r5, r0
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4618      	mov	r0, r3
 8002012:	f000 f86f 	bl	80020f4 <_ZSt12__niter_baseIPPP5EventET_S4_>
 8002016:	4603      	mov	r3, r0
 8002018:	461a      	mov	r2, r3
 800201a:	4629      	mov	r1, r5
 800201c:	4620      	mov	r0, r4
 800201e:	f000 f874 	bl	800210a <_ZSt14__copy_move_a1ILb0EPPP5EventS3_ET1_T0_S5_S4_>
 8002022:	4602      	mov	r2, r0
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f000 f87e 	bl	800212a <_ZSt12__niter_wrapIPPP5EventET_RKS4_S4_>
 800202e:	4603      	mov	r3, r0
    }
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bdb0      	pop	{r4, r5, r7, pc}

08002038 <_ZSt22__copy_move_backward_aILb0EPPP5EventS3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8002038:	b5b0      	push	{r4, r5, r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 f855 	bl	80020f4 <_ZSt12__niter_baseIPPP5EventET_S4_>
 800204a:	4604      	mov	r4, r0
 800204c:	68b8      	ldr	r0, [r7, #8]
 800204e:	f000 f851 	bl	80020f4 <_ZSt12__niter_baseIPPP5EventET_S4_>
 8002052:	4605      	mov	r5, r0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4618      	mov	r0, r3
 8002058:	f000 f84c 	bl	80020f4 <_ZSt12__niter_baseIPPP5EventET_S4_>
 800205c:	4603      	mov	r3, r0
 800205e:	461a      	mov	r2, r3
 8002060:	4629      	mov	r1, r5
 8002062:	4620      	mov	r0, r4
 8002064:	f000 f86d 	bl	8002142 <_ZSt23__copy_move_backward_a1ILb0EPPP5EventS3_ET1_T0_S5_S4_>
 8002068:	4602      	mov	r2, r0
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	4611      	mov	r1, r2
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f85b 	bl	800212a <_ZSt12__niter_wrapIPPP5EventET_RKS4_S4_>
 8002074:	4603      	mov	r3, r0
    }
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bdb0      	pop	{r4, r5, r7, pc}

0800207e <_ZNKSt11_Deque_baseIP5EventSaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8002088:	6838      	ldr	r0, [r7, #0]
 800208a:	f7ff fe0e 	bl	8001caa <_ZNKSt11_Deque_baseIP5EventSaIS1_EE19_M_get_Tp_allocatorEv>
 800208e:	4603      	mov	r3, r0
 8002090:	4619      	mov	r1, r3
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f865 	bl	8002162 <_ZNSaIPP5EventEC1IS0_EERKSaIT_E>
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <_ZNSaIPP5EventED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f867 	bl	800217c <_ZN9__gnu_cxx13new_allocatorIPP5EventED1Ev>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <_ZNSt16allocator_traitsISaIPP5EventEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80020c2:	2200      	movs	r2, #0
 80020c4:	6839      	ldr	r1, [r7, #0]
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f86f 	bl	80021aa <_ZN9__gnu_cxx13new_allocatorIPP5EventE8allocateEjPKv>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <_ZNSt16allocator_traitsISaIPP5EventEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b084      	sub	sp, #16
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 f888 	bl	80021fc <_ZN9__gnu_cxx13new_allocatorIPP5EventE10deallocateEPS3_j>
 80020ec:	bf00      	nop
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <_ZSt12__niter_baseIPPP5EventET_S4_>:
    __niter_base(_Iterator __it)
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
    { return __it; }
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <_ZSt14__copy_move_a1ILb0EPPP5EventS3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800210a:	b580      	push	{r7, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f87e 	bl	800221c <_ZSt14__copy_move_a2ILb0EPPP5EventS3_ET1_T0_S5_S4_>
 8002120:	4603      	mov	r3, r0
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <_ZSt12__niter_wrapIPPP5EventET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
    { return __res; }
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <_ZSt23__copy_move_backward_a1ILb0EPPP5EventS3_ET1_T0_S5_S4_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 f872 	bl	800223c <_ZSt23__copy_move_backward_a2ILb0EPPP5EventS3_ET1_T0_S5_S4_>
 8002158:	4603      	mov	r3, r0
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <_ZNSaIPP5EventEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f875 	bl	800225c <_ZN9__gnu_cxx13new_allocatorIPP5EventEC1Ev>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <_ZN9__gnu_cxx13new_allocatorIPP5EventED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <_ZNK9__gnu_cxx13new_allocatorIPP5EventE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800219a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <_ZN9__gnu_cxx13new_allocatorIPP5EventE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	60f8      	str	r0, [r7, #12]
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f7ff ffeb 	bl	8002192 <_ZNK9__gnu_cxx13new_allocatorIPP5EventE11_M_max_sizeEv>
 80021bc:	4602      	mov	r2, r0
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	4293      	cmp	r3, r2
 80021c2:	bf8c      	ite	hi
 80021c4:	2301      	movhi	r3, #1
 80021c6:	2300      	movls	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	bf14      	ite	ne
 80021ce:	2301      	movne	r3, #1
 80021d0:	2300      	moveq	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d007      	beq.n	80021e8 <_ZN9__gnu_cxx13new_allocatorIPP5EventE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021de:	d301      	bcc.n	80021e4 <_ZN9__gnu_cxx13new_allocatorIPP5EventE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80021e0:	f007 ffc0 	bl	800a164 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80021e4:	f007 ffbb 	bl	800a15e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f007 ffa5 	bl	800a13c <_Znwj>
 80021f2:	4603      	mov	r3, r0
      }
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <_ZN9__gnu_cxx13new_allocatorIPP5EventE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4619      	mov	r1, r3
 800220e:	68b8      	ldr	r0, [r7, #8]
 8002210:	f007 ff92 	bl	800a138 <_ZdlPvj>
      }
 8002214:	bf00      	nop
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <_ZSt14__copy_move_a2ILb0EPPP5EventS3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	68b9      	ldr	r1, [r7, #8]
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 f820 	bl	8002272 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPP5EventEEPT_PKS6_S9_S7_>
 8002232:	4603      	mov	r3, r0
    }
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <_ZSt23__copy_move_backward_a2ILb0EPPP5EventS3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68b9      	ldr	r1, [r7, #8]
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f82d 	bl	80022ac <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPP5EventEEPT_PKS6_S9_S7_>
 8002252:	4603      	mov	r3, r0
    }
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <_ZN9__gnu_cxx13new_allocatorIPP5EventEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPP5EventEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002272:	b580      	push	{r7, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	109b      	asrs	r3, r3, #2
 8002286:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d006      	beq.n	800229c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPP5EventEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	461a      	mov	r2, r3
 8002294:	68f9      	ldr	r1, [r7, #12]
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f008 f892 	bl	800a3c0 <memmove>
	  return __result + _Num;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	4413      	add	r3, r2
	}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPP5EventEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	109b      	asrs	r3, r3, #2
 80022c0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00a      	beq.n	80022de <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPP5EventEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	425b      	negs	r3, r3
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	18d0      	adds	r0, r2, r3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	461a      	mov	r2, r3
 80022d8:	68f9      	ldr	r1, [r7, #12]
 80022da:	f008 f871 	bl	800a3c0 <memmove>
	  return __result - _Num;
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	425b      	negs	r3, r3
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	4413      	add	r3, r2
	}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <_ZN11waitingTaskC1EPbt>:
class waitingTask: public Event {
private:
	bool* reset;
	uint16_t time;
public:
	waitingTask(bool* reset, uint16_t time): reset(reset), time(time){};
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	4613      	mov	r3, r2
 80022fc:	80fb      	strh	r3, [r7, #6]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fad7 	bl	80018b4 <_ZN5EventC1Ev>
 8002306:	4a07      	ldr	r2, [pc, #28]	; (8002324 <_ZN11waitingTaskC1EPbt+0x34>)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	88fa      	ldrh	r2, [r7, #6]
 8002316:	811a      	strh	r2, [r3, #8]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	08013af8 	.word	0x08013af8

08002328 <_ZN11waitingTaskD1Ev>:
	virtual ~waitingTask(){};
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	4a05      	ldr	r2, [pc, #20]	; (8002348 <_ZN11waitingTaskD1Ev+0x20>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fa9b 	bl	8001874 <_ZN5EventD1Ev>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	08013af8 	.word	0x08013af8

0800234c <_ZN11waitingTaskD0Ev>:
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ffe7 	bl	8002328 <_ZN11waitingTaskD1Ev>
 800235a:	210c      	movs	r1, #12
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f007 feeb 	bl	800a138 <_ZdlPvj>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <_ZN11waitingTask11handleEventEv>:
	void handleEvent(){/*while(true){
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
		if(*reset == true|| HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 0) {*reset=false ;return;}
	}*/
		for (int k = 0; k < time; ++k) {
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	e00a      	b.n	8002390 <_ZN11waitingTask11handleEventEv+0x24>
			if(*reset == true) return;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d00c      	beq.n	800239e <_ZN11waitingTask11handleEventEv+0x32>
			HAL_Delay(1);
 8002384:	2001      	movs	r0, #1
 8002386:	f002 ff73 	bl	8005270 <HAL_Delay>
		for (int k = 0; k < time; ++k) {
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	3301      	adds	r3, #1
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	891b      	ldrh	r3, [r3, #8]
 8002394:	461a      	mov	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4293      	cmp	r3, r2
 800239a:	dbee      	blt.n	800237a <_ZN11waitingTask11handleEventEv+0xe>
 800239c:	e000      	b.n	80023a0 <_ZN11waitingTask11handleEventEv+0x34>
			if(*reset == true) return;
 800239e:	bf00      	nop
		}
	};
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <_ZN11CancelEventC1Ev>:
#include "DisplayEvent.h"
#include "waitingTask.h"
#include "LedEvents.h"
#include "OLED_DisplayEvent.h"

CancelEvent::CancelEvent() {}
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fa7e 	bl	80018b4 <_ZN5EventC1Ev>
 80023b8:	4a03      	ldr	r2, [pc, #12]	; (80023c8 <_ZN11CancelEventC1Ev+0x20>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	08013b0c 	.word	0x08013b0c

080023cc <_ZN11CancelEventD1Ev>:
CancelEvent::~CancelEvent() {}
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	4a05      	ldr	r2, [pc, #20]	; (80023ec <_ZN11CancelEventD1Ev+0x20>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fa49 	bl	8001874 <_ZN5EventD1Ev>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	08013b0c 	.word	0x08013b0c

080023f0 <_ZN11CancelEventD0Ev>:
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff ffe7 	bl	80023cc <_ZN11CancelEventD1Ev>
 80023fe:	2104      	movs	r1, #4
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f007 fe99 	bl	800a138 <_ZdlPvj>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <_ZN11CancelEvent11handleEventEv>:

void CancelEvent::handleEvent() {
 8002410:	b590      	push	{r4, r7, lr}
 8002412:	b093      	sub	sp, #76	; 0x4c
 8002414:	af02      	add	r7, sp, #8
 8002416:	6078      	str	r0, [r7, #4]
	bool t = false;
 8002418:	2300      	movs	r3, #0
 800241a:	72fb      	strb	r3, [r7, #11]
	// uh yeah naah
	event_queue.push(new TestEventRed(1));
 800241c:	200c      	movs	r0, #12
 800241e:	f007 fe8d 	bl	800a13c <_Znwj>
 8002422:	4603      	mov	r3, r0
 8002424:	461c      	mov	r4, r3
 8002426:	2101      	movs	r1, #1
 8002428:	4620      	mov	r0, r4
 800242a:	f000 fbb9 	bl	8002ba0 <_ZN12TestEventRedC1Eh>
 800242e:	60fc      	str	r4, [r7, #12]
 8002430:	f107 030c 	add.w	r3, r7, #12
 8002434:	4619      	mov	r1, r3
 8002436:	4880      	ldr	r0, [pc, #512]	; (8002638 <_ZN11CancelEvent11handleEventEv+0x228>)
 8002438:	f7ff fab8 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
	event_queue.push(new DisplayEvent(&lcd, (char*)"STOP!", 0, 0));
 800243c:	2010      	movs	r0, #16
 800243e:	f007 fe7d 	bl	800a13c <_Znwj>
 8002442:	4603      	mov	r3, r0
 8002444:	461c      	mov	r4, r3
 8002446:	2301      	movs	r3, #1
 8002448:	9301      	str	r3, [sp, #4]
 800244a:	2300      	movs	r3, #0
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	2300      	movs	r3, #0
 8002450:	4a7a      	ldr	r2, [pc, #488]	; (800263c <_ZN11CancelEvent11handleEventEv+0x22c>)
 8002452:	497b      	ldr	r1, [pc, #492]	; (8002640 <_ZN11CancelEvent11handleEventEv+0x230>)
 8002454:	4620      	mov	r0, r4
 8002456:	f000 f90d 	bl	8002674 <_ZN12DisplayEventC1EP17LCD_HandleTypeDefPchhb>
 800245a:	613c      	str	r4, [r7, #16]
 800245c:	f107 0310 	add.w	r3, r7, #16
 8002460:	4619      	mov	r1, r3
 8002462:	4875      	ldr	r0, [pc, #468]	; (8002638 <_ZN11CancelEvent11handleEventEv+0x228>)
 8002464:	f7ff faa2 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
	event_queue.push(new waitingTask(&t, 1000));
 8002468:	200c      	movs	r0, #12
 800246a:	f007 fe67 	bl	800a13c <_Znwj>
 800246e:	4603      	mov	r3, r0
 8002470:	461c      	mov	r4, r3
 8002472:	f107 030b 	add.w	r3, r7, #11
 8002476:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800247a:	4619      	mov	r1, r3
 800247c:	4620      	mov	r0, r4
 800247e:	f7ff ff37 	bl	80022f0 <_ZN11waitingTaskC1EPbt>
 8002482:	617c      	str	r4, [r7, #20]
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	4619      	mov	r1, r3
 800248a:	486b      	ldr	r0, [pc, #428]	; (8002638 <_ZN11CancelEvent11handleEventEv+0x228>)
 800248c:	f7ff fa8e 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
	event_queue.push(new DisplayEvent(&lcd, (char*)"Cleaning Up!", 0, 0));
 8002490:	2010      	movs	r0, #16
 8002492:	f007 fe53 	bl	800a13c <_Znwj>
 8002496:	4603      	mov	r3, r0
 8002498:	461c      	mov	r4, r3
 800249a:	2301      	movs	r3, #1
 800249c:	9301      	str	r3, [sp, #4]
 800249e:	2300      	movs	r3, #0
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	2300      	movs	r3, #0
 80024a4:	4a67      	ldr	r2, [pc, #412]	; (8002644 <_ZN11CancelEvent11handleEventEv+0x234>)
 80024a6:	4966      	ldr	r1, [pc, #408]	; (8002640 <_ZN11CancelEvent11handleEventEv+0x230>)
 80024a8:	4620      	mov	r0, r4
 80024aa:	f000 f8e3 	bl	8002674 <_ZN12DisplayEventC1EP17LCD_HandleTypeDefPchhb>
 80024ae:	61bc      	str	r4, [r7, #24]
 80024b0:	f107 0318 	add.w	r3, r7, #24
 80024b4:	4619      	mov	r1, r3
 80024b6:	4860      	ldr	r0, [pc, #384]	; (8002638 <_ZN11CancelEvent11handleEventEv+0x228>)
 80024b8:	f7ff fa78 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
	event_queue.push(new waitingTask(&t,1000));
 80024bc:	200c      	movs	r0, #12
 80024be:	f007 fe3d 	bl	800a13c <_Znwj>
 80024c2:	4603      	mov	r3, r0
 80024c4:	461c      	mov	r4, r3
 80024c6:	f107 030b 	add.w	r3, r7, #11
 80024ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024ce:	4619      	mov	r1, r3
 80024d0:	4620      	mov	r0, r4
 80024d2:	f7ff ff0d 	bl	80022f0 <_ZN11waitingTaskC1EPbt>
 80024d6:	61fc      	str	r4, [r7, #28]
 80024d8:	f107 031c 	add.w	r3, r7, #28
 80024dc:	4619      	mov	r1, r3
 80024de:	4856      	ldr	r0, [pc, #344]	; (8002638 <_ZN11CancelEvent11handleEventEv+0x228>)
 80024e0:	f7ff fa64 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
	event_queue.push(new TestEventGreenBlink(0, &htim4));
 80024e4:	200c      	movs	r0, #12
 80024e6:	f007 fe29 	bl	800a13c <_Znwj>
 80024ea:	4603      	mov	r3, r0
 80024ec:	461c      	mov	r4, r3
 80024ee:	4a56      	ldr	r2, [pc, #344]	; (8002648 <_ZN11CancelEvent11handleEventEv+0x238>)
 80024f0:	2100      	movs	r1, #0
 80024f2:	4620      	mov	r0, r4
 80024f4:	f000 fb90 	bl	8002c18 <_ZN19TestEventGreenBlinkC1EhP17TIM_HandleTypeDef>
 80024f8:	623c      	str	r4, [r7, #32]
 80024fa:	f107 0320 	add.w	r3, r7, #32
 80024fe:	4619      	mov	r1, r3
 8002500:	484d      	ldr	r0, [pc, #308]	; (8002638 <_ZN11CancelEvent11handleEventEv+0x228>)
 8002502:	f7ff fa53 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
	event_queue.push(new LedEvent(GPIOB, LD1_Pin | LD2_Pin | LD3_Pin, 0));
 8002506:	200c      	movs	r0, #12
 8002508:	f007 fe18 	bl	800a13c <_Znwj>
 800250c:	4603      	mov	r3, r0
 800250e:	461c      	mov	r4, r3
 8002510:	2300      	movs	r3, #0
 8002512:	f244 0281 	movw	r2, #16513	; 0x4081
 8002516:	494d      	ldr	r1, [pc, #308]	; (800264c <_ZN11CancelEvent11handleEventEv+0x23c>)
 8002518:	4620      	mov	r0, r4
 800251a:	f000 fa07 	bl	800292c <_ZN8LedEventC1EP12GPIO_TypeDefth>
 800251e:	627c      	str	r4, [r7, #36]	; 0x24
 8002520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002524:	4619      	mov	r1, r3
 8002526:	4844      	ldr	r0, [pc, #272]	; (8002638 <_ZN11CancelEvent11handleEventEv+0x228>)
 8002528:	f7ff fa40 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
	event_queue.push(new TestEventGreen(1));
 800252c:	200c      	movs	r0, #12
 800252e:	f007 fe05 	bl	800a13c <_Znwj>
 8002532:	4603      	mov	r3, r0
 8002534:	461c      	mov	r4, r3
 8002536:	2101      	movs	r1, #1
 8002538:	4620      	mov	r0, r4
 800253a:	f000 fabd 	bl	8002ab8 <_ZN14TestEventGreenC1Eh>
 800253e:	62bc      	str	r4, [r7, #40]	; 0x28
 8002540:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002544:	4619      	mov	r1, r3
 8002546:	483c      	ldr	r0, [pc, #240]	; (8002638 <_ZN11CancelEvent11handleEventEv+0x228>)
 8002548:	f7ff fa30 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
	event_queue.push(new DisplayEvent(&lcd, (char*)"Bereit!", 0, 0));
 800254c:	2010      	movs	r0, #16
 800254e:	f007 fdf5 	bl	800a13c <_Znwj>
 8002552:	4603      	mov	r3, r0
 8002554:	461c      	mov	r4, r3
 8002556:	2301      	movs	r3, #1
 8002558:	9301      	str	r3, [sp, #4]
 800255a:	2300      	movs	r3, #0
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	2300      	movs	r3, #0
 8002560:	4a3b      	ldr	r2, [pc, #236]	; (8002650 <_ZN11CancelEvent11handleEventEv+0x240>)
 8002562:	4937      	ldr	r1, [pc, #220]	; (8002640 <_ZN11CancelEvent11handleEventEv+0x230>)
 8002564:	4620      	mov	r0, r4
 8002566:	f000 f885 	bl	8002674 <_ZN12DisplayEventC1EP17LCD_HandleTypeDefPchhb>
 800256a:	62fc      	str	r4, [r7, #44]	; 0x2c
 800256c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002570:	4619      	mov	r1, r3
 8002572:	4831      	ldr	r0, [pc, #196]	; (8002638 <_ZN11CancelEvent11handleEventEv+0x228>)
 8002574:	f7ff fa1a 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
	event_queue.push(new DisplayEvent(&lcd, (char*)"Btn -> Start", 1, 0, false));
 8002578:	2010      	movs	r0, #16
 800257a:	f007 fddf 	bl	800a13c <_Znwj>
 800257e:	4603      	mov	r3, r0
 8002580:	461c      	mov	r4, r3
 8002582:	2300      	movs	r3, #0
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	2300      	movs	r3, #0
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	2301      	movs	r3, #1
 800258c:	4a31      	ldr	r2, [pc, #196]	; (8002654 <_ZN11CancelEvent11handleEventEv+0x244>)
 800258e:	492c      	ldr	r1, [pc, #176]	; (8002640 <_ZN11CancelEvent11handleEventEv+0x230>)
 8002590:	4620      	mov	r0, r4
 8002592:	f000 f86f 	bl	8002674 <_ZN12DisplayEventC1EP17LCD_HandleTypeDefPchhb>
 8002596:	633c      	str	r4, [r7, #48]	; 0x30
 8002598:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800259c:	4619      	mov	r1, r3
 800259e:	4826      	ldr	r0, [pc, #152]	; (8002638 <_ZN11CancelEvent11handleEventEv+0x228>)
 80025a0:	f7ff fa04 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>


	event_queue.push(new OLED_DisplayEvent("!!!!!!!!!!","Aborting","!!!!!!!!!!","",OLED_Multiwrite_Big));
 80025a4:	f247 00a4 	movw	r0, #28836	; 0x70a4
 80025a8:	f007 fdc8 	bl	800a13c <_Znwj>
 80025ac:	4603      	mov	r3, r0
 80025ae:	461c      	mov	r4, r3
 80025b0:	2307      	movs	r3, #7
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	4b28      	ldr	r3, [pc, #160]	; (8002658 <_ZN11CancelEvent11handleEventEv+0x248>)
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	4b28      	ldr	r3, [pc, #160]	; (800265c <_ZN11CancelEvent11handleEventEv+0x24c>)
 80025ba:	4a29      	ldr	r2, [pc, #164]	; (8002660 <_ZN11CancelEvent11handleEventEv+0x250>)
 80025bc:	4927      	ldr	r1, [pc, #156]	; (800265c <_ZN11CancelEvent11handleEventEv+0x24c>)
 80025be:	4620      	mov	r0, r4
 80025c0:	f000 fb98 	bl	8002cf4 <_ZN17OLED_DisplayEventC1EPcS0_S0_S0_7DISP_OP>
 80025c4:	637c      	str	r4, [r7, #52]	; 0x34
 80025c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025ca:	4619      	mov	r1, r3
 80025cc:	481a      	ldr	r0, [pc, #104]	; (8002638 <_ZN11CancelEvent11handleEventEv+0x228>)
 80025ce:	f7ff f9ed 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
	event_queue.push(new OLED_DisplayEvent("!!!!!!!!!!","Cleaning Up","","",OLED_Multiwrite_Big));
 80025d2:	f247 00a4 	movw	r0, #28836	; 0x70a4
 80025d6:	f007 fdb1 	bl	800a13c <_Znwj>
 80025da:	4603      	mov	r3, r0
 80025dc:	461c      	mov	r4, r3
 80025de:	2307      	movs	r3, #7
 80025e0:	9301      	str	r3, [sp, #4]
 80025e2:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <_ZN11CancelEvent11handleEventEv+0x248>)
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <_ZN11CancelEvent11handleEventEv+0x248>)
 80025e8:	4a1e      	ldr	r2, [pc, #120]	; (8002664 <_ZN11CancelEvent11handleEventEv+0x254>)
 80025ea:	491c      	ldr	r1, [pc, #112]	; (800265c <_ZN11CancelEvent11handleEventEv+0x24c>)
 80025ec:	4620      	mov	r0, r4
 80025ee:	f000 fb81 	bl	8002cf4 <_ZN17OLED_DisplayEventC1EPcS0_S0_S0_7DISP_OP>
 80025f2:	63bc      	str	r4, [r7, #56]	; 0x38
 80025f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025f8:	4619      	mov	r1, r3
 80025fa:	480f      	ldr	r0, [pc, #60]	; (8002638 <_ZN11CancelEvent11handleEventEv+0x228>)
 80025fc:	f7ff f9d6 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
	event_queue.push(new OLED_DisplayEvent("Ready","Blue Btn","->Restart","",OLED_Multiwrite_Big));
 8002600:	f247 00a4 	movw	r0, #28836	; 0x70a4
 8002604:	f007 fd9a 	bl	800a13c <_Znwj>
 8002608:	4603      	mov	r3, r0
 800260a:	461c      	mov	r4, r3
 800260c:	2307      	movs	r3, #7
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <_ZN11CancelEvent11handleEventEv+0x248>)
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	4b14      	ldr	r3, [pc, #80]	; (8002668 <_ZN11CancelEvent11handleEventEv+0x258>)
 8002616:	4a15      	ldr	r2, [pc, #84]	; (800266c <_ZN11CancelEvent11handleEventEv+0x25c>)
 8002618:	4915      	ldr	r1, [pc, #84]	; (8002670 <_ZN11CancelEvent11handleEventEv+0x260>)
 800261a:	4620      	mov	r0, r4
 800261c:	f000 fb6a 	bl	8002cf4 <_ZN17OLED_DisplayEventC1EPcS0_S0_S0_7DISP_OP>
 8002620:	63fc      	str	r4, [r7, #60]	; 0x3c
 8002622:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002626:	4619      	mov	r1, r3
 8002628:	4803      	ldr	r0, [pc, #12]	; (8002638 <_ZN11CancelEvent11handleEventEv+0x228>)
 800262a:	f7ff f9bf 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
}
 800262e:	bf00      	nop
 8002630:	3744      	adds	r7, #68	; 0x44
 8002632:	46bd      	mov	sp, r7
 8002634:	bd90      	pop	{r4, r7, pc}
 8002636:	bf00      	nop
 8002638:	20000e54 	.word	0x20000e54
 800263c:	08011c40 	.word	0x08011c40
 8002640:	20000018 	.word	0x20000018
 8002644:	08011c48 	.word	0x08011c48
 8002648:	2000081c 	.word	0x2000081c
 800264c:	40020400 	.word	0x40020400
 8002650:	08011c58 	.word	0x08011c58
 8002654:	08011c60 	.word	0x08011c60
 8002658:	08011c88 	.word	0x08011c88
 800265c:	08011c70 	.word	0x08011c70
 8002660:	08011c7c 	.word	0x08011c7c
 8002664:	08011c8c 	.word	0x08011c8c
 8002668:	08011c98 	.word	0x08011c98
 800266c:	08011ca4 	.word	0x08011ca4
 8002670:	08011cb0 	.word	0x08011cb0

08002674 <_ZN12DisplayEventC1EP17LCD_HandleTypeDefPchhb>:
#include "DisplayEvent.h"

DisplayEvent::DisplayEvent(LCD_HandleTypeDef* lcd, char* str, uint8_t row, uint8_t col, bool clear):
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	70fb      	strb	r3, [r7, #3]
lcd(lcd), str(str), row(row), col(col), clear(clear) {}
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff f915 	bl	80018b4 <_ZN5EventC1Ev>
 800268a:	4a0b      	ldr	r2, [pc, #44]	; (80026b8 <_ZN12DisplayEventC1EP17LCD_HandleTypeDefPchhb+0x44>)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	78fa      	ldrb	r2, [r7, #3]
 80026a0:	731a      	strb	r2, [r3, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	7e3a      	ldrb	r2, [r7, #24]
 80026a6:	735a      	strb	r2, [r3, #13]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	7f3a      	ldrb	r2, [r7, #28]
 80026ac:	739a      	strb	r2, [r3, #14]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	08013b20 	.word	0x08013b20

080026bc <_ZN12DisplayEventD1Ev>:

DisplayEvent::~DisplayEvent() {}
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	4a05      	ldr	r2, [pc, #20]	; (80026dc <_ZN12DisplayEventD1Ev+0x20>)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff f8d1 	bl	8001874 <_ZN5EventD1Ev>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	08013b20 	.word	0x08013b20

080026e0 <_ZN12DisplayEventD0Ev>:
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff ffe7 	bl	80026bc <_ZN12DisplayEventD1Ev>
 80026ee:	2110      	movs	r1, #16
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f007 fd21 	bl	800a138 <_ZdlPvj>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <_ZN12DisplayEvent11handleEventEv>:

void DisplayEvent::handleEvent(){
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
		if(this->clear == true) LCD_Clear(lcd);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	7b9b      	ldrb	r3, [r3, #14]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d104      	bne.n	800271a <_ZN12DisplayEvent11handleEventEv+0x1a>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4618      	mov	r0, r3
 8002716:	f001 f874 	bl	8003802 <_Z9LCD_ClearP17LCD_HandleTypeDef>
		HAL_Delay(10);
 800271a:	200a      	movs	r0, #10
 800271c:	f002 fda8 	bl	8005270 <HAL_Delay>
		LCD_SetCursor(lcd, row, col);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6858      	ldr	r0, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	7b19      	ldrb	r1, [r3, #12]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	7b5b      	ldrb	r3, [r3, #13]
 800272c:	461a      	mov	r2, r3
 800272e:	f001 f825 	bl	800377c <_Z13LCD_SetCursorP17LCD_HandleTypeDefhh>
		HAL_Delay(10);
 8002732:	200a      	movs	r0, #10
 8002734:	f002 fd9c 	bl	8005270 <HAL_Delay>
		LCD_Printf(lcd, str);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	4619      	mov	r1, r3
 8002742:	4610      	mov	r0, r2
 8002744:	f001 f840 	bl	80037c8 <_Z10LCD_PrintfP17LCD_HandleTypeDefPKcz>
		HAL_Delay(10);
 8002748:	200a      	movs	r0, #10
 800274a:	f002 fd91 	bl	8005270 <HAL_Delay>
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <_ZN27FinalCalculationResultEventC1Ev>:
#include "LedEvents.h"
#include "OLED_DisplayEvent.h"



FinalCalculationResultEvent::FinalCalculationResultEvent() {}
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff f8a6 	bl	80018b4 <_ZN5EventC1Ev>
 8002768:	4a03      	ldr	r2, [pc, #12]	; (8002778 <_ZN27FinalCalculationResultEventC1Ev+0x20>)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	08013b34 	.word	0x08013b34

0800277c <_ZN27FinalCalculationResultEventD1Ev>:
FinalCalculationResultEvent::~FinalCalculationResultEvent() {}
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	4a05      	ldr	r2, [pc, #20]	; (800279c <_ZN27FinalCalculationResultEventD1Ev+0x20>)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff f871 	bl	8001874 <_ZN5EventD1Ev>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4618      	mov	r0, r3
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	08013b34 	.word	0x08013b34

080027a0 <_ZN27FinalCalculationResultEventD0Ev>:
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff ffe7 	bl	800277c <_ZN27FinalCalculationResultEventD1Ev>
 80027ae:	2104      	movs	r1, #4
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f007 fcc1 	bl	800a138 <_ZdlPvj>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <_ZN27FinalCalculationResultEvent11handleEventEv>:

void FinalCalculationResultEvent::handleEvent(){
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b08f      	sub	sp, #60	; 0x3c
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	6078      	str	r0, [r7, #4]
	#ifdef DEBUG
	char msgBuffer[16];
	sprintf(msgBuffer, "Time: %lu.%lu ms\r\n", T, TIM7->CNT); //%d
 80027c8:	4b4b      	ldr	r3, [pc, #300]	; (80028f8 <_ZN27FinalCalculationResultEvent11handleEventEv+0x138>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4b4b      	ldr	r3, [pc, #300]	; (80028fc <_ZN27FinalCalculationResultEvent11handleEventEv+0x13c>)
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	f107 0008 	add.w	r0, r7, #8
 80027d4:	494a      	ldr	r1, [pc, #296]	; (8002900 <_ZN27FinalCalculationResultEvent11handleEventEv+0x140>)
 80027d6:	f007 fd99 	bl	800a30c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) msgBuffer, strlen(msgBuffer), HAL_MAX_DELAY);
 80027da:	f107 0308 	add.w	r3, r7, #8
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fd fd06 	bl	80001f0 <strlen>
 80027e4:	4603      	mov	r3, r0
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	f107 0108 	add.w	r1, r7, #8
 80027ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027f0:	4844      	ldr	r0, [pc, #272]	; (8002904 <_ZN27FinalCalculationResultEvent11handleEventEv+0x144>)
 80027f2:	f006 fe2a 	bl	800944a <HAL_UART_Transmit>
	#endif

	sprintf(msgBuffer2, "Time: %lu.%lu ms", T, TIM7->CNT); //%d // wirte msg Buffer for LCD
 80027f6:	4b40      	ldr	r3, [pc, #256]	; (80028f8 <_ZN27FinalCalculationResultEvent11handleEventEv+0x138>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	4b40      	ldr	r3, [pc, #256]	; (80028fc <_ZN27FinalCalculationResultEvent11handleEventEv+0x13c>)
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	4942      	ldr	r1, [pc, #264]	; (8002908 <_ZN27FinalCalculationResultEvent11handleEventEv+0x148>)
 8002800:	4842      	ldr	r0, [pc, #264]	; (800290c <_ZN27FinalCalculationResultEvent11handleEventEv+0x14c>)
 8002802:	f007 fd83 	bl	800a30c <siprintf>

	event_queue.push(new DisplayEvent(&lcd, (char*)"Messung fertig:", 0, 0));
 8002806:	2010      	movs	r0, #16
 8002808:	f007 fc98 	bl	800a13c <_Znwj>
 800280c:	4603      	mov	r3, r0
 800280e:	461c      	mov	r4, r3
 8002810:	2301      	movs	r3, #1
 8002812:	9301      	str	r3, [sp, #4]
 8002814:	2300      	movs	r3, #0
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	2300      	movs	r3, #0
 800281a:	4a3d      	ldr	r2, [pc, #244]	; (8002910 <_ZN27FinalCalculationResultEvent11handleEventEv+0x150>)
 800281c:	493d      	ldr	r1, [pc, #244]	; (8002914 <_ZN27FinalCalculationResultEvent11handleEventEv+0x154>)
 800281e:	4620      	mov	r0, r4
 8002820:	f7ff ff28 	bl	8002674 <_ZN12DisplayEventC1EP17LCD_HandleTypeDefPchhb>
 8002824:	61bc      	str	r4, [r7, #24]
 8002826:	f107 0318 	add.w	r3, r7, #24
 800282a:	4619      	mov	r1, r3
 800282c:	483a      	ldr	r0, [pc, #232]	; (8002918 <_ZN27FinalCalculationResultEvent11handleEventEv+0x158>)
 800282e:	f7ff f8bd 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
	event_queue.push(new DisplayEvent(&lcd, (char*)msgBuffer2, 1, 0, false));
 8002832:	2010      	movs	r0, #16
 8002834:	f007 fc82 	bl	800a13c <_Znwj>
 8002838:	4603      	mov	r3, r0
 800283a:	461c      	mov	r4, r3
 800283c:	2300      	movs	r3, #0
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	2300      	movs	r3, #0
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	2301      	movs	r3, #1
 8002846:	4a31      	ldr	r2, [pc, #196]	; (800290c <_ZN27FinalCalculationResultEvent11handleEventEv+0x14c>)
 8002848:	4932      	ldr	r1, [pc, #200]	; (8002914 <_ZN27FinalCalculationResultEvent11handleEventEv+0x154>)
 800284a:	4620      	mov	r0, r4
 800284c:	f7ff ff12 	bl	8002674 <_ZN12DisplayEventC1EP17LCD_HandleTypeDefPchhb>
 8002850:	61fc      	str	r4, [r7, #28]
 8002852:	f107 031c 	add.w	r3, r7, #28
 8002856:	4619      	mov	r1, r3
 8002858:	482f      	ldr	r0, [pc, #188]	; (8002918 <_ZN27FinalCalculationResultEvent11handleEventEv+0x158>)
 800285a:	f7ff f8a7 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>

	event_queue.push(new OLED_DisplayEvent("Results:","Tau in ms:",msgBuffer2,"", OLED_Multiwrite_Big));
 800285e:	f247 00a4 	movw	r0, #28836	; 0x70a4
 8002862:	f007 fc6b 	bl	800a13c <_Znwj>
 8002866:	4603      	mov	r3, r0
 8002868:	461c      	mov	r4, r3
 800286a:	2307      	movs	r3, #7
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	4b2b      	ldr	r3, [pc, #172]	; (800291c <_ZN27FinalCalculationResultEvent11handleEventEv+0x15c>)
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	4b26      	ldr	r3, [pc, #152]	; (800290c <_ZN27FinalCalculationResultEvent11handleEventEv+0x14c>)
 8002874:	4a2a      	ldr	r2, [pc, #168]	; (8002920 <_ZN27FinalCalculationResultEvent11handleEventEv+0x160>)
 8002876:	492b      	ldr	r1, [pc, #172]	; (8002924 <_ZN27FinalCalculationResultEvent11handleEventEv+0x164>)
 8002878:	4620      	mov	r0, r4
 800287a:	f000 fa3b 	bl	8002cf4 <_ZN17OLED_DisplayEventC1EPcS0_S0_S0_7DISP_OP>
 800287e:	623c      	str	r4, [r7, #32]
 8002880:	f107 0320 	add.w	r3, r7, #32
 8002884:	4619      	mov	r1, r3
 8002886:	4824      	ldr	r0, [pc, #144]	; (8002918 <_ZN27FinalCalculationResultEvent11handleEventEv+0x158>)
 8002888:	f7ff f890 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>

	//cleaning up!
	event_queue.push(new TestEventGreenBlink(0, &htim4));
 800288c:	200c      	movs	r0, #12
 800288e:	f007 fc55 	bl	800a13c <_Znwj>
 8002892:	4603      	mov	r3, r0
 8002894:	461c      	mov	r4, r3
 8002896:	4a24      	ldr	r2, [pc, #144]	; (8002928 <_ZN27FinalCalculationResultEvent11handleEventEv+0x168>)
 8002898:	2100      	movs	r1, #0
 800289a:	4620      	mov	r0, r4
 800289c:	f000 f9bc 	bl	8002c18 <_ZN19TestEventGreenBlinkC1EhP17TIM_HandleTypeDef>
 80028a0:	627c      	str	r4, [r7, #36]	; 0x24
 80028a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a6:	4619      	mov	r1, r3
 80028a8:	481b      	ldr	r0, [pc, #108]	; (8002918 <_ZN27FinalCalculationResultEvent11handleEventEv+0x158>)
 80028aa:	f7ff f87f 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
	event_queue.push(new TestEventGreen(1));
 80028ae:	200c      	movs	r0, #12
 80028b0:	f007 fc44 	bl	800a13c <_Znwj>
 80028b4:	4603      	mov	r3, r0
 80028b6:	461c      	mov	r4, r3
 80028b8:	2101      	movs	r1, #1
 80028ba:	4620      	mov	r0, r4
 80028bc:	f000 f8fc 	bl	8002ab8 <_ZN14TestEventGreenC1Eh>
 80028c0:	62bc      	str	r4, [r7, #40]	; 0x28
 80028c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028c6:	4619      	mov	r1, r3
 80028c8:	4813      	ldr	r0, [pc, #76]	; (8002918 <_ZN27FinalCalculationResultEvent11handleEventEv+0x158>)
 80028ca:	f7ff f86f 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
	event_queue.push(new TestEventBlue(1));
 80028ce:	200c      	movs	r0, #12
 80028d0:	f007 fc34 	bl	800a13c <_Znwj>
 80028d4:	4603      	mov	r3, r0
 80028d6:	461c      	mov	r4, r3
 80028d8:	2101      	movs	r1, #1
 80028da:	4620      	mov	r0, r4
 80028dc:	f000 f926 	bl	8002b2c <_ZN13TestEventBlueC1Eh>
 80028e0:	62fc      	str	r4, [r7, #44]	; 0x2c
 80028e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028e6:	4619      	mov	r1, r3
 80028e8:	480b      	ldr	r0, [pc, #44]	; (8002918 <_ZN27FinalCalculationResultEvent11handleEventEv+0x158>)
 80028ea:	f7ff f85f 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>

	//TODO idee timer starten der dann wieder den start screen zeigt
}
 80028ee:	bf00      	nop
 80028f0:	3734      	adds	r7, #52	; 0x34
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd90      	pop	{r4, r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000e8c 	.word	0x20000e8c
 80028fc:	40001400 	.word	0x40001400
 8002900:	08011ce8 	.word	0x08011ce8
 8002904:	200008f4 	.word	0x200008f4
 8002908:	08011cfc 	.word	0x08011cfc
 800290c:	20000e44 	.word	0x20000e44
 8002910:	08011d10 	.word	0x08011d10
 8002914:	20000018 	.word	0x20000018
 8002918:	20000e54 	.word	0x20000e54
 800291c:	08011d38 	.word	0x08011d38
 8002920:	08011d20 	.word	0x08011d20
 8002924:	08011d2c 	.word	0x08011d2c
 8002928:	2000081c 	.word	0x2000081c

0800292c <_ZN8LedEventC1EP12GPIO_TypeDefth>:

LedEvent::LedEvent(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState, uint8_t option) :
GPIOx(GPIOx), GPIO_Pin(GPIO_Pin), PinState(PinState), option(option) {
}

LedEvent::LedEvent(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t option) :
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	4611      	mov	r1, r2
 8002938:	461a      	mov	r2, r3
 800293a:	460b      	mov	r3, r1
 800293c:	80fb      	strh	r3, [r7, #6]
 800293e:	4613      	mov	r3, r2
 8002940:	717b      	strb	r3, [r7, #5]
GPIOx(GPIOx), GPIO_Pin(GPIO_Pin), option(option) {
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe ffb5 	bl	80018b4 <_ZN5EventC1Ev>
 800294a:	4a08      	ldr	r2, [pc, #32]	; (800296c <_ZN8LedEventC1EP12GPIO_TypeDefth+0x40>)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	88fa      	ldrh	r2, [r7, #6]
 800295a:	811a      	strh	r2, [r3, #8]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	797a      	ldrb	r2, [r7, #5]
 8002960:	72da      	strb	r2, [r3, #11]
}
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	08013bac 	.word	0x08013bac

08002970 <_ZN8LedEventD1Ev>:

LedEvent::~LedEvent() {}
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	4a05      	ldr	r2, [pc, #20]	; (8002990 <_ZN8LedEventD1Ev+0x20>)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe ff77 	bl	8001874 <_ZN5EventD1Ev>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	08013bac 	.word	0x08013bac

08002994 <_ZN8LedEventD0Ev>:
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ffe7 	bl	8002970 <_ZN8LedEventD1Ev>
 80029a2:	210c      	movs	r1, #12
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f007 fbc7 	bl	800a138 <_ZdlPvj>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <_ZN8LedEvent11handleEventEv>:


void LedEvent::handleEvent() {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
	switch (this->option) {
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	7adb      	ldrb	r3, [r3, #11]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <_ZN8LedEvent11handleEventEv+0x26>
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d111      	bne.n	80029ec <_ZN8LedEvent11handleEventEv+0x38>
		case 1: // LED on
			HAL_GPIO_WritePin(this->GPIOx, this->GPIO_Pin, GPIO_PIN_SET);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6858      	ldr	r0, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	891b      	ldrh	r3, [r3, #8]
 80029d0:	2201      	movs	r2, #1
 80029d2:	4619      	mov	r1, r3
 80029d4:	f004 faa8 	bl	8006f28 <HAL_GPIO_WritePin>
			break;
 80029d8:	e009      	b.n	80029ee <_ZN8LedEvent11handleEventEv+0x3a>
		case 0: // LED off
			HAL_GPIO_WritePin(this->GPIOx, this->GPIO_Pin, GPIO_PIN_RESET);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6858      	ldr	r0, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	891b      	ldrh	r3, [r3, #8]
 80029e2:	2200      	movs	r2, #0
 80029e4:	4619      	mov	r1, r3
 80029e6:	f004 fa9f 	bl	8006f28 <HAL_GPIO_WritePin>
			break;
 80029ea:	e000      	b.n	80029ee <_ZN8LedEvent11handleEventEv+0x3a>
		default:
			break;
 80029ec:	bf00      	nop
	}
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <_ZN13LedEventBlinkC1EhP17TIM_HandleTypeDef>:

// ------------------------------------------------------------------------------------------------------------------

LedEventBlink::LedEventBlink(uint8_t option, TIM_HandleTypeDef* htim) : option(option), htim4(htim) {}
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	460b      	mov	r3, r1
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	72fb      	strb	r3, [r7, #11]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fe ff53 	bl	80018b4 <_ZN5EventC1Ev>
 8002a0e:	4a07      	ldr	r2, [pc, #28]	; (8002a2c <_ZN13LedEventBlinkC1EhP17TIM_HandleTypeDef+0x34>)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	7afa      	ldrb	r2, [r7, #11]
 8002a18:	711a      	strb	r2, [r3, #4]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	08013b98 	.word	0x08013b98

08002a30 <_ZN13LedEventBlinkD1Ev>:
LedEventBlink::~LedEventBlink() {}
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	4a05      	ldr	r2, [pc, #20]	; (8002a50 <_ZN13LedEventBlinkD1Ev+0x20>)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fe ff17 	bl	8001874 <_ZN5EventD1Ev>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	08013b98 	.word	0x08013b98

08002a54 <_ZN13LedEventBlinkD0Ev>:
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff ffe7 	bl	8002a30 <_ZN13LedEventBlinkD1Ev>
 8002a62:	210c      	movs	r1, #12
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f007 fb67 	bl	800a138 <_ZdlPvj>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <_ZN13LedEventBlink11handleEventEv>:

void LedEventBlink::handleEvent(){
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
	switch (this->option) {
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	791b      	ldrb	r3, [r3, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d007      	beq.n	8002a94 <_ZN13LedEventBlink11handleEventEv+0x20>
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d110      	bne.n	8002aaa <_ZN13LedEventBlink11handleEventEv+0x36>
		case 1:
			HAL_TIM_Base_Start_IT(htim4);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f006 f821 	bl	8008ad4 <HAL_TIM_Base_Start_IT>
			break;
 8002a92:	e00b      	b.n	8002aac <_ZN13LedEventBlink11handleEventEv+0x38>
		case 0:
			HAL_TIM_Base_Stop_IT(htim4);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f006 f88b 	bl	8008bb4 <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	4804      	ldr	r0, [pc, #16]	; (8002ab4 <_ZN13LedEventBlink11handleEventEv+0x40>)
 8002aa4:	f004 fa40 	bl	8006f28 <HAL_GPIO_WritePin>
			break;
 8002aa8:	e000      	b.n	8002aac <_ZN13LedEventBlink11handleEventEv+0x38>
		default:
			break;
 8002aaa:	bf00      	nop
	}
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40020400 	.word	0x40020400

08002ab8 <_ZN14TestEventGreenC1Eh>:

// ------------------------------------------------------------------------------------------------------------------

TestEventGreen::TestEventGreen() : LedEvent(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET) {}
TestEventGreen::TestEventGreen(uint8_t option) : LedEvent(LD1_GPIO_Port, LD1_Pin, option) {}
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	70fb      	strb	r3, [r7, #3]
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	78fb      	ldrb	r3, [r7, #3]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	4905      	ldr	r1, [pc, #20]	; (8002ae0 <_ZN14TestEventGreenC1Eh+0x28>)
 8002acc:	f7ff ff2e 	bl	800292c <_ZN8LedEventC1EP12GPIO_TypeDefth>
 8002ad0:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <_ZN14TestEventGreenC1Eh+0x2c>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40020400 	.word	0x40020400
 8002ae4:	08013b84 	.word	0x08013b84

08002ae8 <_ZN14TestEventGreenD1Ev>:
TestEventGreen::~TestEventGreen() {}
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	4a05      	ldr	r2, [pc, #20]	; (8002b08 <_ZN14TestEventGreenD1Ev+0x20>)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ff39 	bl	8002970 <_ZN8LedEventD1Ev>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4618      	mov	r0, r3
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	08013b84 	.word	0x08013b84

08002b0c <_ZN14TestEventGreenD0Ev>:
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff ffe7 	bl	8002ae8 <_ZN14TestEventGreenD1Ev>
 8002b1a:	210c      	movs	r1, #12
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f007 fb0b 	bl	800a138 <_ZdlPvj>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <_ZN13TestEventBlueC1Eh>:

// ------------------------------------------------------------------------------------------------------------------

TestEventBlue::TestEventBlue() : LedEvent(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET) {}
TestEventBlue::TestEventBlue(uint8_t option) : LedEvent(LD2_GPIO_Port, LD2_Pin, option) {}
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	70fb      	strb	r3, [r7, #3]
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	2280      	movs	r2, #128	; 0x80
 8002b3e:	4905      	ldr	r1, [pc, #20]	; (8002b54 <_ZN13TestEventBlueC1Eh+0x28>)
 8002b40:	f7ff fef4 	bl	800292c <_ZN8LedEventC1EP12GPIO_TypeDefth>
 8002b44:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <_ZN13TestEventBlueC1Eh+0x2c>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40020400 	.word	0x40020400
 8002b58:	08013b70 	.word	0x08013b70

08002b5c <_ZN13TestEventBlueD1Ev>:
TestEventBlue::~TestEventBlue() {}
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	4a05      	ldr	r2, [pc, #20]	; (8002b7c <_ZN13TestEventBlueD1Ev+0x20>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff feff 	bl	8002970 <_ZN8LedEventD1Ev>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	08013b70 	.word	0x08013b70

08002b80 <_ZN13TestEventBlueD0Ev>:
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff ffe7 	bl	8002b5c <_ZN13TestEventBlueD1Ev>
 8002b8e:	210c      	movs	r1, #12
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f007 fad1 	bl	800a138 <_ZdlPvj>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <_ZN12TestEventRedC1Eh>:

// ------------------------------------------------------------------------------------------------------------------

TestEventRed::TestEventRed() : LedEvent(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET) {}
TestEventRed::TestEventRed(uint8_t option) : LedEvent(LD3_GPIO_Port, LD3_Pin, option) {}
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	70fb      	strb	r3, [r7, #3]
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	78fb      	ldrb	r3, [r7, #3]
 8002bb0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bb4:	4905      	ldr	r1, [pc, #20]	; (8002bcc <_ZN12TestEventRedC1Eh+0x2c>)
 8002bb6:	f7ff feb9 	bl	800292c <_ZN8LedEventC1EP12GPIO_TypeDefth>
 8002bba:	4a05      	ldr	r2, [pc, #20]	; (8002bd0 <_ZN12TestEventRedC1Eh+0x30>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40020400 	.word	0x40020400
 8002bd0:	08013b5c 	.word	0x08013b5c

08002bd4 <_ZN12TestEventRedD1Ev>:
TestEventRed::~TestEventRed() {}
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	4a05      	ldr	r2, [pc, #20]	; (8002bf4 <_ZN12TestEventRedD1Ev+0x20>)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff fec3 	bl	8002970 <_ZN8LedEventD1Ev>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	08013b5c 	.word	0x08013b5c

08002bf8 <_ZN12TestEventRedD0Ev>:
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff ffe7 	bl	8002bd4 <_ZN12TestEventRedD1Ev>
 8002c06:	210c      	movs	r1, #12
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f007 fa95 	bl	800a138 <_ZdlPvj>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <_ZN19TestEventGreenBlinkC1EhP17TIM_HandleTypeDef>:

// ------------------------------------------------------------------------------------------------------------------

TestEventGreenBlink::TestEventGreenBlink(uint8_t option, TIM_HandleTypeDef* htim) : LedEventBlink(option, htim) {}
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	460b      	mov	r3, r1
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	72fb      	strb	r3, [r7, #11]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	7af9      	ldrb	r1, [r7, #11]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fee3 	bl	80029f8 <_ZN13LedEventBlinkC1EhP17TIM_HandleTypeDef>
 8002c32:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <_ZN19TestEventGreenBlinkC1EhP17TIM_HandleTypeDef+0x2c>)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	08013b48 	.word	0x08013b48

08002c48 <_ZN19TestEventGreenBlinkD1Ev>:
TestEventGreenBlink::~TestEventGreenBlink() {}
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	4a05      	ldr	r2, [pc, #20]	; (8002c68 <_ZN19TestEventGreenBlinkD1Ev+0x20>)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fee9 	bl	8002a30 <_ZN13LedEventBlinkD1Ev>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4618      	mov	r0, r3
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	08013b48 	.word	0x08013b48

08002c6c <_ZN19TestEventGreenBlinkD0Ev>:
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff ffe7 	bl	8002c48 <_ZN19TestEventGreenBlinkD1Ev>
 8002c7a:	210c      	movs	r1, #12
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f007 fa5b 	bl	800a138 <_ZdlPvj>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4618      	mov	r0, r3
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <_ZN17OLED_DisplayEventC1EPcS0_S0_S0_S0_S0_S0_7DISP_OP>:
 *      Author: mickey
 */

#include <OLED_DisplayEvent.h>

OLED_DisplayEvent::OLED_DisplayEvent(char* str,char* str2,char* str3,char* str4,char* str5,char* str6,char* str7,DISP_OP initop):
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
		cstr3(str3),
		cstr4(str4),
		cstr5(str5),
		cstr6(str6),
		cstr7(str7),
		op(initop){
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fe fe09 	bl	80018b4 <_ZN5EventC1Ev>
 8002ca2:	4a13      	ldr	r2, [pc, #76]	; (8002cf0 <_ZN17OLED_DisplayEventC1EPcS0_S0_S0_S0_S0_S0_7DISP_OP+0x64>)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	601a      	str	r2, [r3, #0]
		cstr(str),
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	60da      	str	r2, [r3, #12]
		cstr2(str2),
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	611a      	str	r2, [r3, #16]
		cstr3(str3),
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	615a      	str	r2, [r3, #20]
		cstr4(str4),
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	619a      	str	r2, [r3, #24]
		cstr5(str5),
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	61da      	str	r2, [r3, #28]
		cstr6(str6),
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a3a      	ldr	r2, [r7, #32]
 8002cca:	621a      	str	r2, [r3, #32]
		cstr7(str7),
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd0:	625a      	str	r2, [r3, #36]	; 0x24
		op(initop){
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002cd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	332c      	adds	r3, #44	; 0x2c
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe f849 	bl	8000d78 <_ZN6BitmapC1Ev>

}
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	08013bc0 	.word	0x08013bc0

08002cf4 <_ZN17OLED_DisplayEventC1EPcS0_S0_S0_7DISP_OP>:

OLED_DisplayEvent::OLED_DisplayEvent(char* str,char* str2,char* str3,char* str4,DISP_OP initop):
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
		cstr(str),
		cstr2(str2),
		cstr3(str3),
		cstr4(str4),
		op(initop){
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fe fdd5 	bl	80018b4 <_ZN5EventC1Ev>
 8002d0a:	4a0e      	ldr	r2, [pc, #56]	; (8002d44 <_ZN17OLED_DisplayEventC1EPcS0_S0_S0_7DISP_OP+0x50>)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	601a      	str	r2, [r3, #0]
		cstr(str),
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	60da      	str	r2, [r3, #12]
		cstr2(str2),
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	611a      	str	r2, [r3, #16]
		cstr3(str3),
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	615a      	str	r2, [r3, #20]
		cstr4(str4),
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	619a      	str	r2, [r3, #24]
		op(initop){
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	7f3a      	ldrb	r2, [r7, #28]
 8002d2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	332c      	adds	r3, #44	; 0x2c
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe f81f 	bl	8000d78 <_ZN6BitmapC1Ev>

}
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	08013bc0 	.word	0x08013bc0

08002d48 <_ZN17OLED_DisplayEventD1Ev>:



}

OLED_DisplayEvent::~OLED_DisplayEvent() {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	4a08      	ldr	r2, [pc, #32]	; (8002d74 <_ZN17OLED_DisplayEventD1Ev+0x2c>)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	332c      	adds	r3, #44	; 0x2c
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe fa3c 	bl	80011d8 <_ZN6BitmapD1Ev>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe fd86 	bl	8001874 <_ZN5EventD1Ev>
	// Remember to delete[] cstr when done!
		//delete[] cstr;
}
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	08013bc0 	.word	0x08013bc0

08002d78 <_ZN17OLED_DisplayEventD0Ev>:
OLED_DisplayEvent::~OLED_DisplayEvent() {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
}
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7ff ffe1 	bl	8002d48 <_ZN17OLED_DisplayEventD1Ev>
 8002d86:	f247 01a4 	movw	r1, #28836	; 0x70a4
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f007 f9d4 	bl	800a138 <_ZdlPvj>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <_ZN17OLED_DisplayEvent11DisplayInitEv>:

void OLED_DisplayEvent::DisplayInit(){
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]

	//clear OLED and reset Cursor
	ssd1306_Fill(Black);
 8002da2:	2000      	movs	r0, #0
 8002da4:	f7fe fadc 	bl	8001360 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8002da8:	2100      	movs	r1, #0
 8002daa:	2000      	movs	r0, #0
 8002dac:	f7fe fc26 	bl	80015fc <ssd1306_SetCursor>

}
 8002db0:	bf00      	nop
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <_ZN17OLED_DisplayEvent17OLED_DisplayWriteEv>:


void OLED_DisplayEvent::OLED_DisplayWrite(){
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]


	ssd1306_WriteString(cstr, Font_11x18, White);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68d8      	ldr	r0, [r3, #12]
 8002dc4:	4a05      	ldr	r2, [pc, #20]	; (8002ddc <_ZN17OLED_DisplayEvent17OLED_DisplayWriteEv+0x24>)
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	ca06      	ldmia	r2, {r1, r2}
 8002dca:	f7fe fbf1 	bl	80015b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002dce:	f7fe faeb 	bl	80013a8 <ssd1306_UpdateScreen>

}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20000010 	.word	0x20000010

08002de0 <_ZN17OLED_DisplayEvent26OLED_DisplayMultiwrite_BigEv>:

void OLED_DisplayEvent::OLED_DisplayMultiwrite_Big(){
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]

	ssd1306_WriteString(cstr, Font_11x18, White);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68d8      	ldr	r0, [r3, #12]
 8002dec:	4a15      	ldr	r2, [pc, #84]	; (8002e44 <_ZN17OLED_DisplayEvent26OLED_DisplayMultiwrite_BigEv+0x64>)
 8002dee:	2301      	movs	r3, #1
 8002df0:	ca06      	ldmia	r2, {r1, r2}
 8002df2:	f7fe fbdd 	bl	80015b0 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 18);
 8002df6:	2112      	movs	r1, #18
 8002df8:	2000      	movs	r0, #0
 8002dfa:	f7fe fbff 	bl	80015fc <ssd1306_SetCursor>
	ssd1306_WriteString(cstr2, Font_11x18, White);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6918      	ldr	r0, [r3, #16]
 8002e02:	4a10      	ldr	r2, [pc, #64]	; (8002e44 <_ZN17OLED_DisplayEvent26OLED_DisplayMultiwrite_BigEv+0x64>)
 8002e04:	2301      	movs	r3, #1
 8002e06:	ca06      	ldmia	r2, {r1, r2}
 8002e08:	f7fe fbd2 	bl	80015b0 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 36);
 8002e0c:	2124      	movs	r1, #36	; 0x24
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f7fe fbf4 	bl	80015fc <ssd1306_SetCursor>
	ssd1306_WriteString(cstr3, Font_11x18, White);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6958      	ldr	r0, [r3, #20]
 8002e18:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <_ZN17OLED_DisplayEvent26OLED_DisplayMultiwrite_BigEv+0x64>)
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	ca06      	ldmia	r2, {r1, r2}
 8002e1e:	f7fe fbc7 	bl	80015b0 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 54);
 8002e22:	2136      	movs	r1, #54	; 0x36
 8002e24:	2000      	movs	r0, #0
 8002e26:	f7fe fbe9 	bl	80015fc <ssd1306_SetCursor>
	ssd1306_WriteString(cstr4, Font_11x18, White);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6998      	ldr	r0, [r3, #24]
 8002e2e:	4a05      	ldr	r2, [pc, #20]	; (8002e44 <_ZN17OLED_DisplayEvent26OLED_DisplayMultiwrite_BigEv+0x64>)
 8002e30:	2301      	movs	r3, #1
 8002e32:	ca06      	ldmia	r2, {r1, r2}
 8002e34:	f7fe fbbc 	bl	80015b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002e38:	f7fe fab6 	bl	80013a8 <ssd1306_UpdateScreen>

}
 8002e3c:	bf00      	nop
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	20000010 	.word	0x20000010

08002e48 <_ZN17OLED_DisplayEvent28OLED_DisplayMultiwrite_SmallEv>:

void OLED_DisplayEvent::OLED_DisplayMultiwrite_Small(){
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]

	ssd1306_WriteString(cstr, Font_7x10, White);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68d8      	ldr	r0, [r3, #12]
 8002e54:	4a26      	ldr	r2, [pc, #152]	; (8002ef0 <_ZN17OLED_DisplayEvent28OLED_DisplayMultiwrite_SmallEv+0xa8>)
 8002e56:	2301      	movs	r3, #1
 8002e58:	ca06      	ldmia	r2, {r1, r2}
 8002e5a:	f7fe fba9 	bl	80015b0 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 10);
 8002e5e:	210a      	movs	r1, #10
 8002e60:	2000      	movs	r0, #0
 8002e62:	f7fe fbcb 	bl	80015fc <ssd1306_SetCursor>
	ssd1306_WriteString(cstr2, Font_7x10, White);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6918      	ldr	r0, [r3, #16]
 8002e6a:	4a21      	ldr	r2, [pc, #132]	; (8002ef0 <_ZN17OLED_DisplayEvent28OLED_DisplayMultiwrite_SmallEv+0xa8>)
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	ca06      	ldmia	r2, {r1, r2}
 8002e70:	f7fe fb9e 	bl	80015b0 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 20);
 8002e74:	2114      	movs	r1, #20
 8002e76:	2000      	movs	r0, #0
 8002e78:	f7fe fbc0 	bl	80015fc <ssd1306_SetCursor>
	ssd1306_WriteString(cstr3, Font_7x10, White);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6958      	ldr	r0, [r3, #20]
 8002e80:	4a1b      	ldr	r2, [pc, #108]	; (8002ef0 <_ZN17OLED_DisplayEvent28OLED_DisplayMultiwrite_SmallEv+0xa8>)
 8002e82:	2301      	movs	r3, #1
 8002e84:	ca06      	ldmia	r2, {r1, r2}
 8002e86:	f7fe fb93 	bl	80015b0 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 30);
 8002e8a:	211e      	movs	r1, #30
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f7fe fbb5 	bl	80015fc <ssd1306_SetCursor>
	ssd1306_WriteString(cstr4, Font_7x10, White);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6998      	ldr	r0, [r3, #24]
 8002e96:	4a16      	ldr	r2, [pc, #88]	; (8002ef0 <_ZN17OLED_DisplayEvent28OLED_DisplayMultiwrite_SmallEv+0xa8>)
 8002e98:	2301      	movs	r3, #1
 8002e9a:	ca06      	ldmia	r2, {r1, r2}
 8002e9c:	f7fe fb88 	bl	80015b0 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 40);
 8002ea0:	2128      	movs	r1, #40	; 0x28
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f7fe fbaa 	bl	80015fc <ssd1306_SetCursor>
	ssd1306_WriteString(cstr5, Font_7x10, White);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69d8      	ldr	r0, [r3, #28]
 8002eac:	4a10      	ldr	r2, [pc, #64]	; (8002ef0 <_ZN17OLED_DisplayEvent28OLED_DisplayMultiwrite_SmallEv+0xa8>)
 8002eae:	2301      	movs	r3, #1
 8002eb0:	ca06      	ldmia	r2, {r1, r2}
 8002eb2:	f7fe fb7d 	bl	80015b0 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 50);
 8002eb6:	2132      	movs	r1, #50	; 0x32
 8002eb8:	2000      	movs	r0, #0
 8002eba:	f7fe fb9f 	bl	80015fc <ssd1306_SetCursor>
	ssd1306_WriteString(cstr6, Font_7x10, White);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a18      	ldr	r0, [r3, #32]
 8002ec2:	4a0b      	ldr	r2, [pc, #44]	; (8002ef0 <_ZN17OLED_DisplayEvent28OLED_DisplayMultiwrite_SmallEv+0xa8>)
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	ca06      	ldmia	r2, {r1, r2}
 8002ec8:	f7fe fb72 	bl	80015b0 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 60);
 8002ecc:	213c      	movs	r1, #60	; 0x3c
 8002ece:	2000      	movs	r0, #0
 8002ed0:	f7fe fb94 	bl	80015fc <ssd1306_SetCursor>
	ssd1306_WriteString(cstr7, Font_7x10, White);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002ed8:	4a05      	ldr	r2, [pc, #20]	; (8002ef0 <_ZN17OLED_DisplayEvent28OLED_DisplayMultiwrite_SmallEv+0xa8>)
 8002eda:	2301      	movs	r3, #1
 8002edc:	ca06      	ldmia	r2, {r1, r2}
 8002ede:	f7fe fb67 	bl	80015b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002ee2:	f7fe fa61 	bl	80013a8 <ssd1306_UpdateScreen>

}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000008 	.word	0x20000008

08002ef4 <_ZN17OLED_DisplayEvent25OLED_DisplayWaitAnimationEv>:


void OLED_DisplayEvent::OLED_DisplayWaitAnimation(){
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	6078      	str	r0, [r7, #4]

	for (int i=0; i<28;i++){
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	e01d      	b.n	8002f3e <_ZN17OLED_DisplayEvent25OLED_DisplayWaitAnimationEv+0x4a>
		HAL_Delay(50);
 8002f02:	2032      	movs	r0, #50	; 0x32
 8002f04:	f002 f9b4 	bl	8005270 <HAL_Delay>
		ssd1306_Fill(Black);
 8002f08:	2000      	movs	r0, #0
 8002f0a:	f7fe fa29 	bl	8001360 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8002f0e:	2100      	movs	r1, #0
 8002f10:	2000      	movs	r0, #0
 8002f12:	f7fe fb73 	bl	80015fc <ssd1306_SetCursor>
		ssd1306_DrawBitmap(0, 0, Bitmaps.Waiting_allArray[i], 128, 64, White);
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	330c      	adds	r3, #12
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	2301      	movs	r3, #1
 8002f24:	9301      	str	r3, [sp, #4]
 8002f26:	2340      	movs	r3, #64	; 0x40
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f7fe fbe8 	bl	8001704 <ssd1306_DrawBitmap>
		ssd1306_UpdateScreen();
 8002f34:	f7fe fa38 	bl	80013a8 <ssd1306_UpdateScreen>
	for (int i=0; i<28;i++){
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2b1b      	cmp	r3, #27
 8002f42:	ddde      	ble.n	8002f02 <_ZN17OLED_DisplayEvent25OLED_DisplayWaitAnimationEv+0xe>
	}

}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <_ZN17OLED_DisplayEvent17OLED_DisplayMenueEv>:

void OLED_DisplayEvent::OLED_DisplayMenue(){
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	6078      	str	r0, [r7, #4]
	//clear OLED and reset Cursor
		ssd1306_Fill(Black);
 8002f58:	2000      	movs	r0, #0
 8002f5a:	f7fe fa01 	bl	8001360 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8002f5e:	2100      	movs	r1, #0
 8002f60:	2000      	movs	r0, #0
 8002f62:	f7fe fb4b 	bl	80015fc <ssd1306_SetCursor>
		ssd1306_WriteString("Inserted Values:", Font_6x8, White);
 8002f66:	4a28      	ldr	r2, [pc, #160]	; (8003008 <_ZN17OLED_DisplayEvent17OLED_DisplayMenueEv+0xb8>)
 8002f68:	2301      	movs	r3, #1
 8002f6a:	ca06      	ldmia	r2, {r1, r2}
 8002f6c:	4827      	ldr	r0, [pc, #156]	; (800300c <_ZN17OLED_DisplayEvent17OLED_DisplayMenueEv+0xbc>)
 8002f6e:	f7fe fb1f 	bl	80015b0 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 13);
 8002f72:	210d      	movs	r1, #13
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7fe fb41 	bl	80015fc <ssd1306_SetCursor>
		ssd1306_WriteString("R: 100", Font_11x18, White);
 8002f7a:	4a25      	ldr	r2, [pc, #148]	; (8003010 <_ZN17OLED_DisplayEvent17OLED_DisplayMenueEv+0xc0>)
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	ca06      	ldmia	r2, {r1, r2}
 8002f80:	4824      	ldr	r0, [pc, #144]	; (8003014 <_ZN17OLED_DisplayEvent17OLED_DisplayMenueEv+0xc4>)
 8002f82:	f7fe fb15 	bl	80015b0 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 30);
 8002f86:	211e      	movs	r1, #30
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f7fe fb37 	bl	80015fc <ssd1306_SetCursor>
		ssd1306_WriteString("C: 100F", Font_11x18, White);
 8002f8e:	4a20      	ldr	r2, [pc, #128]	; (8003010 <_ZN17OLED_DisplayEvent17OLED_DisplayMenueEv+0xc0>)
 8002f90:	2301      	movs	r3, #1
 8002f92:	ca06      	ldmia	r2, {r1, r2}
 8002f94:	4820      	ldr	r0, [pc, #128]	; (8003018 <_ZN17OLED_DisplayEvent17OLED_DisplayMenueEv+0xc8>)
 8002f96:	f7fe fb0b 	bl	80015b0 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 50);
 8002f9a:	2132      	movs	r1, #50	; 0x32
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	f7fe fb2d 	bl	80015fc <ssd1306_SetCursor>
		ssd1306_WriteString("Change values?", Font_6x8, White);
 8002fa2:	4a19      	ldr	r2, [pc, #100]	; (8003008 <_ZN17OLED_DisplayEvent17OLED_DisplayMenueEv+0xb8>)
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	ca06      	ldmia	r2, {r1, r2}
 8002fa8:	481c      	ldr	r0, [pc, #112]	; (800301c <_ZN17OLED_DisplayEvent17OLED_DisplayMenueEv+0xcc>)
 8002faa:	f7fe fb01 	bl	80015b0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8002fae:	f7fe f9fb 	bl	80013a8 <ssd1306_UpdateScreen>
		ssd1306_SetCursor(105, 15);
 8002fb2:	210f      	movs	r1, #15
 8002fb4:	2069      	movs	r0, #105	; 0x69
 8002fb6:	f7fe fb21 	bl	80015fc <ssd1306_SetCursor>
		ssd1306_Line(100, 0, 100, 64, White);
 8002fba:	2301      	movs	r3, #1
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	2340      	movs	r3, #64	; 0x40
 8002fc0:	2264      	movs	r2, #100	; 0x64
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	2064      	movs	r0, #100	; 0x64
 8002fc6:	f7fe fb31 	bl	800162c <ssd1306_Line>
		ssd1306_WriteString("Yes", Font_7x10, White);
 8002fca:	4a15      	ldr	r2, [pc, #84]	; (8003020 <_ZN17OLED_DisplayEvent17OLED_DisplayMenueEv+0xd0>)
 8002fcc:	2301      	movs	r3, #1
 8002fce:	ca06      	ldmia	r2, {r1, r2}
 8002fd0:	4814      	ldr	r0, [pc, #80]	; (8003024 <_ZN17OLED_DisplayEvent17OLED_DisplayMenueEv+0xd4>)
 8002fd2:	f7fe faed 	bl	80015b0 <ssd1306_WriteString>
		ssd1306_SetCursor(105, 32);
 8002fd6:	2120      	movs	r1, #32
 8002fd8:	2069      	movs	r0, #105	; 0x69
 8002fda:	f7fe fb0f 	bl	80015fc <ssd1306_SetCursor>
		ssd1306_WriteString("No", Font_7x10, White);
 8002fde:	4a10      	ldr	r2, [pc, #64]	; (8003020 <_ZN17OLED_DisplayEvent17OLED_DisplayMenueEv+0xd0>)
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	ca06      	ldmia	r2, {r1, r2}
 8002fe4:	4810      	ldr	r0, [pc, #64]	; (8003028 <_ZN17OLED_DisplayEvent17OLED_DisplayMenueEv+0xd8>)
 8002fe6:	f7fe fae3 	bl	80015b0 <ssd1306_WriteString>

		ssd1306_Line(105, 27, 128, 27, White); //User "Cursor"
 8002fea:	2301      	movs	r3, #1
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	231b      	movs	r3, #27
 8002ff0:	2280      	movs	r2, #128	; 0x80
 8002ff2:	211b      	movs	r1, #27
 8002ff4:	2069      	movs	r0, #105	; 0x69
 8002ff6:	f7fe fb19 	bl	800162c <ssd1306_Line>

		ssd1306_UpdateScreen();
 8002ffa:	f7fe f9d5 	bl	80013a8 <ssd1306_UpdateScreen>


}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000000 	.word	0x20000000
 800300c:	08011d6c 	.word	0x08011d6c
 8003010:	20000010 	.word	0x20000010
 8003014:	08011d80 	.word	0x08011d80
 8003018:	08011d88 	.word	0x08011d88
 800301c:	08011d90 	.word	0x08011d90
 8003020:	20000008 	.word	0x20000008
 8003024:	08011da0 	.word	0x08011da0
 8003028:	08011da4 	.word	0x08011da4

0800302c <_ZN17OLED_DisplayEvent25OLED_DisplayNavigateMenueE7DISP_OP>:

void OLED_DisplayEvent::OLED_DisplayNavigateMenue(DISP_OP op){
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af02      	add	r7, sp, #8
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	70fb      	strb	r3, [r7, #3]
	switch (op){
 8003038:	78fb      	ldrb	r3, [r7, #3]
 800303a:	3b03      	subs	r3, #3
 800303c:	2b03      	cmp	r3, #3
 800303e:	d82d      	bhi.n	800309c <_ZN17OLED_DisplayEvent25OLED_DisplayNavigateMenueE7DISP_OP+0x70>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <_ZN17OLED_DisplayEvent25OLED_DisplayNavigateMenueE7DISP_OP+0x1c>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800309d 	.word	0x0800309d
 800304c:	0800309d 	.word	0x0800309d
 8003050:	0800307b 	.word	0x0800307b
 8003054:	08003059 	.word	0x08003059
		case OLED_CursorDown:
			ssd1306_Line(105, 27, 128, 27, Black);
 8003058:	2300      	movs	r3, #0
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	231b      	movs	r3, #27
 800305e:	2280      	movs	r2, #128	; 0x80
 8003060:	211b      	movs	r1, #27
 8003062:	2069      	movs	r0, #105	; 0x69
 8003064:	f7fe fae2 	bl	800162c <ssd1306_Line>
			ssd1306_Line(105, 44, 128, 44, White);
 8003068:	2301      	movs	r3, #1
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	232c      	movs	r3, #44	; 0x2c
 800306e:	2280      	movs	r2, #128	; 0x80
 8003070:	212c      	movs	r1, #44	; 0x2c
 8003072:	2069      	movs	r0, #105	; 0x69
 8003074:	f7fe fada 	bl	800162c <ssd1306_Line>
			break;
 8003078:	e010      	b.n	800309c <_ZN17OLED_DisplayEvent25OLED_DisplayNavigateMenueE7DISP_OP+0x70>
		case OLED_CursorLeft:
			break;
		case OLED_CursorRight:
			break;
		case OLED_CursorUp:
			ssd1306_Line(105, 27, 128, 27, Black);
 800307a:	2300      	movs	r3, #0
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	231b      	movs	r3, #27
 8003080:	2280      	movs	r2, #128	; 0x80
 8003082:	211b      	movs	r1, #27
 8003084:	2069      	movs	r0, #105	; 0x69
 8003086:	f7fe fad1 	bl	800162c <ssd1306_Line>
			ssd1306_Line(105, 44, 128, 44, White);
 800308a:	2301      	movs	r3, #1
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	232c      	movs	r3, #44	; 0x2c
 8003090:	2280      	movs	r2, #128	; 0x80
 8003092:	212c      	movs	r1, #44	; 0x2c
 8003094:	2069      	movs	r0, #105	; 0x69
 8003096:	f7fe fac9 	bl	800162c <ssd1306_Line>
			break;
 800309a:	bf00      	nop

	};
	ssd1306_UpdateScreen();
 800309c:	f7fe f984 	bl	80013a8 <ssd1306_UpdateScreen>


}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <_ZN17OLED_DisplayEvent11handleEventEv>:





void OLED_DisplayEvent::handleEvent(){
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
	switch (op){
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d857      	bhi.n	800316a <_ZN17OLED_DisplayEvent11handleEventEv+0xc2>
 80030ba:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <_ZN17OLED_DisplayEvent11handleEventEv+0x18>)
 80030bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c0:	080030e5 	.word	0x080030e5
 80030c4:	08003101 	.word	0x08003101
 80030c8:	080030f3 	.word	0x080030f3
 80030cc:	0800311f 	.word	0x0800311f
 80030d0:	0800312f 	.word	0x0800312f
 80030d4:	0800313f 	.word	0x0800313f
 80030d8:	0800310f 	.word	0x0800310f
 80030dc:	0800314f 	.word	0x0800314f
 80030e0:	0800315d 	.word	0x0800315d
		case OLED_Write:
			this->DisplayInit();
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff fe58 	bl	8002d9a <_ZN17OLED_DisplayEvent11DisplayInitEv>
			OLED_DisplayWrite();
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff fe64 	bl	8002db8 <_ZN17OLED_DisplayEvent17OLED_DisplayWriteEv>
			break;
 80030f0:	e03b      	b.n	800316a <_ZN17OLED_DisplayEvent11handleEventEv+0xc2>
		case OLED_Menue:
			this->DisplayInit();
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff fe51 	bl	8002d9a <_ZN17OLED_DisplayEvent11DisplayInitEv>
			OLED_DisplayMenue();
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff ff29 	bl	8002f50 <_ZN17OLED_DisplayEvent17OLED_DisplayMenueEv>
			break;
 80030fe:	e034      	b.n	800316a <_ZN17OLED_DisplayEvent11handleEventEv+0xc2>
		case OLED_Anim:
			this->DisplayInit();
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff fe4a 	bl	8002d9a <_ZN17OLED_DisplayEvent11DisplayInitEv>
			OLED_DisplayWaitAnimation();
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff fef4 	bl	8002ef4 <_ZN17OLED_DisplayEvent25OLED_DisplayWaitAnimationEv>
			break;
 800310c:	e02d      	b.n	800316a <_ZN17OLED_DisplayEvent11handleEventEv+0xc2>
		case OLED_CursorDown:
			OLED_DisplayNavigateMenue(op);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003114:	4619      	mov	r1, r3
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff ff88 	bl	800302c <_ZN17OLED_DisplayEvent25OLED_DisplayNavigateMenueE7DISP_OP>
			break;
 800311c:	e025      	b.n	800316a <_ZN17OLED_DisplayEvent11handleEventEv+0xc2>
		case OLED_CursorLeft:
			OLED_DisplayNavigateMenue(op);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003124:	4619      	mov	r1, r3
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff ff80 	bl	800302c <_ZN17OLED_DisplayEvent25OLED_DisplayNavigateMenueE7DISP_OP>
			break;
 800312c:	e01d      	b.n	800316a <_ZN17OLED_DisplayEvent11handleEventEv+0xc2>
		case OLED_CursorRight:
			OLED_DisplayNavigateMenue(op);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003134:	4619      	mov	r1, r3
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff ff78 	bl	800302c <_ZN17OLED_DisplayEvent25OLED_DisplayNavigateMenueE7DISP_OP>
			break;
 800313c:	e015      	b.n	800316a <_ZN17OLED_DisplayEvent11handleEventEv+0xc2>
		case OLED_CursorUp:
			OLED_DisplayNavigateMenue(op);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003144:	4619      	mov	r1, r3
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff ff70 	bl	800302c <_ZN17OLED_DisplayEvent25OLED_DisplayNavigateMenueE7DISP_OP>
			break;
 800314c:	e00d      	b.n	800316a <_ZN17OLED_DisplayEvent11handleEventEv+0xc2>
		case OLED_Multiwrite_Big:
			this->DisplayInit();
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff fe23 	bl	8002d9a <_ZN17OLED_DisplayEvent11DisplayInitEv>
			OLED_DisplayMultiwrite_Big();
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff fe43 	bl	8002de0 <_ZN17OLED_DisplayEvent26OLED_DisplayMultiwrite_BigEv>
			break;
 800315a:	e006      	b.n	800316a <_ZN17OLED_DisplayEvent11handleEventEv+0xc2>
		case OLED_Multiwrite_Small:
			this->DisplayInit();
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff fe1c 	bl	8002d9a <_ZN17OLED_DisplayEvent11DisplayInitEv>
			this->OLED_DisplayMultiwrite_Small();
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff fe70 	bl	8002e48 <_ZN17OLED_DisplayEvent28OLED_DisplayMultiwrite_SmallEv>
			break;
 8003168:	bf00      	nop

		}

}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop

08003174 <_ZN8SetUpLcdC1Ev>:

#include "DisplayEvent.h"
#include "LedEvents.h"
#include "OLED_DisplayEvent.h"

SetUpLcd::SetUpLcd() {}
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe fb98 	bl	80018b4 <_ZN5EventC1Ev>
 8003184:	4a05      	ldr	r2, [pc, #20]	; (800319c <_ZN8SetUpLcdC1Ev+0x28>)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	711a      	strb	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	08013bd4 	.word	0x08013bd4

080031a0 <_ZN8SetUpLcdD1Ev>:
SetUpLcd::~SetUpLcd() {}
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	4a05      	ldr	r2, [pc, #20]	; (80031c0 <_ZN8SetUpLcdD1Ev+0x20>)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fe fb5f 	bl	8001874 <_ZN5EventD1Ev>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4618      	mov	r0, r3
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	08013bd4 	.word	0x08013bd4

080031c4 <_ZN8SetUpLcdD0Ev>:
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7ff ffe7 	bl	80031a0 <_ZN8SetUpLcdD1Ev>
 80031d2:	2108      	movs	r1, #8
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f006 ffaf 	bl	800a138 <_ZdlPvj>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <_ZN8SetUpLcd11handleEventEv>:

void SetUpLcd::handleEvent() {
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b089      	sub	sp, #36	; 0x24
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	6078      	str	r0, [r7, #4]
	if(StartUp == true) { // one time exec
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	791b      	ldrb	r3, [r3, #4]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d105      	bne.n	8003200 <_ZN8SetUpLcd11handleEventEv+0x1c>
		StartUp = false;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	711a      	strb	r2, [r3, #4]
		LCD_Begin(&lcd);
 80031fa:	4832      	ldr	r0, [pc, #200]	; (80032c4 <_ZN8SetUpLcd11handleEventEv+0xe0>)
 80031fc:	f000 fa8b 	bl	8003716 <_Z9LCD_BeginP17LCD_HandleTypeDef>
	}
	event_queue.push(new TestEventGreen(1)); // green led on
 8003200:	200c      	movs	r0, #12
 8003202:	f006 ff9b 	bl	800a13c <_Znwj>
 8003206:	4603      	mov	r3, r0
 8003208:	461c      	mov	r4, r3
 800320a:	2101      	movs	r1, #1
 800320c:	4620      	mov	r0, r4
 800320e:	f7ff fc53 	bl	8002ab8 <_ZN14TestEventGreenC1Eh>
 8003212:	60bc      	str	r4, [r7, #8]
 8003214:	f107 0308 	add.w	r3, r7, #8
 8003218:	4619      	mov	r1, r3
 800321a:	482b      	ldr	r0, [pc, #172]	; (80032c8 <_ZN8SetUpLcd11handleEventEv+0xe4>)
 800321c:	f7fe fbc6 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>



	ssd1306_Init();
 8003220:	f7fe f834 	bl	800128c <ssd1306_Init>
	ssd1306_Fill(Black);
 8003224:	2000      	movs	r0, #0
 8003226:	f7fe f89b 	bl	8001360 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 800322a:	2100      	movs	r1, #0
 800322c:	2000      	movs	r0, #0
 800322e:	f7fe f9e5 	bl	80015fc <ssd1306_SetCursor>
	ssd1306_UpdateScreen();
 8003232:	f7fe f8b9 	bl	80013a8 <ssd1306_UpdateScreen>

	event_queue.push(new OLED_DisplayEvent("Welcome!","Press Blue","Button","",OLED_Multiwrite_Big));
 8003236:	f247 00a4 	movw	r0, #28836	; 0x70a4
 800323a:	f006 ff7f 	bl	800a13c <_Znwj>
 800323e:	4603      	mov	r3, r0
 8003240:	461c      	mov	r4, r3
 8003242:	2307      	movs	r3, #7
 8003244:	9301      	str	r3, [sp, #4]
 8003246:	4b21      	ldr	r3, [pc, #132]	; (80032cc <_ZN8SetUpLcd11handleEventEv+0xe8>)
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	4b21      	ldr	r3, [pc, #132]	; (80032d0 <_ZN8SetUpLcd11handleEventEv+0xec>)
 800324c:	4a21      	ldr	r2, [pc, #132]	; (80032d4 <_ZN8SetUpLcd11handleEventEv+0xf0>)
 800324e:	4922      	ldr	r1, [pc, #136]	; (80032d8 <_ZN8SetUpLcd11handleEventEv+0xf4>)
 8003250:	4620      	mov	r0, r4
 8003252:	f7ff fd4f 	bl	8002cf4 <_ZN17OLED_DisplayEventC1EPcS0_S0_S0_7DISP_OP>
 8003256:	60fc      	str	r4, [r7, #12]
 8003258:	f107 030c 	add.w	r3, r7, #12
 800325c:	4619      	mov	r1, r3
 800325e:	481a      	ldr	r0, [pc, #104]	; (80032c8 <_ZN8SetUpLcd11handleEventEv+0xe4>)
 8003260:	f7fe fba4 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>

	event_queue.push(new DisplayEvent(&lcd, (char*)"Bereit fuer ", 0, 0, true));
 8003264:	2010      	movs	r0, #16
 8003266:	f006 ff69 	bl	800a13c <_Znwj>
 800326a:	4603      	mov	r3, r0
 800326c:	461c      	mov	r4, r3
 800326e:	2301      	movs	r3, #1
 8003270:	9301      	str	r3, [sp, #4]
 8003272:	2300      	movs	r3, #0
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	2300      	movs	r3, #0
 8003278:	4a18      	ldr	r2, [pc, #96]	; (80032dc <_ZN8SetUpLcd11handleEventEv+0xf8>)
 800327a:	4912      	ldr	r1, [pc, #72]	; (80032c4 <_ZN8SetUpLcd11handleEventEv+0xe0>)
 800327c:	4620      	mov	r0, r4
 800327e:	f7ff f9f9 	bl	8002674 <_ZN12DisplayEventC1EP17LCD_HandleTypeDefPchhb>
 8003282:	613c      	str	r4, [r7, #16]
 8003284:	f107 0310 	add.w	r3, r7, #16
 8003288:	4619      	mov	r1, r3
 800328a:	480f      	ldr	r0, [pc, #60]	; (80032c8 <_ZN8SetUpLcd11handleEventEv+0xe4>)
 800328c:	f7fe fb8e 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
	event_queue.push(new DisplayEvent(&lcd, (char*)"eine Messung!", 1, 0, false));
 8003290:	2010      	movs	r0, #16
 8003292:	f006 ff53 	bl	800a13c <_Znwj>
 8003296:	4603      	mov	r3, r0
 8003298:	461c      	mov	r4, r3
 800329a:	2300      	movs	r3, #0
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	2300      	movs	r3, #0
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	2301      	movs	r3, #1
 80032a4:	4a0e      	ldr	r2, [pc, #56]	; (80032e0 <_ZN8SetUpLcd11handleEventEv+0xfc>)
 80032a6:	4907      	ldr	r1, [pc, #28]	; (80032c4 <_ZN8SetUpLcd11handleEventEv+0xe0>)
 80032a8:	4620      	mov	r0, r4
 80032aa:	f7ff f9e3 	bl	8002674 <_ZN12DisplayEventC1EP17LCD_HandleTypeDefPchhb>
 80032ae:	617c      	str	r4, [r7, #20]
 80032b0:	f107 0314 	add.w	r3, r7, #20
 80032b4:	4619      	mov	r1, r3
 80032b6:	4804      	ldr	r0, [pc, #16]	; (80032c8 <_ZN8SetUpLcd11handleEventEv+0xe4>)
 80032b8:	f7fe fb78 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
}
 80032bc:	bf00      	nop
 80032be:	371c      	adds	r7, #28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd90      	pop	{r4, r7, pc}
 80032c4:	20000018 	.word	0x20000018
 80032c8:	20000e54 	.word	0x20000e54
 80032cc:	08011dc8 	.word	0x08011dc8
 80032d0:	08011da8 	.word	0x08011da8
 80032d4:	08011db0 	.word	0x08011db0
 80032d8:	08011dbc 	.word	0x08011dbc
 80032dc:	08011dcc 	.word	0x08011dcc
 80032e0:	08011ddc 	.word	0x08011ddc

080032e4 <_ZN10StartEventC1Ev>:
#include "StartMeasureEvent.h"
#include "LedEvents.h"
#include "OLED_DisplayEvent.h"


StartEvent::StartEvent() {}
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fe fae0 	bl	80018b4 <_ZN5EventC1Ev>
 80032f4:	4a03      	ldr	r2, [pc, #12]	; (8003304 <_ZN10StartEventC1Ev+0x20>)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4618      	mov	r0, r3
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	08013be8 	.word	0x08013be8

08003308 <_ZN10StartEventD1Ev>:
StartEvent::~StartEvent() {}
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	4a05      	ldr	r2, [pc, #20]	; (8003328 <_ZN10StartEventD1Ev+0x20>)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4618      	mov	r0, r3
 800331a:	f7fe faab 	bl	8001874 <_ZN5EventD1Ev>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4618      	mov	r0, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	08013be8 	.word	0x08013be8

0800332c <_ZN10StartEventD0Ev>:
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff ffe7 	bl	8003308 <_ZN10StartEventD1Ev>
 800333a:	2104      	movs	r1, #4
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f006 fefb 	bl	800a138 <_ZdlPvj>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4618      	mov	r0, r3
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <_ZN10StartEvent11handleEventEv>:

void StartEvent::handleEvent(){
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b08b      	sub	sp, #44	; 0x2c
 8003350:	af02      	add	r7, sp, #8
 8003352:	6078      	str	r0, [r7, #4]
	event_queue.push(new TestEventBlue(0)); // blue off
 8003354:	200c      	movs	r0, #12
 8003356:	f006 fef1 	bl	800a13c <_Znwj>
 800335a:	4603      	mov	r3, r0
 800335c:	461c      	mov	r4, r3
 800335e:	2100      	movs	r1, #0
 8003360:	4620      	mov	r0, r4
 8003362:	f7ff fbe3 	bl	8002b2c <_ZN13TestEventBlueC1Eh>
 8003366:	60bc      	str	r4, [r7, #8]
 8003368:	f107 0308 	add.w	r3, r7, #8
 800336c:	4619      	mov	r1, r3
 800336e:	4833      	ldr	r0, [pc, #204]	; (800343c <_ZN10StartEvent11handleEventEv+0xf0>)
 8003370:	f7fe fb1c 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
	event_queue.push(new TestEventGreenBlink(1, &htim4)); // green blink on
 8003374:	200c      	movs	r0, #12
 8003376:	f006 fee1 	bl	800a13c <_Znwj>
 800337a:	4603      	mov	r3, r0
 800337c:	461c      	mov	r4, r3
 800337e:	4a30      	ldr	r2, [pc, #192]	; (8003440 <_ZN10StartEvent11handleEventEv+0xf4>)
 8003380:	2101      	movs	r1, #1
 8003382:	4620      	mov	r0, r4
 8003384:	f7ff fc48 	bl	8002c18 <_ZN19TestEventGreenBlinkC1EhP17TIM_HandleTypeDef>
 8003388:	60fc      	str	r4, [r7, #12]
 800338a:	f107 030c 	add.w	r3, r7, #12
 800338e:	4619      	mov	r1, r3
 8003390:	482a      	ldr	r0, [pc, #168]	; (800343c <_ZN10StartEvent11handleEventEv+0xf0>)
 8003392:	f7fe fb0b 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>

	event_queue.push(new DisplayEvent(&lcd, (char*)"Messung startet", 0, 0));
 8003396:	2010      	movs	r0, #16
 8003398:	f006 fed0 	bl	800a13c <_Znwj>
 800339c:	4603      	mov	r3, r0
 800339e:	461c      	mov	r4, r3
 80033a0:	2301      	movs	r3, #1
 80033a2:	9301      	str	r3, [sp, #4]
 80033a4:	2300      	movs	r3, #0
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	2300      	movs	r3, #0
 80033aa:	4a26      	ldr	r2, [pc, #152]	; (8003444 <_ZN10StartEvent11handleEventEv+0xf8>)
 80033ac:	4926      	ldr	r1, [pc, #152]	; (8003448 <_ZN10StartEvent11handleEventEv+0xfc>)
 80033ae:	4620      	mov	r0, r4
 80033b0:	f7ff f960 	bl	8002674 <_ZN12DisplayEventC1EP17LCD_HandleTypeDefPchhb>
 80033b4:	613c      	str	r4, [r7, #16]
 80033b6:	f107 0310 	add.w	r3, r7, #16
 80033ba:	4619      	mov	r1, r3
 80033bc:	481f      	ldr	r0, [pc, #124]	; (800343c <_ZN10StartEvent11handleEventEv+0xf0>)
 80033be:	f7fe faf5 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
	event_queue.push(new waitingTask(&reset, 1000)); // wait 1s befor continue...
 80033c2:	200c      	movs	r0, #12
 80033c4:	f006 feba 	bl	800a13c <_Znwj>
 80033c8:	4603      	mov	r3, r0
 80033ca:	461c      	mov	r4, r3
 80033cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033d0:	491e      	ldr	r1, [pc, #120]	; (800344c <_ZN10StartEvent11handleEventEv+0x100>)
 80033d2:	4620      	mov	r0, r4
 80033d4:	f7fe ff8c 	bl	80022f0 <_ZN11waitingTaskC1EPbt>
 80033d8:	617c      	str	r4, [r7, #20]
 80033da:	f107 0314 	add.w	r3, r7, #20
 80033de:	4619      	mov	r1, r3
 80033e0:	4816      	ldr	r0, [pc, #88]	; (800343c <_ZN10StartEvent11handleEventEv+0xf0>)
 80033e2:	f7fe fae3 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>

	event_queue.push(new OLED_DisplayEvent("Messung","Lauft!","","",OLED_Multiwrite_Big));
 80033e6:	f247 00a4 	movw	r0, #28836	; 0x70a4
 80033ea:	f006 fea7 	bl	800a13c <_Znwj>
 80033ee:	4603      	mov	r3, r0
 80033f0:	461c      	mov	r4, r3
 80033f2:	2307      	movs	r3, #7
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	4b16      	ldr	r3, [pc, #88]	; (8003450 <_ZN10StartEvent11handleEventEv+0x104>)
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	4b15      	ldr	r3, [pc, #84]	; (8003450 <_ZN10StartEvent11handleEventEv+0x104>)
 80033fc:	4a15      	ldr	r2, [pc, #84]	; (8003454 <_ZN10StartEvent11handleEventEv+0x108>)
 80033fe:	4916      	ldr	r1, [pc, #88]	; (8003458 <_ZN10StartEvent11handleEventEv+0x10c>)
 8003400:	4620      	mov	r0, r4
 8003402:	f7ff fc77 	bl	8002cf4 <_ZN17OLED_DisplayEventC1EPcS0_S0_S0_7DISP_OP>
 8003406:	61bc      	str	r4, [r7, #24]
 8003408:	f107 0318 	add.w	r3, r7, #24
 800340c:	4619      	mov	r1, r3
 800340e:	480b      	ldr	r0, [pc, #44]	; (800343c <_ZN10StartEvent11handleEventEv+0xf0>)
 8003410:	f7fe facc 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>

	event_queue.push(new StartMeasureEvent()); // start the measurement
 8003414:	2004      	movs	r0, #4
 8003416:	f006 fe91 	bl	800a13c <_Znwj>
 800341a:	4603      	mov	r3, r0
 800341c:	461c      	mov	r4, r3
 800341e:	4620      	mov	r0, r4
 8003420:	f000 f81c 	bl	800345c <_ZN17StartMeasureEventC1Ev>
 8003424:	61fc      	str	r4, [r7, #28]
 8003426:	f107 031c 	add.w	r3, r7, #28
 800342a:	4619      	mov	r1, r3
 800342c:	4803      	ldr	r0, [pc, #12]	; (800343c <_ZN10StartEvent11handleEventEv+0xf0>)
 800342e:	f7fe fabd 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
}
 8003432:	bf00      	nop
 8003434:	3724      	adds	r7, #36	; 0x24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd90      	pop	{r4, r7, pc}
 800343a:	bf00      	nop
 800343c:	20000e54 	.word	0x20000e54
 8003440:	2000081c 	.word	0x2000081c
 8003444:	08011e1c 	.word	0x08011e1c
 8003448:	20000018 	.word	0x20000018
 800344c:	20000e7d 	.word	0x20000e7d
 8003450:	08011e2c 	.word	0x08011e2c
 8003454:	08011e30 	.word	0x08011e30
 8003458:	08011e38 	.word	0x08011e38

0800345c <_ZN17StartMeasureEventC1Ev>:
#include "StartMeasureEvent.h"
#include "CalculationEvent.h"

StartMeasureEvent::StartMeasureEvent() {}
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fe fa24 	bl	80018b4 <_ZN5EventC1Ev>
 800346c:	4a03      	ldr	r2, [pc, #12]	; (800347c <_ZN17StartMeasureEventC1Ev+0x20>)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4618      	mov	r0, r3
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	08013bfc 	.word	0x08013bfc

08003480 <_ZN17StartMeasureEventD1Ev>:
StartMeasureEvent::~StartMeasureEvent() {}
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	4a05      	ldr	r2, [pc, #20]	; (80034a0 <_ZN17StartMeasureEventD1Ev+0x20>)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4618      	mov	r0, r3
 8003492:	f7fe f9ef 	bl	8001874 <_ZN5EventD1Ev>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	08013bfc 	.word	0x08013bfc

080034a4 <_ZN17StartMeasureEventD0Ev>:
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff ffe7 	bl	8003480 <_ZN17StartMeasureEventD1Ev>
 80034b2:	2104      	movs	r1, #4
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f006 fe3f 	bl	800a138 <_ZdlPvj>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4618      	mov	r0, r3
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <_ZN17StartMeasureEvent11handleEventEv>:

void StartMeasureEvent::handleEvent(){
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
	tim7Time_ms = 0;
 80034cc:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <_ZN17StartMeasureEvent11handleEventEv+0x30>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7); 							// stat tim7 | ms counter
 80034d2:	4809      	ldr	r0, [pc, #36]	; (80034f8 <_ZN17StartMeasureEvent11handleEventEv+0x34>)
 80034d4:	f005 fafe 	bl	8008ad4 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, 1); 		// start ADC-DMA
 80034d8:	2201      	movs	r2, #1
 80034da:	4908      	ldr	r1, [pc, #32]	; (80034fc <_ZN17StartMeasureEvent11handleEventEv+0x38>)
 80034dc:	4808      	ldr	r0, [pc, #32]	; (8003500 <_ZN17StartMeasureEvent11handleEventEv+0x3c>)
 80034de:	f001 ff2f 	bl	8005340 <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); 	// set PB4 high (3.3v)
 80034e2:	2201      	movs	r2, #1
 80034e4:	2110      	movs	r1, #16
 80034e6:	4807      	ldr	r0, [pc, #28]	; (8003504 <_ZN17StartMeasureEvent11handleEventEv+0x40>)
 80034e8:	f003 fd1e 	bl	8006f28 <HAL_GPIO_WritePin>
}
 80034ec:	bf00      	nop
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	20000e90 	.word	0x20000e90
 80034f8:	200008ac 	.word	0x200008ac
 80034fc:	20000e80 	.word	0x20000e80
 8003500:	2000061c 	.word	0x2000061c
 8003504:	40020400 	.word	0x40020400

08003508 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){ // ADC callback
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b089      	sub	sp, #36	; 0x24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
	if(adc_buf[0]>= 4096.0*0.95){ //3892
 8003510:	4b20      	ldr	r3, [pc, #128]	; (8003594 <HAL_ADC_ConvCpltCallback+0x8c>)
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	f640 7233 	movw	r2, #3891	; 0xf33
 8003518:	4293      	cmp	r3, r2
 800351a:	d91e      	bls.n	800355a <HAL_ADC_ConvCpltCallback+0x52>
		t3T = tim7Time_ms;
 800351c:	4b1e      	ldr	r3, [pc, #120]	; (8003598 <HAL_ADC_ConvCpltCallback+0x90>)
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	4b1e      	ldr	r3, [pc, #120]	; (800359c <HAL_ADC_ConvCpltCallback+0x94>)
 8003524:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim7); 							// stop tim7
 8003526:	481e      	ldr	r0, [pc, #120]	; (80035a0 <HAL_ADC_ConvCpltCallback+0x98>)
 8003528:	f005 fb44 	bl	8008bb4 <HAL_TIM_Base_Stop_IT>
		HAL_ADC_Stop_DMA(&hadc1); 								// stop ADC-DMA
 800352c:	481d      	ldr	r0, [pc, #116]	; (80035a4 <HAL_ADC_ConvCpltCallback+0x9c>)
 800352e:	f002 f817 	bl	8005560 <HAL_ADC_Stop_DMA>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);	// set PB4 low
 8003532:	2200      	movs	r2, #0
 8003534:	2110      	movs	r1, #16
 8003536:	481c      	ldr	r0, [pc, #112]	; (80035a8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8003538:	f003 fcf6 	bl	8006f28 <HAL_GPIO_WritePin>
		event_queue.push(new CalculationEvent());				// start calculation
 800353c:	2004      	movs	r0, #4
 800353e:	f006 fdfd 	bl	800a13c <_Znwj>
 8003542:	4603      	mov	r3, r0
 8003544:	461c      	mov	r4, r3
 8003546:	4620      	mov	r0, r4
 8003548:	f7fe f9c4 	bl	80018d4 <_ZN16CalculationEventC1Ev>
 800354c:	61fc      	str	r4, [r7, #28]
 800354e:	f107 031c 	add.w	r3, r7, #28
 8003552:	4619      	mov	r1, r3
 8003554:	4815      	ldr	r0, [pc, #84]	; (80035ac <HAL_ADC_ConvCpltCallback+0xa4>)
 8003556:	f7fe fa29 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
	}
	#ifdef DEBUG
	char msgBuffer[16];
	sprintf(msgBuffer, "Value: %hu : %lu\r\n", adc_buf[0], tim7Time_ms); //%d
 800355a:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <HAL_ADC_ConvCpltCallback+0x8c>)
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	4b0d      	ldr	r3, [pc, #52]	; (8003598 <HAL_ADC_ConvCpltCallback+0x90>)
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	f107 000c 	add.w	r0, r7, #12
 8003568:	4911      	ldr	r1, [pc, #68]	; (80035b0 <HAL_ADC_ConvCpltCallback+0xa8>)
 800356a:	f006 fecf 	bl	800a30c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) msgBuffer, strlen(msgBuffer), HAL_MAX_DELAY);
 800356e:	f107 030c 	add.w	r3, r7, #12
 8003572:	4618      	mov	r0, r3
 8003574:	f7fc fe3c 	bl	80001f0 <strlen>
 8003578:	4603      	mov	r3, r0
 800357a:	b29a      	uxth	r2, r3
 800357c:	f107 010c 	add.w	r1, r7, #12
 8003580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003584:	480b      	ldr	r0, [pc, #44]	; (80035b4 <HAL_ADC_ConvCpltCallback+0xac>)
 8003586:	f005 ff60 	bl	800944a <HAL_UART_Transmit>
	#endif
}
 800358a:	bf00      	nop
 800358c:	3724      	adds	r7, #36	; 0x24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd90      	pop	{r4, r7, pc}
 8003592:	bf00      	nop
 8003594:	20000e80 	.word	0x20000e80
 8003598:	20000e90 	.word	0x20000e90
 800359c:	20000e88 	.word	0x20000e88
 80035a0:	200008ac 	.word	0x200008ac
 80035a4:	2000061c 	.word	0x2000061c
 80035a8:	40020400 	.word	0x40020400
 80035ac:	20000e54 	.word	0x20000e54
 80035b0:	08011e70 	.word	0x08011e70
 80035b4:	200008f4 	.word	0x200008f4

080035b8 <_Z17_LCD_SendInternalP17LCD_HandleTypeDefhh>:
#define LCD_I2C_TIMEOUT 200

#define COLUMNS 16
#define ROWS 2

HAL_StatusTypeDef _LCD_SendInternal(LCD_HandleTypeDef *dev, uint8_t data, uint8_t flags) {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af02      	add	r7, sp, #8
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	70fb      	strb	r3, [r7, #3]
 80035c4:	4613      	mov	r3, r2
 80035c6:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef res;
    for(int i=0;i<5;i++) {
 80035c8:	2300      	movs	r3, #0
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	e010      	b.n	80035f0 <_Z17_LCD_SendInternalP17LCD_HandleTypeDefhh+0x38>
        res = HAL_I2C_IsDeviceReady(dev->i2c, dev->i2c_addr, 1, LCD_I2C_TIMEOUT);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6858      	ldr	r0, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	b299      	uxth	r1, r3
 80035d8:	23c8      	movs	r3, #200	; 0xc8
 80035da:	2201      	movs	r2, #1
 80035dc:	f004 f82c 	bl	8007638 <HAL_I2C_IsDeviceReady>
 80035e0:	4603      	mov	r3, r0
 80035e2:	75fb      	strb	r3, [r7, #23]
        if(res == HAL_OK)
 80035e4:	7dfb      	ldrb	r3, [r7, #23]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d006      	beq.n	80035f8 <_Z17_LCD_SendInternalP17LCD_HandleTypeDefhh+0x40>
    for(int i=0;i<5;i++) {
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	3301      	adds	r3, #1
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	ddeb      	ble.n	80035ce <_Z17_LCD_SendInternalP17LCD_HandleTypeDefhh+0x16>
 80035f6:	e000      	b.n	80035fa <_Z17_LCD_SendInternalP17LCD_HandleTypeDefhh+0x42>
            break;
 80035f8:	bf00      	nop
    }
    if(res!=HAL_OK) {
 80035fa:	7dfb      	ldrb	r3, [r7, #23]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <_Z17_LCD_SendInternalP17LCD_HandleTypeDefhh+0x4c>
    	return res;
 8003600:	7dfb      	ldrb	r3, [r7, #23]
 8003602:	e043      	b.n	800368c <_Z17_LCD_SendInternalP17LCD_HandleTypeDefhh+0xd4>
    }


    uint8_t up = data & 0xF0;
 8003604:	78fb      	ldrb	r3, [r7, #3]
 8003606:	f023 030f 	bic.w	r3, r3, #15
 800360a:	73fb      	strb	r3, [r7, #15]
    uint8_t lo = (data << 4) & 0xF0;
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	73bb      	strb	r3, [r7, #14]
    uint8_t backlight = dev->backlight_enable?BACKLIGHT:0;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	7a1b      	ldrb	r3, [r3, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <_Z17_LCD_SendInternalP17LCD_HandleTypeDefhh+0x66>
 800361a:	2308      	movs	r3, #8
 800361c:	e000      	b.n	8003620 <_Z17_LCD_SendInternalP17LCD_HandleTypeDefhh+0x68>
 800361e:	2300      	movs	r3, #0
 8003620:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|backlight|PIN_EN;
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	78bb      	ldrb	r3, [r7, #2]
 8003626:	4313      	orrs	r3, r2
 8003628:	b2da      	uxtb	r2, r3
 800362a:	7b7b      	ldrb	r3, [r7, #13]
 800362c:	4313      	orrs	r3, r2
 800362e:	b2db      	uxtb	r3, r3
 8003630:	f043 0304 	orr.w	r3, r3, #4
 8003634:	b2db      	uxtb	r3, r3
 8003636:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|backlight;
 8003638:	7bfa      	ldrb	r2, [r7, #15]
 800363a:	78bb      	ldrb	r3, [r7, #2]
 800363c:	4313      	orrs	r3, r2
 800363e:	b2da      	uxtb	r2, r3
 8003640:	7b7b      	ldrb	r3, [r7, #13]
 8003642:	4313      	orrs	r3, r2
 8003644:	b2db      	uxtb	r3, r3
 8003646:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|backlight|PIN_EN;
 8003648:	7bba      	ldrb	r2, [r7, #14]
 800364a:	78bb      	ldrb	r3, [r7, #2]
 800364c:	4313      	orrs	r3, r2
 800364e:	b2da      	uxtb	r2, r3
 8003650:	7b7b      	ldrb	r3, [r7, #13]
 8003652:	4313      	orrs	r3, r2
 8003654:	b2db      	uxtb	r3, r3
 8003656:	f043 0304 	orr.w	r3, r3, #4
 800365a:	b2db      	uxtb	r3, r3
 800365c:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|backlight;
 800365e:	7bba      	ldrb	r2, [r7, #14]
 8003660:	78bb      	ldrb	r3, [r7, #2]
 8003662:	4313      	orrs	r3, r2
 8003664:	b2da      	uxtb	r2, r3
 8003666:	7b7b      	ldrb	r3, [r7, #13]
 8003668:	4313      	orrs	r3, r2
 800366a:	b2db      	uxtb	r3, r3
 800366c:	72fb      	strb	r3, [r7, #11]

    //TODO send data_arr to the device
   res = HAL_I2C_Master_Transmit(dev->i2c, dev->i2c_addr, data_arr, sizeof(data_arr), LCD_I2C_TIMEOUT);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6858      	ldr	r0, [r3, #4]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	b299      	uxth	r1, r3
 8003678:	f107 0208 	add.w	r2, r7, #8
 800367c:	23c8      	movs	r3, #200	; 0xc8
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	2304      	movs	r3, #4
 8003682:	f003 fde1 	bl	8007248 <HAL_I2C_Master_Transmit>
 8003686:	4603      	mov	r3, r0
 8003688:	75fb      	strb	r3, [r7, #23]
   //for (int var = 0; var < 5; ++var) {}
    //HAL_Delay(LCD_DELAY_MS); //delay afterwards to not overwhelm display
    return res;
 800368a:	7dfb      	ldrb	r3, [r7, #23]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <_Z16_LCD_SendCommandP17LCD_HandleTypeDefh>:

HAL_StatusTypeDef _LCD_SendCommand(LCD_HandleTypeDef *dev, uint8_t cmd) {
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	70fb      	strb	r3, [r7, #3]
    return _LCD_SendInternal(dev, cmd, 0);
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	2200      	movs	r2, #0
 80036a4:	4619      	mov	r1, r3
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff ff86 	bl	80035b8 <_Z17_LCD_SendInternalP17LCD_HandleTypeDefhh>
 80036ac:	4603      	mov	r3, r0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <_Z13_LCD_SendDataP17LCD_HandleTypeDefh>:

HAL_StatusTypeDef _LCD_SendData(LCD_HandleTypeDef *dev, uint8_t data) {
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	460b      	mov	r3, r1
 80036c0:	70fb      	strb	r3, [r7, #3]
    return _LCD_SendInternal(dev, data, PIN_RS);
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	2201      	movs	r2, #1
 80036c6:	4619      	mov	r1, r3
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff ff75 	bl	80035b8 <_Z17_LCD_SendInternalP17LCD_HandleTypeDefhh>
 80036ce:	4603      	mov	r3, r0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <_Z9LCD_PrintP17LCD_HandleTypeDefPKc>:

#define RETURN_IF_NOT_OK if(status!=HAL_OK)return status;

HAL_StatusTypeDef LCD_Print(LCD_HandleTypeDef *dev, const char *str) {
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
    while(*str) {
 80036e2:	e00f      	b.n	8003704 <_Z9LCD_PrintP17LCD_HandleTypeDefPKc+0x2c>
    	status = _LCD_SendData(dev, (uint8_t)(*str));
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	4619      	mov	r1, r3
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff ffe3 	bl	80036b6 <_Z13_LCD_SendDataP17LCD_HandleTypeDefh>
 80036f0:	4603      	mov	r3, r0
 80036f2:	73fb      	strb	r3, [r7, #15]
    	str++;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	3301      	adds	r3, #1
 80036f8:	603b      	str	r3, [r7, #0]
        RETURN_IF_NOT_OK;
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <_Z9LCD_PrintP17LCD_HandleTypeDefPKc+0x2c>
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	e004      	b.n	800370e <_Z9LCD_PrintP17LCD_HandleTypeDefPKc+0x36>
    while(*str) {
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1eb      	bne.n	80036e4 <_Z9LCD_PrintP17LCD_HandleTypeDefPKc+0xc>
    }
    return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <_Z9LCD_BeginP17LCD_HandleTypeDef>:
    RETURN_IF_NOT_OK;
    status = LCD_Print(dev, " !!! ");
    return status;
}

HAL_StatusTypeDef LCD_Begin(LCD_HandleTypeDef *dev) {
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
	dev->backlight_enable=true;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	721a      	strb	r2, [r3, #8]
	HAL_StatusTypeDef status;

    // 4-bit mode, 2 lines, 5x7 format
    status = _LCD_SendCommand(dev, 0b00110000);
 8003724:	2130      	movs	r1, #48	; 0x30
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff ffb4 	bl	8003694 <_Z16_LCD_SendCommandP17LCD_HandleTypeDefh>
 800372c:	4603      	mov	r3, r0
 800372e:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8003730:	7bfb      	ldrb	r3, [r7, #15]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <_Z9LCD_BeginP17LCD_HandleTypeDef+0x24>
 8003736:	7bfb      	ldrb	r3, [r7, #15]
 8003738:	e01c      	b.n	8003774 <_Z9LCD_BeginP17LCD_HandleTypeDef+0x5e>

    // display & cursor home (keep this!)
    status = _LCD_SendCommand(dev, 0b00000010);
 800373a:	2102      	movs	r1, #2
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff ffa9 	bl	8003694 <_Z16_LCD_SendCommandP17LCD_HandleTypeDefh>
 8003742:	4603      	mov	r3, r0
 8003744:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <_Z9LCD_BeginP17LCD_HandleTypeDef+0x3a>
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	e011      	b.n	8003774 <_Z9LCD_BeginP17LCD_HandleTypeDef+0x5e>

    // display on, right shift, underline off, blink off
    status = _LCD_SendCommand(dev, 0b00001100);
 8003750:	210c      	movs	r1, #12
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff ff9e 	bl	8003694 <_Z16_LCD_SendCommandP17LCD_HandleTypeDefh>
 8003758:	4603      	mov	r3, r0
 800375a:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <_Z9LCD_BeginP17LCD_HandleTypeDef+0x50>
 8003762:	7bfb      	ldrb	r3, [r7, #15]
 8003764:	e006      	b.n	8003774 <_Z9LCD_BeginP17LCD_HandleTypeDef+0x5e>

    // clear display (optional here)
    status = _LCD_SendCommand(dev, 0b00000001);
 8003766:	2101      	movs	r1, #1
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff ff93 	bl	8003694 <_Z16_LCD_SendCommandP17LCD_HandleTypeDefh>
 800376e:	4603      	mov	r3, r0
 8003770:	73fb      	strb	r3, [r7, #15]
    return status;
 8003772:	7bfb      	ldrb	r3, [r7, #15]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <_Z13LCD_SetCursorP17LCD_HandleTypeDefhh>:


HAL_StatusTypeDef LCD_SetCursor(LCD_HandleTypeDef *dev, uint8_t row, uint8_t col) {
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	70fb      	strb	r3, [r7, #3]
 8003788:	4613      	mov	r3, r2
 800378a:	70bb      	strb	r3, [r7, #2]
	if(row<0 || row>=ROWS || col<0 || col>=COLUMNS) {
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d802      	bhi.n	8003798 <_Z13LCD_SetCursorP17LCD_HandleTypeDefhh+0x1c>
 8003792:	78bb      	ldrb	r3, [r7, #2]
 8003794:	2b0f      	cmp	r3, #15
 8003796:	d901      	bls.n	800379c <_Z13LCD_SetCursorP17LCD_HandleTypeDefhh+0x20>
		return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e011      	b.n	80037c0 <_Z13LCD_SetCursorP17LCD_HandleTypeDefhh+0x44>
	}
	uint8_t cmd = row==0?0b10000000:0b11000000;
 800379c:	78fb      	ldrb	r3, [r7, #3]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <_Z13LCD_SetCursorP17LCD_HandleTypeDefhh+0x2a>
 80037a2:	2380      	movs	r3, #128	; 0x80
 80037a4:	e000      	b.n	80037a8 <_Z13LCD_SetCursorP17LCD_HandleTypeDefhh+0x2c>
 80037a6:	23c0      	movs	r3, #192	; 0xc0
 80037a8:	73fb      	strb	r3, [r7, #15]
	cmd+=col;
 80037aa:	7bfa      	ldrb	r2, [r7, #15]
 80037ac:	78bb      	ldrb	r3, [r7, #2]
 80037ae:	4413      	add	r3, r2
 80037b0:	73fb      	strb	r3, [r7, #15]
	return _LCD_SendCommand(dev, cmd);
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	4619      	mov	r1, r3
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff ff6c 	bl	8003694 <_Z16_LCD_SendCommandP17LCD_HandleTypeDefh>
 80037bc:	4603      	mov	r3, r0
 80037be:	bf00      	nop
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <_Z10LCD_PrintfP17LCD_HandleTypeDefPKcz>:

HAL_StatusTypeDef LCD_Printf(LCD_HandleTypeDef *dev, const char *format, ...) {
 80037c8:	b40e      	push	{r1, r2, r3}
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b089      	sub	sp, #36	; 0x24
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
	char lcd_buffer[COLUMNS + 1];
	va_list args;
	va_start(args, format);
 80037d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037d6:	60bb      	str	r3, [r7, #8]
	vsnprintf(lcd_buffer, COLUMNS + 1, format, args);
 80037d8:	f107 000c 	add.w	r0, r7, #12
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e0:	2111      	movs	r1, #17
 80037e2:	f006 fddf 	bl	800a3a4 <vsniprintf>
	va_end(args);
	return LCD_Print(dev, lcd_buffer);
 80037e6:	f107 030c 	add.w	r3, r7, #12
 80037ea:	4619      	mov	r1, r3
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff ff73 	bl	80036d8 <_Z9LCD_PrintP17LCD_HandleTypeDefPKc>
 80037f2:	4603      	mov	r3, r0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3724      	adds	r7, #36	; 0x24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037fe:	b003      	add	sp, #12
 8003800:	4770      	bx	lr

08003802 <_Z9LCD_ClearP17LCD_HandleTypeDef>:

HAL_StatusTypeDef LCD_Clear(LCD_HandleTypeDef *dev) {
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
	return _LCD_SendCommand(dev, 0b00000001);
 800380a:	2101      	movs	r1, #1
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff ff41 	bl	8003694 <_Z16_LCD_SendCommandP17LCD_HandleTypeDefh>
 8003812:	4603      	mov	r3, r0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_TIM_PeriodElapsedCallback>:

uint16_t tim7Time_ms = 0; 		// ms counter

int number_Btn_Press=0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ // Timer IT
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4){ // Timer 4 -> LED Blink
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a10      	ldr	r2, [pc, #64]	; (800386c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d103      	bne.n	8003836 <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800382e:	2101      	movs	r1, #1
 8003830:	480f      	ldr	r0, [pc, #60]	; (8003870 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003832:	f003 fb92 	bl	8006f5a <HAL_GPIO_TogglePin>
	}
	if(htim->Instance == TIM6){ // Timer 6 -> Button 50ms pause
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a0e      	ldr	r2, [pc, #56]	; (8003874 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d105      	bne.n	800384c <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_TIM_Base_Stop_IT(&htim6);
 8003840:	480d      	ldr	r0, [pc, #52]	; (8003878 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003842:	f005 f9b7 	bl	8008bb4 <HAL_TIM_Base_Stop_IT>
		btnPressedFlag = false;
 8003846:	4b0d      	ldr	r3, [pc, #52]	; (800387c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
	}
	if(htim->Instance == TIM7){ // Timer 7 -> Time counter -> mesurement
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a0b      	ldr	r2, [pc, #44]	; (8003880 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d105      	bne.n	8003862 <HAL_TIM_PeriodElapsedCallback+0x46>
		tim7Time_ms++; // ms counter
 8003856:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	3301      	adds	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003860:	801a      	strh	r2, [r3, #0]
	}
}
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40000800 	.word	0x40000800
 8003870:	40020400 	.word	0x40020400
 8003874:	40001000 	.word	0x40001000
 8003878:	20000864 	.word	0x20000864
 800387c:	20000e7c 	.word	0x20000e7c
 8003880:	40001400 	.word	0x40001400
 8003884:	20000e90 	.word	0x20000e90

08003888 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003888:	b590      	push	{r4, r7, lr}
 800388a:	b091      	sub	sp, #68	; 0x44
 800388c:	af06      	add	r7, sp, #24
 800388e:	4603      	mov	r3, r0
 8003890:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == USER_Btn_Pin && btnPressedFlag == false && HAL_TIM_Base_GetState(&htim6) == HAL_TIM_STATE_READY)
 8003892:	88fb      	ldrh	r3, [r7, #6]
 8003894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003898:	d10b      	bne.n	80038b2 <HAL_GPIO_EXTI_Callback+0x2a>
 800389a:	4b8c      	ldr	r3, [pc, #560]	; (8003acc <HAL_GPIO_EXTI_Callback+0x244>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d107      	bne.n	80038b2 <HAL_GPIO_EXTI_Callback+0x2a>
 80038a2:	488b      	ldr	r0, [pc, #556]	; (8003ad0 <HAL_GPIO_EXTI_Callback+0x248>)
 80038a4:	f005 fbac 	bl	8009000 <HAL_TIM_Base_GetState>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_GPIO_EXTI_Callback+0x2a>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <HAL_GPIO_EXTI_Callback+0x2c>
 80038b2:	2300      	movs	r3, #0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 8104 	beq.w	8003ac2 <HAL_GPIO_EXTI_Callback+0x23a>
    {
		btnPressedFlag = true;
 80038ba:	4b84      	ldr	r3, [pc, #528]	; (8003acc <HAL_GPIO_EXTI_Callback+0x244>)
 80038bc:	2201      	movs	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim6);
 80038c0:	4883      	ldr	r0, [pc, #524]	; (8003ad0 <HAL_GPIO_EXTI_Callback+0x248>)
 80038c2:	f005 f907 	bl	8008ad4 <HAL_TIM_Base_Start_IT>

		switch (number_Btn_Press) {
 80038c6:	4b83      	ldr	r3, [pc, #524]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x24c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	f200 80bd 	bhi.w	8003a4a <HAL_GPIO_EXTI_Callback+0x1c2>
 80038d0:	a201      	add	r2, pc, #4	; (adr r2, 80038d8 <HAL_GPIO_EXTI_Callback+0x50>)
 80038d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d6:	bf00      	nop
 80038d8:	080038ed 	.word	0x080038ed
 80038dc:	08003933 	.word	0x08003933
 80038e0:	08003979 	.word	0x08003979
 80038e4:	080039bf 	.word	0x080039bf
 80038e8:	08003a05 	.word	0x08003a05
			case 0:
				number_Btn_Press++;
 80038ec:	4b79      	ldr	r3, [pc, #484]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x24c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	3301      	adds	r3, #1
 80038f2:	4a78      	ldr	r2, [pc, #480]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x24c>)
 80038f4:	6013      	str	r3, [r2, #0]
				event_queue.push(new OLED_DisplayEvent("Verbinde Kondesator","minus mit Ground","Den Plus Pol an","PA4","","","",OLED_Multiwrite_Small));
 80038f6:	f247 00a4 	movw	r0, #28836	; 0x70a4
 80038fa:	f006 fc1f 	bl	800a13c <_Znwj>
 80038fe:	4603      	mov	r3, r0
 8003900:	461c      	mov	r4, r3
 8003902:	2308      	movs	r3, #8
 8003904:	9304      	str	r3, [sp, #16]
 8003906:	4b74      	ldr	r3, [pc, #464]	; (8003ad8 <HAL_GPIO_EXTI_Callback+0x250>)
 8003908:	9303      	str	r3, [sp, #12]
 800390a:	4b73      	ldr	r3, [pc, #460]	; (8003ad8 <HAL_GPIO_EXTI_Callback+0x250>)
 800390c:	9302      	str	r3, [sp, #8]
 800390e:	4b72      	ldr	r3, [pc, #456]	; (8003ad8 <HAL_GPIO_EXTI_Callback+0x250>)
 8003910:	9301      	str	r3, [sp, #4]
 8003912:	4b72      	ldr	r3, [pc, #456]	; (8003adc <HAL_GPIO_EXTI_Callback+0x254>)
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	4b72      	ldr	r3, [pc, #456]	; (8003ae0 <HAL_GPIO_EXTI_Callback+0x258>)
 8003918:	4a72      	ldr	r2, [pc, #456]	; (8003ae4 <HAL_GPIO_EXTI_Callback+0x25c>)
 800391a:	4973      	ldr	r1, [pc, #460]	; (8003ae8 <HAL_GPIO_EXTI_Callback+0x260>)
 800391c:	4620      	mov	r0, r4
 800391e:	f7ff f9b5 	bl	8002c8c <_ZN17OLED_DisplayEventC1EPcS0_S0_S0_S0_S0_S0_7DISP_OP>
 8003922:	60fc      	str	r4, [r7, #12]
 8003924:	f107 030c 	add.w	r3, r7, #12
 8003928:	4619      	mov	r1, r3
 800392a:	4870      	ldr	r0, [pc, #448]	; (8003aec <HAL_GPIO_EXTI_Callback+0x264>)
 800392c:	f7fe f83e 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
				break;
 8003930:	e08c      	b.n	8003a4c <HAL_GPIO_EXTI_Callback+0x1c4>
			case 1:
				number_Btn_Press++;
 8003932:	4b68      	ldr	r3, [pc, #416]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x24c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3301      	adds	r3, #1
 8003938:	4a66      	ldr	r2, [pc, #408]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x24c>)
 800393a:	6013      	str	r3, [r2, #0]
				event_queue.push(new OLED_DisplayEvent("Verbinde Wiederstand","mit PB4 und PA4","","","","","",OLED_Multiwrite_Small));
 800393c:	f247 00a4 	movw	r0, #28836	; 0x70a4
 8003940:	f006 fbfc 	bl	800a13c <_Znwj>
 8003944:	4603      	mov	r3, r0
 8003946:	461c      	mov	r4, r3
 8003948:	2308      	movs	r3, #8
 800394a:	9304      	str	r3, [sp, #16]
 800394c:	4b62      	ldr	r3, [pc, #392]	; (8003ad8 <HAL_GPIO_EXTI_Callback+0x250>)
 800394e:	9303      	str	r3, [sp, #12]
 8003950:	4b61      	ldr	r3, [pc, #388]	; (8003ad8 <HAL_GPIO_EXTI_Callback+0x250>)
 8003952:	9302      	str	r3, [sp, #8]
 8003954:	4b60      	ldr	r3, [pc, #384]	; (8003ad8 <HAL_GPIO_EXTI_Callback+0x250>)
 8003956:	9301      	str	r3, [sp, #4]
 8003958:	4b5f      	ldr	r3, [pc, #380]	; (8003ad8 <HAL_GPIO_EXTI_Callback+0x250>)
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	4b5e      	ldr	r3, [pc, #376]	; (8003ad8 <HAL_GPIO_EXTI_Callback+0x250>)
 800395e:	4a64      	ldr	r2, [pc, #400]	; (8003af0 <HAL_GPIO_EXTI_Callback+0x268>)
 8003960:	4964      	ldr	r1, [pc, #400]	; (8003af4 <HAL_GPIO_EXTI_Callback+0x26c>)
 8003962:	4620      	mov	r0, r4
 8003964:	f7ff f992 	bl	8002c8c <_ZN17OLED_DisplayEventC1EPcS0_S0_S0_S0_S0_S0_7DISP_OP>
 8003968:	613c      	str	r4, [r7, #16]
 800396a:	f107 0310 	add.w	r3, r7, #16
 800396e:	4619      	mov	r1, r3
 8003970:	485e      	ldr	r0, [pc, #376]	; (8003aec <HAL_GPIO_EXTI_Callback+0x264>)
 8003972:	f7fe f81b 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
				break;
 8003976:	e069      	b.n	8003a4c <HAL_GPIO_EXTI_Callback+0x1c4>
			case 2:
				number_Btn_Press++;
 8003978:	4b56      	ldr	r3, [pc, #344]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x24c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3301      	adds	r3, #1
 800397e:	4a55      	ldr	r2, [pc, #340]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x24c>)
 8003980:	6013      	str	r3, [r2, #0]
				event_queue.push(new OLED_DisplayEvent("Folgende Werte sind","Voreingestellt:","Kondensator","in micro Farad:","100","","",OLED_Multiwrite_Small));
 8003982:	f247 00a4 	movw	r0, #28836	; 0x70a4
 8003986:	f006 fbd9 	bl	800a13c <_Znwj>
 800398a:	4603      	mov	r3, r0
 800398c:	461c      	mov	r4, r3
 800398e:	2308      	movs	r3, #8
 8003990:	9304      	str	r3, [sp, #16]
 8003992:	4b51      	ldr	r3, [pc, #324]	; (8003ad8 <HAL_GPIO_EXTI_Callback+0x250>)
 8003994:	9303      	str	r3, [sp, #12]
 8003996:	4b50      	ldr	r3, [pc, #320]	; (8003ad8 <HAL_GPIO_EXTI_Callback+0x250>)
 8003998:	9302      	str	r3, [sp, #8]
 800399a:	4b57      	ldr	r3, [pc, #348]	; (8003af8 <HAL_GPIO_EXTI_Callback+0x270>)
 800399c:	9301      	str	r3, [sp, #4]
 800399e:	4b57      	ldr	r3, [pc, #348]	; (8003afc <HAL_GPIO_EXTI_Callback+0x274>)
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	4b57      	ldr	r3, [pc, #348]	; (8003b00 <HAL_GPIO_EXTI_Callback+0x278>)
 80039a4:	4a57      	ldr	r2, [pc, #348]	; (8003b04 <HAL_GPIO_EXTI_Callback+0x27c>)
 80039a6:	4958      	ldr	r1, [pc, #352]	; (8003b08 <HAL_GPIO_EXTI_Callback+0x280>)
 80039a8:	4620      	mov	r0, r4
 80039aa:	f7ff f96f 	bl	8002c8c <_ZN17OLED_DisplayEventC1EPcS0_S0_S0_S0_S0_S0_7DISP_OP>
 80039ae:	617c      	str	r4, [r7, #20]
 80039b0:	f107 0314 	add.w	r3, r7, #20
 80039b4:	4619      	mov	r1, r3
 80039b6:	484d      	ldr	r0, [pc, #308]	; (8003aec <HAL_GPIO_EXTI_Callback+0x264>)
 80039b8:	f7fd fff8 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
				break;
 80039bc:	e046      	b.n	8003a4c <HAL_GPIO_EXTI_Callback+0x1c4>
			case 3:
				number_Btn_Press++;
 80039be:	4b45      	ldr	r3, [pc, #276]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x24c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3301      	adds	r3, #1
 80039c4:	4a43      	ldr	r2, [pc, #268]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x24c>)
 80039c6:	6013      	str	r3, [r2, #0]
				event_queue.push(new OLED_DisplayEvent("Folgende Werte sind","Voreingestellt:","Wiederstand","in Ohm:","2000","","",OLED_Multiwrite_Small));
 80039c8:	f247 00a4 	movw	r0, #28836	; 0x70a4
 80039cc:	f006 fbb6 	bl	800a13c <_Znwj>
 80039d0:	4603      	mov	r3, r0
 80039d2:	461c      	mov	r4, r3
 80039d4:	2308      	movs	r3, #8
 80039d6:	9304      	str	r3, [sp, #16]
 80039d8:	4b3f      	ldr	r3, [pc, #252]	; (8003ad8 <HAL_GPIO_EXTI_Callback+0x250>)
 80039da:	9303      	str	r3, [sp, #12]
 80039dc:	4b3e      	ldr	r3, [pc, #248]	; (8003ad8 <HAL_GPIO_EXTI_Callback+0x250>)
 80039de:	9302      	str	r3, [sp, #8]
 80039e0:	4b4a      	ldr	r3, [pc, #296]	; (8003b0c <HAL_GPIO_EXTI_Callback+0x284>)
 80039e2:	9301      	str	r3, [sp, #4]
 80039e4:	4b4a      	ldr	r3, [pc, #296]	; (8003b10 <HAL_GPIO_EXTI_Callback+0x288>)
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	4b4a      	ldr	r3, [pc, #296]	; (8003b14 <HAL_GPIO_EXTI_Callback+0x28c>)
 80039ea:	4a46      	ldr	r2, [pc, #280]	; (8003b04 <HAL_GPIO_EXTI_Callback+0x27c>)
 80039ec:	4946      	ldr	r1, [pc, #280]	; (8003b08 <HAL_GPIO_EXTI_Callback+0x280>)
 80039ee:	4620      	mov	r0, r4
 80039f0:	f7ff f94c 	bl	8002c8c <_ZN17OLED_DisplayEventC1EPcS0_S0_S0_S0_S0_S0_7DISP_OP>
 80039f4:	61bc      	str	r4, [r7, #24]
 80039f6:	f107 0318 	add.w	r3, r7, #24
 80039fa:	4619      	mov	r1, r3
 80039fc:	483b      	ldr	r0, [pc, #236]	; (8003aec <HAL_GPIO_EXTI_Callback+0x264>)
 80039fe:	f7fd ffd5 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
				break;
 8003a02:	e023      	b.n	8003a4c <HAL_GPIO_EXTI_Callback+0x1c4>
			case 4:
				number_Btn_Press++;
 8003a04:	4b33      	ldr	r3, [pc, #204]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x24c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	4a32      	ldr	r2, [pc, #200]	; (8003ad4 <HAL_GPIO_EXTI_Callback+0x24c>)
 8003a0c:	6013      	str	r3, [r2, #0]
				event_queue.push(new OLED_DisplayEvent("Wenn diese Werte","Korrekt sind","Drucke Blauen ","Knopf um Messung","zu starten","","",OLED_Multiwrite_Small));
 8003a0e:	f247 00a4 	movw	r0, #28836	; 0x70a4
 8003a12:	f006 fb93 	bl	800a13c <_Znwj>
 8003a16:	4603      	mov	r3, r0
 8003a18:	461c      	mov	r4, r3
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	9304      	str	r3, [sp, #16]
 8003a1e:	4b2e      	ldr	r3, [pc, #184]	; (8003ad8 <HAL_GPIO_EXTI_Callback+0x250>)
 8003a20:	9303      	str	r3, [sp, #12]
 8003a22:	4b2d      	ldr	r3, [pc, #180]	; (8003ad8 <HAL_GPIO_EXTI_Callback+0x250>)
 8003a24:	9302      	str	r3, [sp, #8]
 8003a26:	4b3c      	ldr	r3, [pc, #240]	; (8003b18 <HAL_GPIO_EXTI_Callback+0x290>)
 8003a28:	9301      	str	r3, [sp, #4]
 8003a2a:	4b3c      	ldr	r3, [pc, #240]	; (8003b1c <HAL_GPIO_EXTI_Callback+0x294>)
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	4b3c      	ldr	r3, [pc, #240]	; (8003b20 <HAL_GPIO_EXTI_Callback+0x298>)
 8003a30:	4a3c      	ldr	r2, [pc, #240]	; (8003b24 <HAL_GPIO_EXTI_Callback+0x29c>)
 8003a32:	493d      	ldr	r1, [pc, #244]	; (8003b28 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8003a34:	4620      	mov	r0, r4
 8003a36:	f7ff f929 	bl	8002c8c <_ZN17OLED_DisplayEventC1EPcS0_S0_S0_S0_S0_S0_7DISP_OP>
 8003a3a:	61fc      	str	r4, [r7, #28]
 8003a3c:	f107 031c 	add.w	r3, r7, #28
 8003a40:	4619      	mov	r1, r3
 8003a42:	482a      	ldr	r0, [pc, #168]	; (8003aec <HAL_GPIO_EXTI_Callback+0x264>)
 8003a44:	f7fd ffb2 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
				break;
 8003a48:	e000      	b.n	8003a4c <HAL_GPIO_EXTI_Callback+0x1c4>
			default:
				break;
 8003a4a:	bf00      	nop
		}

		if(!event_queue.empty()){ //cancelEvent
 8003a4c:	4827      	ldr	r0, [pc, #156]	; (8003aec <HAL_GPIO_EXTI_Callback+0x264>)
 8003a4e:	f000 fcc7 	bl	80043e0 <_ZNKSt5queueIP5EventSt5dequeIS1_SaIS1_EEE5emptyEv>
 8003a52:	4603      	mov	r3, r0
 8003a54:	f083 0301 	eor.w	r3, r3, #1
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d01f      	beq.n	8003a9e <HAL_GPIO_EXTI_Callback+0x216>
			reset = true;
 8003a5e:	4b33      	ldr	r3, [pc, #204]	; (8003b2c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	701a      	strb	r2, [r3, #0]
			while(!event_queue.empty()) event_queue.pop();
 8003a64:	e002      	b.n	8003a6c <HAL_GPIO_EXTI_Callback+0x1e4>
 8003a66:	4821      	ldr	r0, [pc, #132]	; (8003aec <HAL_GPIO_EXTI_Callback+0x264>)
 8003a68:	f000 fcc7 	bl	80043fa <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE3popEv>
 8003a6c:	481f      	ldr	r0, [pc, #124]	; (8003aec <HAL_GPIO_EXTI_Callback+0x264>)
 8003a6e:	f000 fcb7 	bl	80043e0 <_ZNKSt5queueIP5EventSt5dequeIS1_SaIS1_EEE5emptyEv>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f083 0301 	eor.w	r3, r3, #1
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f3      	bne.n	8003a66 <HAL_GPIO_EXTI_Callback+0x1de>
			event_queue.push(new CancelEvent());
 8003a7e:	2004      	movs	r0, #4
 8003a80:	f006 fb5c 	bl	800a13c <_Znwj>
 8003a84:	4603      	mov	r3, r0
 8003a86:	461c      	mov	r4, r3
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f7fe fc8d 	bl	80023a8 <_ZN11CancelEventC1Ev>
 8003a8e:	623c      	str	r4, [r7, #32]
 8003a90:	f107 0320 	add.w	r3, r7, #32
 8003a94:	4619      	mov	r1, r3
 8003a96:	4815      	ldr	r0, [pc, #84]	; (8003aec <HAL_GPIO_EXTI_Callback+0x264>)
 8003a98:	f7fd ff88 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
			reset = false;
			event_queue.push(new StartEvent());
		}

    }
}
 8003a9c:	e011      	b.n	8003ac2 <HAL_GPIO_EXTI_Callback+0x23a>
			reset = false;
 8003a9e:	4b23      	ldr	r3, [pc, #140]	; (8003b2c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
			event_queue.push(new StartEvent());
 8003aa4:	2004      	movs	r0, #4
 8003aa6:	f006 fb49 	bl	800a13c <_Znwj>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	461c      	mov	r4, r3
 8003aae:	4620      	mov	r0, r4
 8003ab0:	f7ff fc18 	bl	80032e4 <_ZN10StartEventC1Ev>
 8003ab4:	627c      	str	r4, [r7, #36]	; 0x24
 8003ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aba:	4619      	mov	r1, r3
 8003abc:	480b      	ldr	r0, [pc, #44]	; (8003aec <HAL_GPIO_EXTI_Callback+0x264>)
 8003abe:	f7fd ff75 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>
}
 8003ac2:	bf00      	nop
 8003ac4:	372c      	adds	r7, #44	; 0x2c
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd90      	pop	{r4, r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000e7c 	.word	0x20000e7c
 8003ad0:	20000864 	.word	0x20000864
 8003ad4:	20000e94 	.word	0x20000e94
 8003ad8:	08011eec 	.word	0x08011eec
 8003adc:	08011ef0 	.word	0x08011ef0
 8003ae0:	08011eb4 	.word	0x08011eb4
 8003ae4:	08011ec4 	.word	0x08011ec4
 8003ae8:	08011ed8 	.word	0x08011ed8
 8003aec:	20000e54 	.word	0x20000e54
 8003af0:	08011ef4 	.word	0x08011ef4
 8003af4:	08011f04 	.word	0x08011f04
 8003af8:	08011f4c 	.word	0x08011f4c
 8003afc:	08011f50 	.word	0x08011f50
 8003b00:	08011f1c 	.word	0x08011f1c
 8003b04:	08011f28 	.word	0x08011f28
 8003b08:	08011f38 	.word	0x08011f38
 8003b0c:	08011f6c 	.word	0x08011f6c
 8003b10:	08011f74 	.word	0x08011f74
 8003b14:	08011f60 	.word	0x08011f60
 8003b18:	08011fb0 	.word	0x08011fb0
 8003b1c:	08011fbc 	.word	0x08011fbc
 8003b20:	08011f7c 	.word	0x08011f7c
 8003b24:	08011f8c 	.word	0x08011f8c
 8003b28:	08011f9c 	.word	0x08011f9c
 8003b2c:	20000e7d 	.word	0x20000e7d

08003b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b30:	b590      	push	{r4, r7, lr}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b36:	f001 fb29 	bl	800518c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b3a:	f000 f847 	bl	8003bcc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b3e:	f000 fb65 	bl	800420c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8003b42:	f000 fb43 	bl	80041cc <_ZL11MX_DMA_Initv>
  MX_ETH_Init();
 8003b46:	f000 f911 	bl	8003d6c <_ZL11MX_ETH_Initv>
  MX_USART3_UART_Init();
 8003b4a:	f000 fadf 	bl	800410c <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8003b4e:	f000 fb0b 	bl	8004168 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_TIM4_Init();
 8003b52:	f000 f9fd 	bl	8003f50 <_ZL12MX_TIM4_Initv>
  MX_I2C2_Init();
 8003b56:	f000 f9ab 	bl	8003eb0 <_ZL12MX_I2C2_Initv>
  MX_ADC1_Init();
 8003b5a:	f000 f8ab 	bl	8003cb4 <_ZL12MX_ADC1_Initv>
  MX_TIM6_Init();
 8003b5e:	f000 fa55 	bl	800400c <_ZL12MX_TIM6_Initv>
  MX_TIM7_Init();
 8003b62:	f000 fa93 	bl	800408c <_ZL12MX_TIM7_Initv>
  MX_I2C1_Init();
 8003b66:	f000 f953 	bl	8003e10 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  event_queue.push(new SetUpLcd()); // Startup
 8003b6a:	2008      	movs	r0, #8
 8003b6c:	f006 fae6 	bl	800a13c <_Znwj>
 8003b70:	4603      	mov	r3, r0
 8003b72:	461c      	mov	r4, r3
 8003b74:	4620      	mov	r0, r4
 8003b76:	f7ff fafd 	bl	8003174 <_ZN8SetUpLcdC1Ev>
 8003b7a:	603c      	str	r4, [r7, #0]
 8003b7c:	463b      	mov	r3, r7
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4811      	ldr	r0, [pc, #68]	; (8003bc8 <main+0x98>)
 8003b82:	f7fd ff13 	bl	80019ac <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE4pushEOS1_>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!event_queue.empty()){ //event handler
 8003b86:	4810      	ldr	r0, [pc, #64]	; (8003bc8 <main+0x98>)
 8003b88:	f000 fc2a 	bl	80043e0 <_ZNKSt5queueIP5EventSt5dequeIS1_SaIS1_EEE5emptyEv>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f083 0301 	eor.w	r3, r3, #1
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f6      	beq.n	8003b86 <main+0x56>
		  Event* tmpEvent = event_queue.front();
 8003b98:	480b      	ldr	r0, [pc, #44]	; (8003bc8 <main+0x98>)
 8003b9a:	f000 fc3a 	bl	8004412 <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE5frontEv>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	607b      	str	r3, [r7, #4]
		  event_queue.pop();
 8003ba4:	4808      	ldr	r0, [pc, #32]	; (8003bc8 <main+0x98>)
 8003ba6:	f000 fc28 	bl	80043fa <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE3popEv>
		  tmpEvent->handleEvent();
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	4798      	blx	r3
		  delete tmpEvent;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0e5      	beq.n	8003b86 <main+0x56>
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	3208      	adds	r2, #8
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	4790      	blx	r2
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8003bc4:	e7df      	b.n	8003b86 <main+0x56>
 8003bc6:	bf00      	nop
 8003bc8:	20000e54 	.word	0x20000e54

08003bcc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b094      	sub	sp, #80	; 0x50
 8003bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bd2:	f107 0320 	add.w	r3, r7, #32
 8003bd6:	2230      	movs	r2, #48	; 0x30
 8003bd8:	2100      	movs	r1, #0
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f006 fc0a 	bl	800a3f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003be0:	f107 030c 	add.w	r3, r7, #12
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	605a      	str	r2, [r3, #4]
 8003bea:	609a      	str	r2, [r3, #8]
 8003bec:	60da      	str	r2, [r3, #12]
 8003bee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60bb      	str	r3, [r7, #8]
 8003bf4:	4b2d      	ldr	r3, [pc, #180]	; (8003cac <_Z18SystemClock_Configv+0xe0>)
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	4a2c      	ldr	r2, [pc, #176]	; (8003cac <_Z18SystemClock_Configv+0xe0>)
 8003bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8003c00:	4b2a      	ldr	r3, [pc, #168]	; (8003cac <_Z18SystemClock_Configv+0xe0>)
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	607b      	str	r3, [r7, #4]
 8003c10:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <_Z18SystemClock_Configv+0xe4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a26      	ldr	r2, [pc, #152]	; (8003cb0 <_Z18SystemClock_Configv+0xe4>)
 8003c16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	4b24      	ldr	r3, [pc, #144]	; (8003cb0 <_Z18SystemClock_Configv+0xe4>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c24:	607b      	str	r3, [r7, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003c2c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c32:	2302      	movs	r3, #2
 8003c34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003c40:	23a8      	movs	r3, #168	; 0xa8
 8003c42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c44:	2302      	movs	r3, #2
 8003c46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003c48:	2307      	movs	r3, #7
 8003c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c4c:	f107 0320 	add.w	r3, r7, #32
 8003c50:	4618      	mov	r0, r3
 8003c52:	f004 fa57 	bl	8008104 <HAL_RCC_OscConfig>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf14      	ite	ne
 8003c5c:	2301      	movne	r3, #1
 8003c5e:	2300      	moveq	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8003c66:	f000 fb95 	bl	8004394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c6a:	230f      	movs	r3, #15
 8003c6c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003c76:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003c82:	f107 030c 	add.w	r3, r7, #12
 8003c86:	2105      	movs	r1, #5
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f004 fcb3 	bl	80085f4 <HAL_RCC_ClockConfig>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	bf14      	ite	ne
 8003c94:	2301      	movne	r3, #1
 8003c96:	2300      	moveq	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8003c9e:	f000 fb79 	bl	8004394 <Error_Handler>
  }
}
 8003ca2:	bf00      	nop
 8003ca4:	3750      	adds	r7, #80	; 0x50
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	40007000 	.word	0x40007000

08003cb4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003cba:	463b      	mov	r3, r7
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003cc6:	4b26      	ldr	r3, [pc, #152]	; (8003d60 <_ZL12MX_ADC1_Initv+0xac>)
 8003cc8:	4a26      	ldr	r2, [pc, #152]	; (8003d64 <_ZL12MX_ADC1_Initv+0xb0>)
 8003cca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003ccc:	4b24      	ldr	r3, [pc, #144]	; (8003d60 <_ZL12MX_ADC1_Initv+0xac>)
 8003cce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003cd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003cd4:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <_ZL12MX_ADC1_Initv+0xac>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003cda:	4b21      	ldr	r3, [pc, #132]	; (8003d60 <_ZL12MX_ADC1_Initv+0xac>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003ce0:	4b1f      	ldr	r3, [pc, #124]	; (8003d60 <_ZL12MX_ADC1_Initv+0xac>)
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003ce6:	4b1e      	ldr	r3, [pc, #120]	; (8003d60 <_ZL12MX_ADC1_Initv+0xac>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003cee:	4b1c      	ldr	r3, [pc, #112]	; (8003d60 <_ZL12MX_ADC1_Initv+0xac>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003cf4:	4b1a      	ldr	r3, [pc, #104]	; (8003d60 <_ZL12MX_ADC1_Initv+0xac>)
 8003cf6:	4a1c      	ldr	r2, [pc, #112]	; (8003d68 <_ZL12MX_ADC1_Initv+0xb4>)
 8003cf8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003cfa:	4b19      	ldr	r3, [pc, #100]	; (8003d60 <_ZL12MX_ADC1_Initv+0xac>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003d00:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <_ZL12MX_ADC1_Initv+0xac>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003d06:	4b16      	ldr	r3, [pc, #88]	; (8003d60 <_ZL12MX_ADC1_Initv+0xac>)
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d0e:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <_ZL12MX_ADC1_Initv+0xac>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003d14:	4812      	ldr	r0, [pc, #72]	; (8003d60 <_ZL12MX_ADC1_Initv+0xac>)
 8003d16:	f001 facf 	bl	80052b8 <HAL_ADC_Init>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	bf14      	ite	ne
 8003d20:	2301      	movne	r3, #1
 8003d22:	2300      	moveq	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 8003d2a:	f000 fb33 	bl	8004394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003d2e:	2304      	movs	r3, #4
 8003d30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003d32:	2301      	movs	r3, #1
 8003d34:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d3a:	463b      	mov	r3, r7
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4808      	ldr	r0, [pc, #32]	; (8003d60 <_ZL12MX_ADC1_Initv+0xac>)
 8003d40:	f001 fc7c 	bl	800563c <HAL_ADC_ConfigChannel>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	bf14      	ite	ne
 8003d4a:	2301      	movne	r3, #1
 8003d4c:	2300      	moveq	r3, #0
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8003d54:	f000 fb1e 	bl	8004394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003d58:	bf00      	nop
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	2000061c 	.word	0x2000061c
 8003d64:	40012000 	.word	0x40012000
 8003d68:	0f000001 	.word	0x0f000001

08003d6c <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8003d70:	4b21      	ldr	r3, [pc, #132]	; (8003df8 <_ZL11MX_ETH_Initv+0x8c>)
 8003d72:	4a22      	ldr	r2, [pc, #136]	; (8003dfc <_ZL11MX_ETH_Initv+0x90>)
 8003d74:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003d76:	4b22      	ldr	r3, [pc, #136]	; (8003e00 <_ZL11MX_ETH_Initv+0x94>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8003d7c:	4b20      	ldr	r3, [pc, #128]	; (8003e00 <_ZL11MX_ETH_Initv+0x94>)
 8003d7e:	2280      	movs	r2, #128	; 0x80
 8003d80:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8003d82:	4b1f      	ldr	r3, [pc, #124]	; (8003e00 <_ZL11MX_ETH_Initv+0x94>)
 8003d84:	22e1      	movs	r2, #225	; 0xe1
 8003d86:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8003d88:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <_ZL11MX_ETH_Initv+0x94>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8003d8e:	4b1c      	ldr	r3, [pc, #112]	; (8003e00 <_ZL11MX_ETH_Initv+0x94>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8003d94:	4b1a      	ldr	r3, [pc, #104]	; (8003e00 <_ZL11MX_ETH_Initv+0x94>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8003d9a:	4b17      	ldr	r3, [pc, #92]	; (8003df8 <_ZL11MX_ETH_Initv+0x8c>)
 8003d9c:	4a18      	ldr	r2, [pc, #96]	; (8003e00 <_ZL11MX_ETH_Initv+0x94>)
 8003d9e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003da0:	4b15      	ldr	r3, [pc, #84]	; (8003df8 <_ZL11MX_ETH_Initv+0x8c>)
 8003da2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003da6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003da8:	4b13      	ldr	r3, [pc, #76]	; (8003df8 <_ZL11MX_ETH_Initv+0x8c>)
 8003daa:	4a16      	ldr	r2, [pc, #88]	; (8003e04 <_ZL11MX_ETH_Initv+0x98>)
 8003dac:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003dae:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <_ZL11MX_ETH_Initv+0x8c>)
 8003db0:	4a15      	ldr	r2, [pc, #84]	; (8003e08 <_ZL11MX_ETH_Initv+0x9c>)
 8003db2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8003db4:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <_ZL11MX_ETH_Initv+0x8c>)
 8003db6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003dba:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8003dbc:	480e      	ldr	r0, [pc, #56]	; (8003df8 <_ZL11MX_ETH_Initv+0x8c>)
 8003dbe:	f002 fbdf 	bl	8006580 <HAL_ETH_Init>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf14      	ite	ne
 8003dc8:	2301      	movne	r3, #1
 8003dca:	2300      	moveq	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <_ZL11MX_ETH_Initv+0x6a>
  {
    Error_Handler();
 8003dd2:	f000 fadf 	bl	8004394 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003dd6:	2238      	movs	r2, #56	; 0x38
 8003dd8:	2100      	movs	r1, #0
 8003dda:	480c      	ldr	r0, [pc, #48]	; (8003e0c <_ZL11MX_ETH_Initv+0xa0>)
 8003ddc:	f006 fb0a 	bl	800a3f4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003de0:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <_ZL11MX_ETH_Initv+0xa0>)
 8003de2:	2221      	movs	r2, #33	; 0x21
 8003de4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003de6:	4b09      	ldr	r3, [pc, #36]	; (8003e0c <_ZL11MX_ETH_Initv+0xa0>)
 8003de8:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8003dec:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003dee:	4b07      	ldr	r3, [pc, #28]	; (8003e0c <_ZL11MX_ETH_Initv+0xa0>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8003df4:	bf00      	nop
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	200006c4 	.word	0x200006c4
 8003dfc:	40028000 	.word	0x40028000
 8003e00:	20000e98 	.word	0x20000e98
 8003e04:	2000057c 	.word	0x2000057c
 8003e08:	200004dc 	.word	0x200004dc
 8003e0c:	200004a4 	.word	0x200004a4

08003e10 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003e14:	4b23      	ldr	r3, [pc, #140]	; (8003ea4 <_ZL12MX_I2C1_Initv+0x94>)
 8003e16:	4a24      	ldr	r2, [pc, #144]	; (8003ea8 <_ZL12MX_I2C1_Initv+0x98>)
 8003e18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003e1a:	4b22      	ldr	r3, [pc, #136]	; (8003ea4 <_ZL12MX_I2C1_Initv+0x94>)
 8003e1c:	4a23      	ldr	r2, [pc, #140]	; (8003eac <_ZL12MX_I2C1_Initv+0x9c>)
 8003e1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e20:	4b20      	ldr	r3, [pc, #128]	; (8003ea4 <_ZL12MX_I2C1_Initv+0x94>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003e26:	4b1f      	ldr	r3, [pc, #124]	; (8003ea4 <_ZL12MX_I2C1_Initv+0x94>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ea4 <_ZL12MX_I2C1_Initv+0x94>)
 8003e2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e34:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <_ZL12MX_I2C1_Initv+0x94>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003e3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ea4 <_ZL12MX_I2C1_Initv+0x94>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e40:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <_ZL12MX_I2C1_Initv+0x94>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e46:	4b17      	ldr	r3, [pc, #92]	; (8003ea4 <_ZL12MX_I2C1_Initv+0x94>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003e4c:	4815      	ldr	r0, [pc, #84]	; (8003ea4 <_ZL12MX_I2C1_Initv+0x94>)
 8003e4e:	f003 f8b7 	bl	8006fc0 <HAL_I2C_Init>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	bf14      	ite	ne
 8003e58:	2301      	movne	r3, #1
 8003e5a:	2300      	moveq	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8003e62:	f000 fa97 	bl	8004394 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003e66:	2100      	movs	r1, #0
 8003e68:	480e      	ldr	r0, [pc, #56]	; (8003ea4 <_ZL12MX_I2C1_Initv+0x94>)
 8003e6a:	f003 ffb2 	bl	8007dd2 <HAL_I2CEx_ConfigAnalogFilter>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	bf14      	ite	ne
 8003e74:	2301      	movne	r3, #1
 8003e76:	2300      	moveq	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <_ZL12MX_I2C1_Initv+0x72>
  {
    Error_Handler();
 8003e7e:	f000 fa89 	bl	8004394 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003e82:	2100      	movs	r1, #0
 8003e84:	4807      	ldr	r0, [pc, #28]	; (8003ea4 <_ZL12MX_I2C1_Initv+0x94>)
 8003e86:	f003 ffe0 	bl	8007e4a <HAL_I2CEx_ConfigDigitalFilter>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	bf14      	ite	ne
 8003e90:	2301      	movne	r3, #1
 8003e92:	2300      	moveq	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <_ZL12MX_I2C1_Initv+0x8e>
  {
    Error_Handler();
 8003e9a:	f000 fa7b 	bl	8004394 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003e9e:	bf00      	nop
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20000774 	.word	0x20000774
 8003ea8:	40005400 	.word	0x40005400
 8003eac:	000186a0 	.word	0x000186a0

08003eb0 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003eb4:	4b23      	ldr	r3, [pc, #140]	; (8003f44 <_ZL12MX_I2C2_Initv+0x94>)
 8003eb6:	4a24      	ldr	r2, [pc, #144]	; (8003f48 <_ZL12MX_I2C2_Initv+0x98>)
 8003eb8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003eba:	4b22      	ldr	r3, [pc, #136]	; (8003f44 <_ZL12MX_I2C2_Initv+0x94>)
 8003ebc:	4a23      	ldr	r2, [pc, #140]	; (8003f4c <_ZL12MX_I2C2_Initv+0x9c>)
 8003ebe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ec0:	4b20      	ldr	r3, [pc, #128]	; (8003f44 <_ZL12MX_I2C2_Initv+0x94>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003ec6:	4b1f      	ldr	r3, [pc, #124]	; (8003f44 <_ZL12MX_I2C2_Initv+0x94>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ecc:	4b1d      	ldr	r3, [pc, #116]	; (8003f44 <_ZL12MX_I2C2_Initv+0x94>)
 8003ece:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ed2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ed4:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <_ZL12MX_I2C2_Initv+0x94>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003eda:	4b1a      	ldr	r3, [pc, #104]	; (8003f44 <_ZL12MX_I2C2_Initv+0x94>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ee0:	4b18      	ldr	r3, [pc, #96]	; (8003f44 <_ZL12MX_I2C2_Initv+0x94>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ee6:	4b17      	ldr	r3, [pc, #92]	; (8003f44 <_ZL12MX_I2C2_Initv+0x94>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003eec:	4815      	ldr	r0, [pc, #84]	; (8003f44 <_ZL12MX_I2C2_Initv+0x94>)
 8003eee:	f003 f867 	bl	8006fc0 <HAL_I2C_Init>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	bf14      	ite	ne
 8003ef8:	2301      	movne	r3, #1
 8003efa:	2300      	moveq	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 8003f02:	f000 fa47 	bl	8004394 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003f06:	2100      	movs	r1, #0
 8003f08:	480e      	ldr	r0, [pc, #56]	; (8003f44 <_ZL12MX_I2C2_Initv+0x94>)
 8003f0a:	f003 ff62 	bl	8007dd2 <HAL_I2CEx_ConfigAnalogFilter>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	bf14      	ite	ne
 8003f14:	2301      	movne	r3, #1
 8003f16:	2300      	moveq	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <_ZL12MX_I2C2_Initv+0x72>
  {
    Error_Handler();
 8003f1e:	f000 fa39 	bl	8004394 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003f22:	2100      	movs	r1, #0
 8003f24:	4807      	ldr	r0, [pc, #28]	; (8003f44 <_ZL12MX_I2C2_Initv+0x94>)
 8003f26:	f003 ff90 	bl	8007e4a <HAL_I2CEx_ConfigDigitalFilter>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf14      	ite	ne
 8003f30:	2301      	movne	r3, #1
 8003f32:	2300      	moveq	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <_ZL12MX_I2C2_Initv+0x8e>
  {
    Error_Handler();
 8003f3a:	f000 fa2b 	bl	8004394 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003f3e:	bf00      	nop
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	200007c8 	.word	0x200007c8
 8003f48:	40005800 	.word	0x40005800
 8003f4c:	000186a0 	.word	0x000186a0

08003f50 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f56:	f107 0308 	add.w	r3, r7, #8
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	605a      	str	r2, [r3, #4]
 8003f60:	609a      	str	r2, [r3, #8]
 8003f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f64:	463b      	mov	r3, r7
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003f6c:	4b25      	ldr	r3, [pc, #148]	; (8004004 <_ZL12MX_TIM4_Initv+0xb4>)
 8003f6e:	4a26      	ldr	r2, [pc, #152]	; (8004008 <_ZL12MX_TIM4_Initv+0xb8>)
 8003f70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = T4_PRE;
 8003f72:	4b24      	ldr	r3, [pc, #144]	; (8004004 <_ZL12MX_TIM4_Initv+0xb4>)
 8003f74:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003f78:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f7a:	4b22      	ldr	r3, [pc, #136]	; (8004004 <_ZL12MX_TIM4_Initv+0xb4>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = T4_CNT;
 8003f80:	4b20      	ldr	r3, [pc, #128]	; (8004004 <_ZL12MX_TIM4_Initv+0xb4>)
 8003f82:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003f86:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f88:	4b1e      	ldr	r3, [pc, #120]	; (8004004 <_ZL12MX_TIM4_Initv+0xb4>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f8e:	4b1d      	ldr	r3, [pc, #116]	; (8004004 <_ZL12MX_TIM4_Initv+0xb4>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003f94:	481b      	ldr	r0, [pc, #108]	; (8004004 <_ZL12MX_TIM4_Initv+0xb4>)
 8003f96:	f004 fd4d 	bl	8008a34 <HAL_TIM_Base_Init>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	bf14      	ite	ne
 8003fa0:	2301      	movne	r3, #1
 8003fa2:	2300      	moveq	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <_ZL12MX_TIM4_Initv+0x5e>
  {
    Error_Handler();
 8003faa:	f000 f9f3 	bl	8004394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003fb4:	f107 0308 	add.w	r3, r7, #8
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4812      	ldr	r0, [pc, #72]	; (8004004 <_ZL12MX_TIM4_Initv+0xb4>)
 8003fbc:	f004 ff31 	bl	8008e22 <HAL_TIM_ConfigClockSource>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	bf14      	ite	ne
 8003fc6:	2301      	movne	r3, #1
 8003fc8:	2300      	moveq	r3, #0
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <_ZL12MX_TIM4_Initv+0x84>
  {
    Error_Handler();
 8003fd0:	f000 f9e0 	bl	8004394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003fd4:	2320      	movs	r3, #32
 8003fd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003fdc:	463b      	mov	r3, r7
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4808      	ldr	r0, [pc, #32]	; (8004004 <_ZL12MX_TIM4_Initv+0xb4>)
 8003fe2:	f005 f955 	bl	8009290 <HAL_TIMEx_MasterConfigSynchronization>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	bf14      	ite	ne
 8003fec:	2301      	movne	r3, #1
 8003fee:	2300      	moveq	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <_ZL12MX_TIM4_Initv+0xaa>
  {
    Error_Handler();
 8003ff6:	f000 f9cd 	bl	8004394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003ffa:	bf00      	nop
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	2000081c 	.word	0x2000081c
 8004008:	40000800 	.word	0x40000800

0800400c <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004012:	463b      	mov	r3, r7
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800401a:	4b1a      	ldr	r3, [pc, #104]	; (8004084 <_ZL12MX_TIM6_Initv+0x78>)
 800401c:	4a1a      	ldr	r2, [pc, #104]	; (8004088 <_ZL12MX_TIM6_Initv+0x7c>)
 800401e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = T6_PRE;
 8004020:	4b18      	ldr	r3, [pc, #96]	; (8004084 <_ZL12MX_TIM6_Initv+0x78>)
 8004022:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8004026:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004028:	4b16      	ldr	r3, [pc, #88]	; (8004084 <_ZL12MX_TIM6_Initv+0x78>)
 800402a:	2200      	movs	r2, #0
 800402c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = T6_CNT;
 800402e:	4b15      	ldr	r3, [pc, #84]	; (8004084 <_ZL12MX_TIM6_Initv+0x78>)
 8004030:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004034:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004036:	4b13      	ldr	r3, [pc, #76]	; (8004084 <_ZL12MX_TIM6_Initv+0x78>)
 8004038:	2200      	movs	r2, #0
 800403a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800403c:	4811      	ldr	r0, [pc, #68]	; (8004084 <_ZL12MX_TIM6_Initv+0x78>)
 800403e:	f004 fcf9 	bl	8008a34 <HAL_TIM_Base_Init>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	bf14      	ite	ne
 8004048:	2301      	movne	r3, #1
 800404a:	2300      	moveq	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8004052:	f000 f99f 	bl	8004394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004056:	2300      	movs	r3, #0
 8004058:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800405a:	2300      	movs	r3, #0
 800405c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800405e:	463b      	mov	r3, r7
 8004060:	4619      	mov	r1, r3
 8004062:	4808      	ldr	r0, [pc, #32]	; (8004084 <_ZL12MX_TIM6_Initv+0x78>)
 8004064:	f005 f914 	bl	8009290 <HAL_TIMEx_MasterConfigSynchronization>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	bf14      	ite	ne
 800406e:	2301      	movne	r3, #1
 8004070:	2300      	moveq	r3, #0
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8004078:	f000 f98c 	bl	8004394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800407c:	bf00      	nop
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20000864 	.word	0x20000864
 8004088:	40001000 	.word	0x40001000

0800408c <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004092:	463b      	mov	r3, r7
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800409a:	4b1a      	ldr	r3, [pc, #104]	; (8004104 <_ZL12MX_TIM7_Initv+0x78>)
 800409c:	4a1a      	ldr	r2, [pc, #104]	; (8004108 <_ZL12MX_TIM7_Initv+0x7c>)
 800409e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = T7_PRE;
 80040a0:	4b18      	ldr	r3, [pc, #96]	; (8004104 <_ZL12MX_TIM7_Initv+0x78>)
 80040a2:	2253      	movs	r2, #83	; 0x53
 80040a4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040a6:	4b17      	ldr	r3, [pc, #92]	; (8004104 <_ZL12MX_TIM7_Initv+0x78>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = T7_CNT;
 80040ac:	4b15      	ldr	r3, [pc, #84]	; (8004104 <_ZL12MX_TIM7_Initv+0x78>)
 80040ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80040b2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040b4:	4b13      	ldr	r3, [pc, #76]	; (8004104 <_ZL12MX_TIM7_Initv+0x78>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80040ba:	4812      	ldr	r0, [pc, #72]	; (8004104 <_ZL12MX_TIM7_Initv+0x78>)
 80040bc:	f004 fcba 	bl	8008a34 <HAL_TIM_Base_Init>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bf14      	ite	ne
 80040c6:	2301      	movne	r3, #1
 80040c8:	2300      	moveq	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <_ZL12MX_TIM7_Initv+0x48>
  {
    Error_Handler();
 80040d0:	f000 f960 	bl	8004394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80040d4:	2320      	movs	r3, #32
 80040d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040d8:	2300      	movs	r3, #0
 80040da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80040dc:	463b      	mov	r3, r7
 80040de:	4619      	mov	r1, r3
 80040e0:	4808      	ldr	r0, [pc, #32]	; (8004104 <_ZL12MX_TIM7_Initv+0x78>)
 80040e2:	f005 f8d5 	bl	8009290 <HAL_TIMEx_MasterConfigSynchronization>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	bf14      	ite	ne
 80040ec:	2301      	movne	r3, #1
 80040ee:	2300      	moveq	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <_ZL12MX_TIM7_Initv+0x6e>
  {
    Error_Handler();
 80040f6:	f000 f94d 	bl	8004394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	200008ac 	.word	0x200008ac
 8004108:	40001400 	.word	0x40001400

0800410c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004110:	4b13      	ldr	r3, [pc, #76]	; (8004160 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004112:	4a14      	ldr	r2, [pc, #80]	; (8004164 <_ZL19MX_USART3_UART_Initv+0x58>)
 8004114:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004116:	4b12      	ldr	r3, [pc, #72]	; (8004160 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800411c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800411e:	4b10      	ldr	r3, [pc, #64]	; (8004160 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004120:	2200      	movs	r2, #0
 8004122:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004124:	4b0e      	ldr	r3, [pc, #56]	; (8004160 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004126:	2200      	movs	r2, #0
 8004128:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800412a:	4b0d      	ldr	r3, [pc, #52]	; (8004160 <_ZL19MX_USART3_UART_Initv+0x54>)
 800412c:	2200      	movs	r2, #0
 800412e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004132:	220c      	movs	r2, #12
 8004134:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004136:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004138:	2200      	movs	r2, #0
 800413a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800413c:	4b08      	ldr	r3, [pc, #32]	; (8004160 <_ZL19MX_USART3_UART_Initv+0x54>)
 800413e:	2200      	movs	r2, #0
 8004140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004142:	4807      	ldr	r0, [pc, #28]	; (8004160 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004144:	f005 f934 	bl	80093b0 <HAL_UART_Init>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	bf14      	ite	ne
 800414e:	2301      	movne	r3, #1
 8004150:	2300      	moveq	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8004158:	f000 f91c 	bl	8004394 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800415c:	bf00      	nop
 800415e:	bd80      	pop	{r7, pc}
 8004160:	200008f4 	.word	0x200008f4
 8004164:	40004800 	.word	0x40004800

08004168 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800416c:	4b16      	ldr	r3, [pc, #88]	; (80041c8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800416e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004172:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8004174:	4b14      	ldr	r3, [pc, #80]	; (80041c8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8004176:	2204      	movs	r2, #4
 8004178:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800417a:	4b13      	ldr	r3, [pc, #76]	; (80041c8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800417c:	2202      	movs	r2, #2
 800417e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004180:	4b11      	ldr	r3, [pc, #68]	; (80041c8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8004182:	2200      	movs	r2, #0
 8004184:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004186:	4b10      	ldr	r3, [pc, #64]	; (80041c8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8004188:	2202      	movs	r2, #2
 800418a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800418c:	4b0e      	ldr	r3, [pc, #56]	; (80041c8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800418e:	2201      	movs	r2, #1
 8004190:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004192:	4b0d      	ldr	r3, [pc, #52]	; (80041c8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8004194:	2200      	movs	r2, #0
 8004196:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004198:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800419a:	2200      	movs	r2, #0
 800419c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800419e:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80041a4:	4b08      	ldr	r3, [pc, #32]	; (80041c8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80041aa:	4807      	ldr	r0, [pc, #28]	; (80041c8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80041ac:	f003 fe8c 	bl	8007ec8 <HAL_PCD_Init>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	bf14      	ite	ne
 80041b6:	2301      	movne	r3, #1
 80041b8:	2300      	moveq	r3, #0
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>
  {
    Error_Handler();
 80041c0:	f000 f8e8 	bl	8004394 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80041c4:	bf00      	nop
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	20000938 	.word	0x20000938

080041cc <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80041d2:	2300      	movs	r3, #0
 80041d4:	607b      	str	r3, [r7, #4]
 80041d6:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <_ZL11MX_DMA_Initv+0x3c>)
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	4a0b      	ldr	r2, [pc, #44]	; (8004208 <_ZL11MX_DMA_Initv+0x3c>)
 80041dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041e0:	6313      	str	r3, [r2, #48]	; 0x30
 80041e2:	4b09      	ldr	r3, [pc, #36]	; (8004208 <_ZL11MX_DMA_Initv+0x3c>)
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ea:	607b      	str	r3, [r7, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80041ee:	2200      	movs	r2, #0
 80041f0:	2100      	movs	r1, #0
 80041f2:	2038      	movs	r0, #56	; 0x38
 80041f4:	f001 fdad 	bl	8005d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80041f8:	2038      	movs	r0, #56	; 0x38
 80041fa:	f001 fdc6 	bl	8005d8a <HAL_NVIC_EnableIRQ>

}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40023800 	.word	0x40023800

0800420c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08c      	sub	sp, #48	; 0x30
 8004210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004212:	f107 031c 	add.w	r3, r7, #28
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	605a      	str	r2, [r3, #4]
 800421c:	609a      	str	r2, [r3, #8]
 800421e:	60da      	str	r2, [r3, #12]
 8004220:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004222:	2300      	movs	r3, #0
 8004224:	61bb      	str	r3, [r7, #24]
 8004226:	4b57      	ldr	r3, [pc, #348]	; (8004384 <_ZL12MX_GPIO_Initv+0x178>)
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	4a56      	ldr	r2, [pc, #344]	; (8004384 <_ZL12MX_GPIO_Initv+0x178>)
 800422c:	f043 0304 	orr.w	r3, r3, #4
 8004230:	6313      	str	r3, [r2, #48]	; 0x30
 8004232:	4b54      	ldr	r3, [pc, #336]	; (8004384 <_ZL12MX_GPIO_Initv+0x178>)
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	f003 0304 	and.w	r3, r3, #4
 800423a:	61bb      	str	r3, [r7, #24]
 800423c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]
 8004242:	4b50      	ldr	r3, [pc, #320]	; (8004384 <_ZL12MX_GPIO_Initv+0x178>)
 8004244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004246:	4a4f      	ldr	r2, [pc, #316]	; (8004384 <_ZL12MX_GPIO_Initv+0x178>)
 8004248:	f043 0320 	orr.w	r3, r3, #32
 800424c:	6313      	str	r3, [r2, #48]	; 0x30
 800424e:	4b4d      	ldr	r3, [pc, #308]	; (8004384 <_ZL12MX_GPIO_Initv+0x178>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800425a:	2300      	movs	r3, #0
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	4b49      	ldr	r3, [pc, #292]	; (8004384 <_ZL12MX_GPIO_Initv+0x178>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	4a48      	ldr	r2, [pc, #288]	; (8004384 <_ZL12MX_GPIO_Initv+0x178>)
 8004264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004268:	6313      	str	r3, [r2, #48]	; 0x30
 800426a:	4b46      	ldr	r3, [pc, #280]	; (8004384 <_ZL12MX_GPIO_Initv+0x178>)
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004272:	613b      	str	r3, [r7, #16]
 8004274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	4b42      	ldr	r3, [pc, #264]	; (8004384 <_ZL12MX_GPIO_Initv+0x178>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	4a41      	ldr	r2, [pc, #260]	; (8004384 <_ZL12MX_GPIO_Initv+0x178>)
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	6313      	str	r3, [r2, #48]	; 0x30
 8004286:	4b3f      	ldr	r3, [pc, #252]	; (8004384 <_ZL12MX_GPIO_Initv+0x178>)
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004292:	2300      	movs	r3, #0
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	4b3b      	ldr	r3, [pc, #236]	; (8004384 <_ZL12MX_GPIO_Initv+0x178>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	4a3a      	ldr	r2, [pc, #232]	; (8004384 <_ZL12MX_GPIO_Initv+0x178>)
 800429c:	f043 0302 	orr.w	r3, r3, #2
 80042a0:	6313      	str	r3, [r2, #48]	; 0x30
 80042a2:	4b38      	ldr	r3, [pc, #224]	; (8004384 <_ZL12MX_GPIO_Initv+0x178>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	60bb      	str	r3, [r7, #8]
 80042ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80042ae:	2300      	movs	r3, #0
 80042b0:	607b      	str	r3, [r7, #4]
 80042b2:	4b34      	ldr	r3, [pc, #208]	; (8004384 <_ZL12MX_GPIO_Initv+0x178>)
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	4a33      	ldr	r2, [pc, #204]	; (8004384 <_ZL12MX_GPIO_Initv+0x178>)
 80042b8:	f043 0308 	orr.w	r3, r3, #8
 80042bc:	6313      	str	r3, [r2, #48]	; 0x30
 80042be:	4b31      	ldr	r3, [pc, #196]	; (8004384 <_ZL12MX_GPIO_Initv+0x178>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	607b      	str	r3, [r7, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80042ca:	2300      	movs	r3, #0
 80042cc:	603b      	str	r3, [r7, #0]
 80042ce:	4b2d      	ldr	r3, [pc, #180]	; (8004384 <_ZL12MX_GPIO_Initv+0x178>)
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	4a2c      	ldr	r2, [pc, #176]	; (8004384 <_ZL12MX_GPIO_Initv+0x178>)
 80042d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042d8:	6313      	str	r3, [r2, #48]	; 0x30
 80042da:	4b2a      	ldr	r3, [pc, #168]	; (8004384 <_ZL12MX_GPIO_Initv+0x178>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e2:	603b      	str	r3, [r7, #0]
 80042e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80042e6:	2200      	movs	r2, #0
 80042e8:	f244 0191 	movw	r1, #16529	; 0x4091
 80042ec:	4826      	ldr	r0, [pc, #152]	; (8004388 <_ZL12MX_GPIO_Initv+0x17c>)
 80042ee:	f002 fe1b 	bl	8006f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80042f2:	2200      	movs	r2, #0
 80042f4:	2140      	movs	r1, #64	; 0x40
 80042f6:	4825      	ldr	r0, [pc, #148]	; (800438c <_ZL12MX_GPIO_Initv+0x180>)
 80042f8:	f002 fe16 	bl	8006f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80042fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004302:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004306:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004308:	2300      	movs	r3, #0
 800430a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800430c:	f107 031c 	add.w	r3, r7, #28
 8004310:	4619      	mov	r1, r3
 8004312:	481f      	ldr	r0, [pc, #124]	; (8004390 <_ZL12MX_GPIO_Initv+0x184>)
 8004314:	f002 fc5c 	bl	8006bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB4 LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_4|LD2_Pin;
 8004318:	f244 0391 	movw	r3, #16529	; 0x4091
 800431c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800431e:	2301      	movs	r3, #1
 8004320:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004322:	2300      	movs	r3, #0
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004326:	2300      	movs	r3, #0
 8004328:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800432a:	f107 031c 	add.w	r3, r7, #28
 800432e:	4619      	mov	r1, r3
 8004330:	4815      	ldr	r0, [pc, #84]	; (8004388 <_ZL12MX_GPIO_Initv+0x17c>)
 8004332:	f002 fc4d 	bl	8006bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8004336:	2340      	movs	r3, #64	; 0x40
 8004338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800433a:	2301      	movs	r3, #1
 800433c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433e:	2300      	movs	r3, #0
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004342:	2300      	movs	r3, #0
 8004344:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004346:	f107 031c 	add.w	r3, r7, #28
 800434a:	4619      	mov	r1, r3
 800434c:	480f      	ldr	r0, [pc, #60]	; (800438c <_ZL12MX_GPIO_Initv+0x180>)
 800434e:	f002 fc3f 	bl	8006bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004356:	2300      	movs	r3, #0
 8004358:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435a:	2300      	movs	r3, #0
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800435e:	f107 031c 	add.w	r3, r7, #28
 8004362:	4619      	mov	r1, r3
 8004364:	4809      	ldr	r0, [pc, #36]	; (800438c <_ZL12MX_GPIO_Initv+0x180>)
 8004366:	f002 fc33 	bl	8006bd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800436a:	2200      	movs	r2, #0
 800436c:	2100      	movs	r1, #0
 800436e:	2028      	movs	r0, #40	; 0x28
 8004370:	f001 fcef 	bl	8005d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004374:	2028      	movs	r0, #40	; 0x28
 8004376:	f001 fd08 	bl	8005d8a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800437a:	bf00      	nop
 800437c:	3730      	adds	r7, #48	; 0x30
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40023800 	.word	0x40023800
 8004388:	40020400 	.word	0x40020400
 800438c:	40021800 	.word	0x40021800
 8004390:	40020800 	.word	0x40020800

08004394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004398:	b672      	cpsid	i
}
 800439a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800439c:	e7fe      	b.n	800439c <Error_Handler+0x8>

0800439e <_ZNSt5dequeIP5EventSaIS1_EEC1Ev>:
      deque() = default;
 800439e:	b580      	push	{r7, lr}
 80043a0:	b082      	sub	sp, #8
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 f84b 	bl	8004444 <_ZNSt11_Deque_baseIP5EventSaIS1_EEC1Ev>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4618      	mov	r0, r3
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEEC1IS4_vEEv>:
	queue()
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
	: c() { }
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4618      	mov	r0, r3
 80043c4:	2328      	movs	r3, #40	; 0x28
 80043c6:	461a      	mov	r2, r3
 80043c8:	2100      	movs	r1, #0
 80043ca:	f006 f813 	bl	800a3f4 <memset>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff ffe4 	bl	800439e <_ZNSt5dequeIP5EventSaIS1_EEC1Ev>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4618      	mov	r0, r3
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <_ZNKSt5queueIP5EventSt5dequeIS1_SaIS1_EEE5emptyEv>:
      empty() const
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 f882 	bl	80044f4 <_ZNKSt5dequeIP5EventSaIS1_EE5emptyEv>
 80043f0:	4603      	mov	r3, r0
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b082      	sub	sp, #8
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4618      	mov	r0, r3
 8004406:	f000 f887 	bl	8004518 <_ZNSt5dequeIP5EventSaIS1_EE9pop_frontEv>
      }
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEE5frontEv>:
      front()
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
	return c.front();
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4618      	mov	r0, r3
 800441e:	f000 f89e 	bl	800455e <_ZNSt5dequeIP5EventSaIS1_EE5frontEv>
 8004422:	4603      	mov	r3, r0
      }
 8004424:	4618      	mov	r0, r3
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <_ZNSt11_Deque_baseIP5EventSaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f8b6 	bl	80045a6 <_ZNSaIP5EventED1Ev>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <_ZNSt11_Deque_baseIP5EventSaIS1_EEC1Ev>:
      _Deque_base()
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4618      	mov	r0, r3
 8004450:	f000 f899 	bl	8004586 <_ZNSt11_Deque_baseIP5EventSaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8004454:	2100      	movs	r1, #0
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f8b1 	bl	80045be <_ZNSt11_Deque_baseIP5EventSaIS1_EE17_M_initialize_mapEj>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <_ZNSt11_Deque_baseIP5EventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8004466:	b580      	push	{r7, lr}
 8004468:	b082      	sub	sp, #8
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d010      	beq.n	8004498 <_ZNSt11_Deque_baseIP5EventSaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800447e:	3304      	adds	r3, #4
 8004480:	461a      	mov	r2, r3
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f8fe 	bl	8004684 <_ZNSt11_Deque_baseIP5EventSaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6819      	ldr	r1, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	461a      	mov	r2, r3
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fd fd46 	bl	8001f24 <_ZNSt11_Deque_baseIP5EventSaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff ffc6 	bl	800442c <_ZNSt11_Deque_baseIP5EventSaIS1_EE11_Deque_implD1Ev>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4618      	mov	r0, r3
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <_ZNSt5dequeIP5EventSaIS1_EED1Ev>:
      ~deque()
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b08a      	sub	sp, #40	; 0x28
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80044b2:	f107 0308 	add.w	r3, r7, #8
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 f8fe 	bl	80046ba <_ZNSt5dequeIP5EventSaIS1_EE5beginEv>
 80044be:	f107 0318 	add.w	r3, r7, #24
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 f907 	bl	80046d8 <_ZNSt5dequeIP5EventSaIS1_EE3endEv>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 f912 	bl	80046f6 <_ZNSt11_Deque_baseIP5EventSaIS1_EE19_M_get_Tp_allocatorEv>
 80044d2:	4603      	mov	r3, r0
 80044d4:	f107 0218 	add.w	r2, r7, #24
 80044d8:	f107 0108 	add.w	r1, r7, #8
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f931 	bl	8004744 <_ZNSt5dequeIP5EventSaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff ffbe 	bl	8004466 <_ZNSt11_Deque_baseIP5EventSaIS1_EED1Ev>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4618      	mov	r0, r3
 80044ee:	3728      	adds	r7, #40	; 0x28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <_ZNKSt5dequeIP5EventSaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f103 0218 	add.w	r2, r3, #24
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3308      	adds	r3, #8
 8004506:	4619      	mov	r1, r3
 8004508:	4610      	mov	r0, r2
 800450a:	f000 f928 	bl	800475e <_ZSteqRKSt15_Deque_iteratorIP5EventRS1_PS1_ES6_>
 800450e:	4603      	mov	r3, r0
 8004510:	4618      	mov	r0, r3
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <_ZNSt5dequeIP5EventSaIS1_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 800452a:	429a      	cmp	r2, r3
 800452c:	d010      	beq.n	8004550 <_ZNSt5dequeIP5EventSaIS1_EE9pop_frontEv+0x38>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4618      	mov	r0, r3
 8004532:	f000 f8e0 	bl	80046f6 <_ZNSt11_Deque_baseIP5EventSaIS1_EE19_M_get_Tp_allocatorEv>
 8004536:	4602      	mov	r2, r0
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	4619      	mov	r1, r3
 800453e:	4610      	mov	r0, r2
 8004540:	f000 f921 	bl	8004786 <_ZNSt16allocator_traitsISaIP5EventEE7destroyIS1_EEvRS2_PT_>
	    ++this->_M_impl._M_start._M_cur;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	1d1a      	adds	r2, r3, #4
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	609a      	str	r2, [r3, #8]
      }
 800454e:	e002      	b.n	8004556 <_ZNSt5dequeIP5EventSaIS1_EE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f925 	bl	80047a0 <_ZNSt5dequeIP5EventSaIS1_EE16_M_pop_front_auxEv>
      }
 8004556:	bf00      	nop
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <_ZNSt5dequeIP5EventSaIS1_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 800455e:	b580      	push	{r7, lr}
 8004560:	b086      	sub	sp, #24
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
	return *begin();
 8004566:	f107 0308 	add.w	r3, r7, #8
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	4618      	mov	r0, r3
 800456e:	f000 f8a4 	bl	80046ba <_ZNSt5dequeIP5EventSaIS1_EE5beginEv>
 8004572:	f107 0308 	add.w	r3, r7, #8
 8004576:	4618      	mov	r0, r3
 8004578:	f000 f93a 	bl	80047f0 <_ZNKSt15_Deque_iteratorIP5EventRS1_PS1_EdeEv>
 800457c:	4603      	mov	r3, r0
      }
 800457e:	4618      	mov	r0, r3
 8004580:	3718      	adds	r7, #24
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <_ZNSt11_Deque_baseIP5EventSaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8004586:	b580      	push	{r7, lr}
 8004588:	b082      	sub	sp, #8
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f93a 	bl	8004808 <_ZNSaIP5EventEC1Ev>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4618      	mov	r0, r3
 8004598:	f000 f942 	bl	8004820 <_ZNSt11_Deque_baseIP5EventSaIS1_EE16_Deque_impl_dataC1Ev>
	{ }
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4618      	mov	r0, r3
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <_ZNSaIP5EventED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b082      	sub	sp, #8
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f94f 	bl	8004852 <_ZN9__gnu_cxx13new_allocatorIP5EventED1Ev>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4618      	mov	r0, r3
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <_ZNSt11_Deque_baseIP5EventSaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80045be:	b590      	push	{r4, r7, lr}
 80045c0:	b089      	sub	sp, #36	; 0x24
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 80045c8:	2004      	movs	r0, #4
 80045ca:	f7fd f933 	bl	8001834 <_ZSt16__deque_buf_sizej>
 80045ce:	4602      	mov	r2, r0
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80045d6:	3301      	adds	r3, #1
 80045d8:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80045da:	2308      	movs	r3, #8
 80045dc:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	3302      	adds	r3, #2
 80045e2:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80045e4:	f107 0210 	add.w	r2, r7, #16
 80045e8:	f107 030c 	add.w	r3, r7, #12
 80045ec:	4611      	mov	r1, r2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fd fc67 	bl	8001ec2 <_ZSt3maxIjERKT_S2_S2_>
 80045f4:	4603      	mov	r3, r0
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	4619      	mov	r1, r3
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7fd fc71 	bl	8001eea <_ZNSt11_Deque_baseIP5EventSaIS1_EE15_M_allocate_mapEj>
 8004608:	4602      	mov	r2, r0
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6859      	ldr	r1, [r3, #4]
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	1acb      	subs	r3, r1, r3
 800461a:	085b      	lsrs	r3, r3, #1
 800461c:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 800461e:	4413      	add	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	4413      	add	r3, r2
 800462a:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	69b9      	ldr	r1, [r7, #24]
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f919 	bl	8004868 <_ZNSt11_Deque_baseIP5EventSaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3308      	adds	r3, #8
 800463a:	69b9      	ldr	r1, [r7, #24]
 800463c:	4618      	mov	r0, r3
 800463e:	f7fd fad5 	bl	8001bec <_ZNSt15_Deque_iteratorIP5EventRS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f103 0218 	add.w	r2, r3, #24
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	3b04      	subs	r3, #4
 800464c:	4619      	mov	r1, r3
 800464e:	4610      	mov	r0, r2
 8004650:	f7fd facc 	bl	8001bec <_ZNSt15_Deque_iteratorIP5EventRS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8004660:	2004      	movs	r0, #4
 8004662:	f7fd f8e7 	bl	8001834 <_ZSt16__deque_buf_sizej>
 8004666:	4602      	mov	r2, r0
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	fbb3 f1f2 	udiv	r1, r3, r2
 800466e:	fb01 f202 	mul.w	r2, r1, r2
 8004672:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	619a      	str	r2, [r3, #24]
    }
 800467c:	bf00      	nop
 800467e:	3724      	adds	r7, #36	; 0x24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd90      	pop	{r4, r7, pc}

08004684 <_ZNSt11_Deque_baseIP5EventSaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	e008      	b.n	80046a8 <_ZNSt11_Deque_baseIP5EventSaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x24>
	_M_deallocate_node(*__n);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4619      	mov	r1, r3
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f8fe 	bl	800489e <_ZNSt11_Deque_baseIP5EventSaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	3304      	adds	r3, #4
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d3f2      	bcc.n	8004696 <_ZNSt11_Deque_baseIP5EventSaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x12>
    }
 80046b0:	bf00      	nop
 80046b2:	bf00      	nop
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <_ZNSt5dequeIP5EventSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b082      	sub	sp, #8
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	3308      	adds	r3, #8
 80046c8:	4619      	mov	r1, r3
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f81e 	bl	800470c <_ZNSt15_Deque_iteratorIP5EventRS1_PS1_EC1ERKS4_>
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <_ZNSt5dequeIP5EventSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	3318      	adds	r3, #24
 80046e6:	4619      	mov	r1, r3
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f80f 	bl	800470c <_ZNSt15_Deque_iteratorIP5EventRS1_PS1_EC1ERKS4_>
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <_ZNSt11_Deque_baseIP5EventSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <_ZNSt15_Deque_iteratorIP5EventRS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	609a      	str	r2, [r3, #8]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	60da      	str	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4618      	mov	r0, r3
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <_ZNSt5dequeIP5EventSaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
      _M_destroy_data(iterator __first, iterator __last,
 8004744:	b480      	push	{r7}
 8004746:	b08d      	sub	sp, #52	; 0x34
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	603b      	str	r3, [r7, #0]
      }
 8004752:	bf00      	nop
 8004754:	3734      	adds	r7, #52	; 0x34
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <_ZSteqRKSt15_Deque_iteratorIP5EventRS1_PS1_ES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	bf0c      	ite	eq
 8004774:	2301      	moveq	r3, #1
 8004776:	2300      	movne	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	4618      	mov	r0, r3
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <_ZNSt16allocator_traitsISaIP5EventEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8004790:	6839      	ldr	r1, [r7, #0]
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f896 	bl	80048c4 <_ZN9__gnu_cxx13new_allocatorIP5EventE7destroyIS2_EEvPT_>
	}
 8004798:	bf00      	nop
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <_ZNSt5dequeIP5EventSaIS1_EE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff ffa3 	bl	80046f6 <_ZNSt11_Deque_baseIP5EventSaIS1_EE19_M_get_Tp_allocatorEv>
 80047b0:	4602      	mov	r2, r0
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	4619      	mov	r1, r3
 80047b8:	4610      	mov	r0, r2
 80047ba:	f7ff ffe4 	bl	8004786 <_ZNSt16allocator_traitsISaIP5EventEE7destroyIS1_EEvRS2_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	4619      	mov	r1, r3
 80047c6:	4610      	mov	r0, r2
 80047c8:	f000 f869 	bl	800489e <_ZNSt11_Deque_baseIP5EventSaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f103 0208 	add.w	r2, r3, #8
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	3304      	adds	r3, #4
 80047d8:	4619      	mov	r1, r3
 80047da:	4610      	mov	r0, r2
 80047dc:	f7fd fa06 	bl	8001bec <_ZNSt15_Deque_iteratorIP5EventRS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	609a      	str	r2, [r3, #8]
    }
 80047e8:	bf00      	nop
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <_ZNKSt15_Deque_iteratorIP5EventRS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <_ZNSaIP5EventEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f862 	bl	80048da <_ZN9__gnu_cxx13new_allocatorIP5EventEC1Ev>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4618      	mov	r0, r3
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <_ZNSt11_Deque_baseIP5EventSaIS1_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	605a      	str	r2, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	3308      	adds	r3, #8
 8004838:	4618      	mov	r0, r3
 800483a:	f000 f859 	bl	80048f0 <_ZNSt15_Deque_iteratorIP5EventRS1_PS1_EC1Ev>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3318      	adds	r3, #24
 8004842:	4618      	mov	r0, r3
 8004844:	f000 f854 	bl	80048f0 <_ZNSt15_Deque_iteratorIP5EventRS1_PS1_EC1Ev>
	{ }
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <_ZN9__gnu_cxx13new_allocatorIP5EventED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4618      	mov	r0, r3
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <_ZNSt11_Deque_baseIP5EventSaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	e008      	b.n	800488c <_ZNSt11_Deque_baseIP5EventSaIS1_EE15_M_create_nodesEPPS1_S5_+0x24>
	    *__cur = this->_M_allocate_node();
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f7fd f9a4 	bl	8001bc8 <_ZNSt11_Deque_baseIP5EventSaIS1_EE16_M_allocate_nodeEv>
 8004880:	4602      	mov	r2, r0
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	3304      	adds	r3, #4
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	429a      	cmp	r2, r3
 8004892:	d3f2      	bcc.n	800487a <_ZNSt11_Deque_baseIP5EventSaIS1_EE15_M_create_nodesEPPS1_S5_+0x12>
    }
 8004894:	bf00      	nop
 8004896:	bf00      	nop
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <_ZNSt11_Deque_baseIP5EventSaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 800489e:	b590      	push	{r4, r7, lr}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80048a8:	687c      	ldr	r4, [r7, #4]
 80048aa:	2004      	movs	r0, #4
 80048ac:	f7fc ffc2 	bl	8001834 <_ZSt16__deque_buf_sizej>
 80048b0:	4603      	mov	r3, r0
 80048b2:	461a      	mov	r2, r3
 80048b4:	6839      	ldr	r1, [r7, #0]
 80048b6:	4620      	mov	r0, r4
 80048b8:	f000 f831 	bl	800491e <_ZNSt16allocator_traitsISaIP5EventEE10deallocateERS2_PS1_j>
      }
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd90      	pop	{r4, r7, pc}

080048c4 <_ZN9__gnu_cxx13new_allocatorIP5EventE7destroyIS2_EEvPT_>:
	destroy(_Up* __p)
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <_ZN9__gnu_cxx13new_allocatorIP5EventEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4618      	mov	r0, r3
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <_ZNSt15_Deque_iteratorIP5EventRS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	605a      	str	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	609a      	str	r2, [r3, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	60da      	str	r2, [r3, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <_ZNSt16allocator_traitsISaIP5EventEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800491e:	b580      	push	{r7, lr}
 8004920:	b084      	sub	sp, #16
 8004922:	af00      	add	r7, sp, #0
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 f804 	bl	800493c <_ZN9__gnu_cxx13new_allocatorIP5EventE10deallocateEPS2_j>
 8004934:	bf00      	nop
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <_ZN9__gnu_cxx13new_allocatorIP5EventE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4619      	mov	r1, r3
 800494e:	68b8      	ldr	r0, [r7, #8]
 8004950:	f005 fbf2 	bl	800a138 <_ZdlPvj>
      }
 8004954:	bf00      	nop
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEED1Ev>:
    class queue
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff fd9f 	bl	80044aa <_ZNSt5dequeIP5EventSaIS1_EED1Ev>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d107      	bne.n	8004998 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800498e:	4293      	cmp	r3, r2
 8004990:	d102      	bne.n	8004998 <_Z41__static_initialization_and_destruction_0ii+0x20>
queue<Event*> event_queue; 		// erstellt eine queue mit piontern zu events...
 8004992:	4809      	ldr	r0, [pc, #36]	; (80049b8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004994:	f7ff fd10 	bl	80043b8 <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEEC1IS4_vEEv>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d107      	bne.n	80049ae <_Z41__static_initialization_and_destruction_0ii+0x36>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d102      	bne.n	80049ae <_Z41__static_initialization_and_destruction_0ii+0x36>
 80049a8:	4803      	ldr	r0, [pc, #12]	; (80049b8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80049aa:	f7ff ffd7 	bl	800495c <_ZNSt5queueIP5EventSt5dequeIS1_SaIS1_EEED1Ev>
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20000e54 	.word	0x20000e54

080049bc <_GLOBAL__sub_I_TxConfig>:
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
 80049c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049c4:	2001      	movs	r0, #1
 80049c6:	f7ff ffd7 	bl	8004978 <_Z41__static_initialization_and_destruction_0ii>
 80049ca:	bd80      	pop	{r7, pc}

080049cc <_GLOBAL__sub_D_TxConfig>:
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049d4:	2000      	movs	r0, #0
 80049d6:	f7ff ffcf 	bl	8004978 <_Z41__static_initialization_and_destruction_0ii>
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049e2:	2300      	movs	r3, #0
 80049e4:	607b      	str	r3, [r7, #4]
 80049e6:	4b10      	ldr	r3, [pc, #64]	; (8004a28 <HAL_MspInit+0x4c>)
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	4a0f      	ldr	r2, [pc, #60]	; (8004a28 <HAL_MspInit+0x4c>)
 80049ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049f0:	6453      	str	r3, [r2, #68]	; 0x44
 80049f2:	4b0d      	ldr	r3, [pc, #52]	; (8004a28 <HAL_MspInit+0x4c>)
 80049f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049fa:	607b      	str	r3, [r7, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049fe:	2300      	movs	r3, #0
 8004a00:	603b      	str	r3, [r7, #0]
 8004a02:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <HAL_MspInit+0x4c>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	4a08      	ldr	r2, [pc, #32]	; (8004a28 <HAL_MspInit+0x4c>)
 8004a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a0e:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <HAL_MspInit+0x4c>)
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40023800 	.word	0x40023800

08004a2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08a      	sub	sp, #40	; 0x28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a34:	f107 0314 	add.w	r3, r7, #20
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	605a      	str	r2, [r3, #4]
 8004a3e:	609a      	str	r2, [r3, #8]
 8004a40:	60da      	str	r2, [r3, #12]
 8004a42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a2f      	ldr	r2, [pc, #188]	; (8004b08 <HAL_ADC_MspInit+0xdc>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d157      	bne.n	8004afe <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004a4e:	2300      	movs	r3, #0
 8004a50:	613b      	str	r3, [r7, #16]
 8004a52:	4b2e      	ldr	r3, [pc, #184]	; (8004b0c <HAL_ADC_MspInit+0xe0>)
 8004a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a56:	4a2d      	ldr	r2, [pc, #180]	; (8004b0c <HAL_ADC_MspInit+0xe0>)
 8004a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a5e:	4b2b      	ldr	r3, [pc, #172]	; (8004b0c <HAL_ADC_MspInit+0xe0>)
 8004a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a66:	613b      	str	r3, [r7, #16]
 8004a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	4b27      	ldr	r3, [pc, #156]	; (8004b0c <HAL_ADC_MspInit+0xe0>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	4a26      	ldr	r2, [pc, #152]	; (8004b0c <HAL_ADC_MspInit+0xe0>)
 8004a74:	f043 0301 	orr.w	r3, r3, #1
 8004a78:	6313      	str	r3, [r2, #48]	; 0x30
 8004a7a:	4b24      	ldr	r3, [pc, #144]	; (8004b0c <HAL_ADC_MspInit+0xe0>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004a86:	2310      	movs	r3, #16
 8004a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a92:	f107 0314 	add.w	r3, r7, #20
 8004a96:	4619      	mov	r1, r3
 8004a98:	481d      	ldr	r0, [pc, #116]	; (8004b10 <HAL_ADC_MspInit+0xe4>)
 8004a9a:	f002 f899 	bl	8006bd0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004a9e:	4b1d      	ldr	r3, [pc, #116]	; (8004b14 <HAL_ADC_MspInit+0xe8>)
 8004aa0:	4a1d      	ldr	r2, [pc, #116]	; (8004b18 <HAL_ADC_MspInit+0xec>)
 8004aa2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004aa4:	4b1b      	ldr	r3, [pc, #108]	; (8004b14 <HAL_ADC_MspInit+0xe8>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004aaa:	4b1a      	ldr	r3, [pc, #104]	; (8004b14 <HAL_ADC_MspInit+0xe8>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ab0:	4b18      	ldr	r3, [pc, #96]	; (8004b14 <HAL_ADC_MspInit+0xe8>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004ab6:	4b17      	ldr	r3, [pc, #92]	; (8004b14 <HAL_ADC_MspInit+0xe8>)
 8004ab8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004abc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004abe:	4b15      	ldr	r3, [pc, #84]	; (8004b14 <HAL_ADC_MspInit+0xe8>)
 8004ac0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ac4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004ac6:	4b13      	ldr	r3, [pc, #76]	; (8004b14 <HAL_ADC_MspInit+0xe8>)
 8004ac8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004acc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004ace:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <HAL_ADC_MspInit+0xe8>)
 8004ad0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ad4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004ad6:	4b0f      	ldr	r3, [pc, #60]	; (8004b14 <HAL_ADC_MspInit+0xe8>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004adc:	4b0d      	ldr	r3, [pc, #52]	; (8004b14 <HAL_ADC_MspInit+0xe8>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004ae2:	480c      	ldr	r0, [pc, #48]	; (8004b14 <HAL_ADC_MspInit+0xe8>)
 8004ae4:	f001 f96c 	bl	8005dc0 <HAL_DMA_Init>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004aee:	f7ff fc51 	bl	8004394 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a07      	ldr	r2, [pc, #28]	; (8004b14 <HAL_ADC_MspInit+0xe8>)
 8004af6:	639a      	str	r2, [r3, #56]	; 0x38
 8004af8:	4a06      	ldr	r2, [pc, #24]	; (8004b14 <HAL_ADC_MspInit+0xe8>)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004afe:	bf00      	nop
 8004b00:	3728      	adds	r7, #40	; 0x28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40012000 	.word	0x40012000
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	40020000 	.word	0x40020000
 8004b14:	20000664 	.word	0x20000664
 8004b18:	40026410 	.word	0x40026410

08004b1c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08e      	sub	sp, #56	; 0x38
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	605a      	str	r2, [r3, #4]
 8004b2e:	609a      	str	r2, [r3, #8]
 8004b30:	60da      	str	r2, [r3, #12]
 8004b32:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a55      	ldr	r2, [pc, #340]	; (8004c90 <HAL_ETH_MspInit+0x174>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	f040 80a4 	bne.w	8004c88 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004b40:	2300      	movs	r3, #0
 8004b42:	623b      	str	r3, [r7, #32]
 8004b44:	4b53      	ldr	r3, [pc, #332]	; (8004c94 <HAL_ETH_MspInit+0x178>)
 8004b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b48:	4a52      	ldr	r2, [pc, #328]	; (8004c94 <HAL_ETH_MspInit+0x178>)
 8004b4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8004b50:	4b50      	ldr	r3, [pc, #320]	; (8004c94 <HAL_ETH_MspInit+0x178>)
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b58:	623b      	str	r3, [r7, #32]
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	61fb      	str	r3, [r7, #28]
 8004b60:	4b4c      	ldr	r3, [pc, #304]	; (8004c94 <HAL_ETH_MspInit+0x178>)
 8004b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b64:	4a4b      	ldr	r2, [pc, #300]	; (8004c94 <HAL_ETH_MspInit+0x178>)
 8004b66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8004b6c:	4b49      	ldr	r3, [pc, #292]	; (8004c94 <HAL_ETH_MspInit+0x178>)
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61bb      	str	r3, [r7, #24]
 8004b7c:	4b45      	ldr	r3, [pc, #276]	; (8004c94 <HAL_ETH_MspInit+0x178>)
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	4a44      	ldr	r2, [pc, #272]	; (8004c94 <HAL_ETH_MspInit+0x178>)
 8004b82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b86:	6313      	str	r3, [r2, #48]	; 0x30
 8004b88:	4b42      	ldr	r3, [pc, #264]	; (8004c94 <HAL_ETH_MspInit+0x178>)
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b90:	61bb      	str	r3, [r7, #24]
 8004b92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	4b3e      	ldr	r3, [pc, #248]	; (8004c94 <HAL_ETH_MspInit+0x178>)
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	4a3d      	ldr	r2, [pc, #244]	; (8004c94 <HAL_ETH_MspInit+0x178>)
 8004b9e:	f043 0304 	orr.w	r3, r3, #4
 8004ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ba4:	4b3b      	ldr	r3, [pc, #236]	; (8004c94 <HAL_ETH_MspInit+0x178>)
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	4b37      	ldr	r3, [pc, #220]	; (8004c94 <HAL_ETH_MspInit+0x178>)
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	4a36      	ldr	r2, [pc, #216]	; (8004c94 <HAL_ETH_MspInit+0x178>)
 8004bba:	f043 0301 	orr.w	r3, r3, #1
 8004bbe:	6313      	str	r3, [r2, #48]	; 0x30
 8004bc0:	4b34      	ldr	r3, [pc, #208]	; (8004c94 <HAL_ETH_MspInit+0x178>)
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	613b      	str	r3, [r7, #16]
 8004bca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	4b30      	ldr	r3, [pc, #192]	; (8004c94 <HAL_ETH_MspInit+0x178>)
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd4:	4a2f      	ldr	r2, [pc, #188]	; (8004c94 <HAL_ETH_MspInit+0x178>)
 8004bd6:	f043 0302 	orr.w	r3, r3, #2
 8004bda:	6313      	str	r3, [r2, #48]	; 0x30
 8004bdc:	4b2d      	ldr	r3, [pc, #180]	; (8004c94 <HAL_ETH_MspInit+0x178>)
 8004bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004be8:	2300      	movs	r3, #0
 8004bea:	60bb      	str	r3, [r7, #8]
 8004bec:	4b29      	ldr	r3, [pc, #164]	; (8004c94 <HAL_ETH_MspInit+0x178>)
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	4a28      	ldr	r2, [pc, #160]	; (8004c94 <HAL_ETH_MspInit+0x178>)
 8004bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8004bf8:	4b26      	ldr	r3, [pc, #152]	; (8004c94 <HAL_ETH_MspInit+0x178>)
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004c04:	2332      	movs	r3, #50	; 0x32
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c10:	2303      	movs	r3, #3
 8004c12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c14:	230b      	movs	r3, #11
 8004c16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	481e      	ldr	r0, [pc, #120]	; (8004c98 <HAL_ETH_MspInit+0x17c>)
 8004c20:	f001 ffd6 	bl	8006bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004c24:	2386      	movs	r3, #134	; 0x86
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c28:	2302      	movs	r3, #2
 8004c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c30:	2303      	movs	r3, #3
 8004c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c34:	230b      	movs	r3, #11
 8004c36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4817      	ldr	r0, [pc, #92]	; (8004c9c <HAL_ETH_MspInit+0x180>)
 8004c40:	f001 ffc6 	bl	8006bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c52:	2303      	movs	r3, #3
 8004c54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c56:	230b      	movs	r3, #11
 8004c58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c5e:	4619      	mov	r1, r3
 8004c60:	480f      	ldr	r0, [pc, #60]	; (8004ca0 <HAL_ETH_MspInit+0x184>)
 8004c62:	f001 ffb5 	bl	8006bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004c66:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c70:	2300      	movs	r3, #0
 8004c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c74:	2303      	movs	r3, #3
 8004c76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c78:	230b      	movs	r3, #11
 8004c7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c80:	4619      	mov	r1, r3
 8004c82:	4808      	ldr	r0, [pc, #32]	; (8004ca4 <HAL_ETH_MspInit+0x188>)
 8004c84:	f001 ffa4 	bl	8006bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8004c88:	bf00      	nop
 8004c8a:	3738      	adds	r7, #56	; 0x38
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40028000 	.word	0x40028000
 8004c94:	40023800 	.word	0x40023800
 8004c98:	40020800 	.word	0x40020800
 8004c9c:	40020000 	.word	0x40020000
 8004ca0:	40020400 	.word	0x40020400
 8004ca4:	40021800 	.word	0x40021800

08004ca8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08c      	sub	sp, #48	; 0x30
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cb0:	f107 031c 	add.w	r3, r7, #28
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	605a      	str	r2, [r3, #4]
 8004cba:	609a      	str	r2, [r3, #8]
 8004cbc:	60da      	str	r2, [r3, #12]
 8004cbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a32      	ldr	r2, [pc, #200]	; (8004d90 <HAL_I2C_MspInit+0xe8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d12d      	bne.n	8004d26 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cca:	2300      	movs	r3, #0
 8004ccc:	61bb      	str	r3, [r7, #24]
 8004cce:	4b31      	ldr	r3, [pc, #196]	; (8004d94 <HAL_I2C_MspInit+0xec>)
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	4a30      	ldr	r2, [pc, #192]	; (8004d94 <HAL_I2C_MspInit+0xec>)
 8004cd4:	f043 0302 	orr.w	r3, r3, #2
 8004cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cda:	4b2e      	ldr	r3, [pc, #184]	; (8004d94 <HAL_I2C_MspInit+0xec>)
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	61bb      	str	r3, [r7, #24]
 8004ce4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004ce6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cec:	2312      	movs	r3, #18
 8004cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004cf8:	2304      	movs	r3, #4
 8004cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cfc:	f107 031c 	add.w	r3, r7, #28
 8004d00:	4619      	mov	r1, r3
 8004d02:	4825      	ldr	r0, [pc, #148]	; (8004d98 <HAL_I2C_MspInit+0xf0>)
 8004d04:	f001 ff64 	bl	8006bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004d08:	2300      	movs	r3, #0
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	4b21      	ldr	r3, [pc, #132]	; (8004d94 <HAL_I2C_MspInit+0xec>)
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d10:	4a20      	ldr	r2, [pc, #128]	; (8004d94 <HAL_I2C_MspInit+0xec>)
 8004d12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d16:	6413      	str	r3, [r2, #64]	; 0x40
 8004d18:	4b1e      	ldr	r3, [pc, #120]	; (8004d94 <HAL_I2C_MspInit+0xec>)
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d20:	617b      	str	r3, [r7, #20]
 8004d22:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004d24:	e030      	b.n	8004d88 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1c      	ldr	r2, [pc, #112]	; (8004d9c <HAL_I2C_MspInit+0xf4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d12b      	bne.n	8004d88 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d30:	2300      	movs	r3, #0
 8004d32:	613b      	str	r3, [r7, #16]
 8004d34:	4b17      	ldr	r3, [pc, #92]	; (8004d94 <HAL_I2C_MspInit+0xec>)
 8004d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d38:	4a16      	ldr	r2, [pc, #88]	; (8004d94 <HAL_I2C_MspInit+0xec>)
 8004d3a:	f043 0320 	orr.w	r3, r3, #32
 8004d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8004d40:	4b14      	ldr	r3, [pc, #80]	; (8004d94 <HAL_I2C_MspInit+0xec>)
 8004d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	613b      	str	r3, [r7, #16]
 8004d4a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d50:	2312      	movs	r3, #18
 8004d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d54:	2300      	movs	r3, #0
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004d5c:	2304      	movs	r3, #4
 8004d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004d60:	f107 031c 	add.w	r3, r7, #28
 8004d64:	4619      	mov	r1, r3
 8004d66:	480e      	ldr	r0, [pc, #56]	; (8004da0 <HAL_I2C_MspInit+0xf8>)
 8004d68:	f001 ff32 	bl	8006bd0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	4b08      	ldr	r3, [pc, #32]	; (8004d94 <HAL_I2C_MspInit+0xec>)
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	4a07      	ldr	r2, [pc, #28]	; (8004d94 <HAL_I2C_MspInit+0xec>)
 8004d76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d7a:	6413      	str	r3, [r2, #64]	; 0x40
 8004d7c:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <HAL_I2C_MspInit+0xec>)
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	68fb      	ldr	r3, [r7, #12]
}
 8004d88:	bf00      	nop
 8004d8a:	3730      	adds	r7, #48	; 0x30
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40005400 	.word	0x40005400
 8004d94:	40023800 	.word	0x40023800
 8004d98:	40020400 	.word	0x40020400
 8004d9c:	40005800 	.word	0x40005800
 8004da0:	40021400 	.word	0x40021400

08004da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a2a      	ldr	r2, [pc, #168]	; (8004e5c <HAL_TIM_Base_MspInit+0xb8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d116      	bne.n	8004de4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]
 8004dba:	4b29      	ldr	r3, [pc, #164]	; (8004e60 <HAL_TIM_Base_MspInit+0xbc>)
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	4a28      	ldr	r2, [pc, #160]	; (8004e60 <HAL_TIM_Base_MspInit+0xbc>)
 8004dc0:	f043 0304 	orr.w	r3, r3, #4
 8004dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8004dc6:	4b26      	ldr	r3, [pc, #152]	; (8004e60 <HAL_TIM_Base_MspInit+0xbc>)
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	201e      	movs	r0, #30
 8004dd8:	f000 ffbb 	bl	8005d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004ddc:	201e      	movs	r0, #30
 8004dde:	f000 ffd4 	bl	8005d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8004de2:	e036      	b.n	8004e52 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1e      	ldr	r2, [pc, #120]	; (8004e64 <HAL_TIM_Base_MspInit+0xc0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d116      	bne.n	8004e1c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004dee:	2300      	movs	r3, #0
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	4b1b      	ldr	r3, [pc, #108]	; (8004e60 <HAL_TIM_Base_MspInit+0xbc>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	4a1a      	ldr	r2, [pc, #104]	; (8004e60 <HAL_TIM_Base_MspInit+0xbc>)
 8004df8:	f043 0310 	orr.w	r3, r3, #16
 8004dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8004dfe:	4b18      	ldr	r3, [pc, #96]	; (8004e60 <HAL_TIM_Base_MspInit+0xbc>)
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	f003 0310 	and.w	r3, r3, #16
 8004e06:	613b      	str	r3, [r7, #16]
 8004e08:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	2036      	movs	r0, #54	; 0x36
 8004e10:	f000 ff9f 	bl	8005d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004e14:	2036      	movs	r0, #54	; 0x36
 8004e16:	f000 ffb8 	bl	8005d8a <HAL_NVIC_EnableIRQ>
}
 8004e1a:	e01a      	b.n	8004e52 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a11      	ldr	r2, [pc, #68]	; (8004e68 <HAL_TIM_Base_MspInit+0xc4>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d115      	bne.n	8004e52 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <HAL_TIM_Base_MspInit+0xbc>)
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	4a0c      	ldr	r2, [pc, #48]	; (8004e60 <HAL_TIM_Base_MspInit+0xbc>)
 8004e30:	f043 0320 	orr.w	r3, r3, #32
 8004e34:	6413      	str	r3, [r2, #64]	; 0x40
 8004e36:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <HAL_TIM_Base_MspInit+0xbc>)
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	f003 0320 	and.w	r3, r3, #32
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004e42:	2200      	movs	r2, #0
 8004e44:	2100      	movs	r1, #0
 8004e46:	2037      	movs	r0, #55	; 0x37
 8004e48:	f000 ff83 	bl	8005d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004e4c:	2037      	movs	r0, #55	; 0x37
 8004e4e:	f000 ff9c 	bl	8005d8a <HAL_NVIC_EnableIRQ>
}
 8004e52:	bf00      	nop
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40000800 	.word	0x40000800
 8004e60:	40023800 	.word	0x40023800
 8004e64:	40001000 	.word	0x40001000
 8004e68:	40001400 	.word	0x40001400

08004e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08a      	sub	sp, #40	; 0x28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e74:	f107 0314 	add.w	r3, r7, #20
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	605a      	str	r2, [r3, #4]
 8004e7e:	609a      	str	r2, [r3, #8]
 8004e80:	60da      	str	r2, [r3, #12]
 8004e82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a19      	ldr	r2, [pc, #100]	; (8004ef0 <HAL_UART_MspInit+0x84>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d12c      	bne.n	8004ee8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004e8e:	2300      	movs	r3, #0
 8004e90:	613b      	str	r3, [r7, #16]
 8004e92:	4b18      	ldr	r3, [pc, #96]	; (8004ef4 <HAL_UART_MspInit+0x88>)
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	4a17      	ldr	r2, [pc, #92]	; (8004ef4 <HAL_UART_MspInit+0x88>)
 8004e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e9e:	4b15      	ldr	r3, [pc, #84]	; (8004ef4 <HAL_UART_MspInit+0x88>)
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ea6:	613b      	str	r3, [r7, #16]
 8004ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	4b11      	ldr	r3, [pc, #68]	; (8004ef4 <HAL_UART_MspInit+0x88>)
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	4a10      	ldr	r2, [pc, #64]	; (8004ef4 <HAL_UART_MspInit+0x88>)
 8004eb4:	f043 0308 	orr.w	r3, r3, #8
 8004eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eba:	4b0e      	ldr	r3, [pc, #56]	; (8004ef4 <HAL_UART_MspInit+0x88>)
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004ec6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ecc:	2302      	movs	r3, #2
 8004ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004ed8:	2307      	movs	r3, #7
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004edc:	f107 0314 	add.w	r3, r7, #20
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	4805      	ldr	r0, [pc, #20]	; (8004ef8 <HAL_UART_MspInit+0x8c>)
 8004ee4:	f001 fe74 	bl	8006bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004ee8:	bf00      	nop
 8004eea:	3728      	adds	r7, #40	; 0x28
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40004800 	.word	0x40004800
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	40020c00 	.word	0x40020c00

08004efc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08a      	sub	sp, #40	; 0x28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f04:	f107 0314 	add.w	r3, r7, #20
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	605a      	str	r2, [r3, #4]
 8004f0e:	609a      	str	r2, [r3, #8]
 8004f10:	60da      	str	r2, [r3, #12]
 8004f12:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f1c:	d13f      	bne.n	8004f9e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f1e:	2300      	movs	r3, #0
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	4b21      	ldr	r3, [pc, #132]	; (8004fa8 <HAL_PCD_MspInit+0xac>)
 8004f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f26:	4a20      	ldr	r2, [pc, #128]	; (8004fa8 <HAL_PCD_MspInit+0xac>)
 8004f28:	f043 0301 	orr.w	r3, r3, #1
 8004f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f2e:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <HAL_PCD_MspInit+0xac>)
 8004f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	613b      	str	r3, [r7, #16]
 8004f38:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8004f3a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8004f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f40:	2302      	movs	r3, #2
 8004f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f44:	2300      	movs	r3, #0
 8004f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004f4c:	230a      	movs	r3, #10
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f50:	f107 0314 	add.w	r3, r7, #20
 8004f54:	4619      	mov	r1, r3
 8004f56:	4815      	ldr	r0, [pc, #84]	; (8004fac <HAL_PCD_MspInit+0xb0>)
 8004f58:	f001 fe3a 	bl	8006bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004f5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f62:	2300      	movs	r3, #0
 8004f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f66:	2300      	movs	r3, #0
 8004f68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004f6a:	f107 0314 	add.w	r3, r7, #20
 8004f6e:	4619      	mov	r1, r3
 8004f70:	480e      	ldr	r0, [pc, #56]	; (8004fac <HAL_PCD_MspInit+0xb0>)
 8004f72:	f001 fe2d 	bl	8006bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004f76:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <HAL_PCD_MspInit+0xac>)
 8004f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7a:	4a0b      	ldr	r2, [pc, #44]	; (8004fa8 <HAL_PCD_MspInit+0xac>)
 8004f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f80:	6353      	str	r3, [r2, #52]	; 0x34
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <HAL_PCD_MspInit+0xac>)
 8004f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8a:	4a07      	ldr	r2, [pc, #28]	; (8004fa8 <HAL_PCD_MspInit+0xac>)
 8004f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f90:	6453      	str	r3, [r2, #68]	; 0x44
 8004f92:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <HAL_PCD_MspInit+0xac>)
 8004f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8004f9e:	bf00      	nop
 8004fa0:	3728      	adds	r7, #40	; 0x28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	40020000 	.word	0x40020000

08004fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004fb4:	e7fe      	b.n	8004fb4 <NMI_Handler+0x4>

08004fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fba:	e7fe      	b.n	8004fba <HardFault_Handler+0x4>

08004fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004fc0:	e7fe      	b.n	8004fc0 <MemManage_Handler+0x4>

08004fc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fc6:	e7fe      	b.n	8004fc6 <BusFault_Handler+0x4>

08004fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fcc:	e7fe      	b.n	8004fcc <UsageFault_Handler+0x4>

08004fce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004fd2:	bf00      	nop
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004fe0:	bf00      	nop
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004fea:	b480      	push	{r7}
 8004fec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004fee:	bf00      	nop
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ffc:	f000 f918 	bl	8005230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005000:	bf00      	nop
 8005002:	bd80      	pop	{r7, pc}

08005004 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005008:	4802      	ldr	r0, [pc, #8]	; (8005014 <TIM4_IRQHandler+0x10>)
 800500a:	f003 fe02 	bl	8008c12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800500e:	bf00      	nop
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	2000081c 	.word	0x2000081c

08005018 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800501c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005020:	f001 ffb6 	bl	8006f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005024:	bf00      	nop
 8005026:	bd80      	pop	{r7, pc}

08005028 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800502c:	4802      	ldr	r0, [pc, #8]	; (8005038 <TIM6_DAC_IRQHandler+0x10>)
 800502e:	f003 fdf0 	bl	8008c12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005032:	bf00      	nop
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20000864 	.word	0x20000864

0800503c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005040:	4802      	ldr	r0, [pc, #8]	; (800504c <TIM7_IRQHandler+0x10>)
 8005042:	f003 fde6 	bl	8008c12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005046:	bf00      	nop
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	200008ac 	.word	0x200008ac

08005050 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005054:	4802      	ldr	r0, [pc, #8]	; (8005060 <DMA2_Stream0_IRQHandler+0x10>)
 8005056:	f001 f829 	bl	80060ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800505a:	bf00      	nop
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000664 	.word	0x20000664

08005064 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  return 1;
 8005068:	2301      	movs	r3, #1
}
 800506a:	4618      	mov	r0, r3
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <_kill>:

int _kill(int pid, int sig)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800507e:	f005 fa15 	bl	800a4ac <__errno>
 8005082:	4603      	mov	r3, r0
 8005084:	2216      	movs	r2, #22
 8005086:	601a      	str	r2, [r3, #0]
  return -1;
 8005088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800508c:	4618      	mov	r0, r3
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <_exit>:

void _exit (int status)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800509c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff ffe7 	bl	8005074 <_kill>
  while (1) {}    /* Make sure we hang here */
 80050a6:	e7fe      	b.n	80050a6 <_exit+0x12>

080050a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80050b0:	4a14      	ldr	r2, [pc, #80]	; (8005104 <_sbrk+0x5c>)
 80050b2:	4b15      	ldr	r3, [pc, #84]	; (8005108 <_sbrk+0x60>)
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050bc:	4b13      	ldr	r3, [pc, #76]	; (800510c <_sbrk+0x64>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d102      	bne.n	80050ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80050c4:	4b11      	ldr	r3, [pc, #68]	; (800510c <_sbrk+0x64>)
 80050c6:	4a12      	ldr	r2, [pc, #72]	; (8005110 <_sbrk+0x68>)
 80050c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050ca:	4b10      	ldr	r3, [pc, #64]	; (800510c <_sbrk+0x64>)
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4413      	add	r3, r2
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d207      	bcs.n	80050e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050d8:	f005 f9e8 	bl	800a4ac <__errno>
 80050dc:	4603      	mov	r3, r0
 80050de:	220c      	movs	r2, #12
 80050e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050e6:	e009      	b.n	80050fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050e8:	4b08      	ldr	r3, [pc, #32]	; (800510c <_sbrk+0x64>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050ee:	4b07      	ldr	r3, [pc, #28]	; (800510c <_sbrk+0x64>)
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4413      	add	r3, r2
 80050f6:	4a05      	ldr	r2, [pc, #20]	; (800510c <_sbrk+0x64>)
 80050f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050fa:	68fb      	ldr	r3, [r7, #12]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	20030000 	.word	0x20030000
 8005108:	00000400 	.word	0x00000400
 800510c:	20000ea0 	.word	0x20000ea0
 8005110:	20000ff8 	.word	0x20000ff8

08005114 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005118:	4b06      	ldr	r3, [pc, #24]	; (8005134 <SystemInit+0x20>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511e:	4a05      	ldr	r2, [pc, #20]	; (8005134 <SystemInit+0x20>)
 8005120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005124:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005128:	bf00      	nop
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	e000ed00 	.word	0xe000ed00

08005138 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8005138:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005170 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800513c:	480d      	ldr	r0, [pc, #52]	; (8005174 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800513e:	490e      	ldr	r1, [pc, #56]	; (8005178 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005140:	4a0e      	ldr	r2, [pc, #56]	; (800517c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005144:	e002      	b.n	800514c <LoopCopyDataInit>

08005146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800514a:	3304      	adds	r3, #4

0800514c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800514c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800514e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005150:	d3f9      	bcc.n	8005146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005152:	4a0b      	ldr	r2, [pc, #44]	; (8005180 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005154:	4c0b      	ldr	r4, [pc, #44]	; (8005184 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005158:	e001      	b.n	800515e <LoopFillZerobss>

0800515a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800515a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800515c:	3204      	adds	r2, #4

0800515e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800515e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005160:	d3fb      	bcc.n	800515a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005162:	f7ff ffd7 	bl	8005114 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005166:	f005 f9a7 	bl	800a4b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800516a:	f7fe fce1 	bl	8003b30 <main>
  bx  lr    
 800516e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005170:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8005174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005178:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800517c:	08013c74 	.word	0x08013c74
  ldr r2, =_sbss
 8005180:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8005184:	20000ff4 	.word	0x20000ff4

08005188 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005188:	e7fe      	b.n	8005188 <ADC_IRQHandler>
	...

0800518c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005190:	4b0e      	ldr	r3, [pc, #56]	; (80051cc <HAL_Init+0x40>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a0d      	ldr	r2, [pc, #52]	; (80051cc <HAL_Init+0x40>)
 8005196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800519a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800519c:	4b0b      	ldr	r3, [pc, #44]	; (80051cc <HAL_Init+0x40>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a0a      	ldr	r2, [pc, #40]	; (80051cc <HAL_Init+0x40>)
 80051a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051a8:	4b08      	ldr	r3, [pc, #32]	; (80051cc <HAL_Init+0x40>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a07      	ldr	r2, [pc, #28]	; (80051cc <HAL_Init+0x40>)
 80051ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051b4:	2003      	movs	r0, #3
 80051b6:	f000 fdc1 	bl	8005d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80051ba:	2000      	movs	r0, #0
 80051bc:	f000 f808 	bl	80051d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80051c0:	f7ff fc0c 	bl	80049dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40023c00 	.word	0x40023c00

080051d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80051d8:	4b12      	ldr	r3, [pc, #72]	; (8005224 <HAL_InitTick+0x54>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	4b12      	ldr	r3, [pc, #72]	; (8005228 <HAL_InitTick+0x58>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	4619      	mov	r1, r3
 80051e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80051ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fdd9 	bl	8005da6 <HAL_SYSTICK_Config>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e00e      	b.n	800521c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b0f      	cmp	r3, #15
 8005202:	d80a      	bhi.n	800521a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005204:	2200      	movs	r2, #0
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800520c:	f000 fda1 	bl	8005d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005210:	4a06      	ldr	r2, [pc, #24]	; (800522c <HAL_InitTick+0x5c>)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	e000      	b.n	800521c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
}
 800521c:	4618      	mov	r0, r3
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	20000024 	.word	0x20000024
 8005228:	2000002c 	.word	0x2000002c
 800522c:	20000028 	.word	0x20000028

08005230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005234:	4b06      	ldr	r3, [pc, #24]	; (8005250 <HAL_IncTick+0x20>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	461a      	mov	r2, r3
 800523a:	4b06      	ldr	r3, [pc, #24]	; (8005254 <HAL_IncTick+0x24>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4413      	add	r3, r2
 8005240:	4a04      	ldr	r2, [pc, #16]	; (8005254 <HAL_IncTick+0x24>)
 8005242:	6013      	str	r3, [r2, #0]
}
 8005244:	bf00      	nop
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	2000002c 	.word	0x2000002c
 8005254:	20000ea4 	.word	0x20000ea4

08005258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  return uwTick;
 800525c:	4b03      	ldr	r3, [pc, #12]	; (800526c <HAL_GetTick+0x14>)
 800525e:	681b      	ldr	r3, [r3, #0]
}
 8005260:	4618      	mov	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	20000ea4 	.word	0x20000ea4

08005270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005278:	f7ff ffee 	bl	8005258 <HAL_GetTick>
 800527c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005288:	d005      	beq.n	8005296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800528a:	4b0a      	ldr	r3, [pc, #40]	; (80052b4 <HAL_Delay+0x44>)
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4413      	add	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005296:	bf00      	nop
 8005298:	f7ff ffde 	bl	8005258 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d8f7      	bhi.n	8005298 <HAL_Delay+0x28>
  {
  }
}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	2000002c 	.word	0x2000002c

080052b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e033      	b.n	8005336 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d109      	bne.n	80052ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7ff fba8 	bl	8004a2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	f003 0310 	and.w	r3, r3, #16
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d118      	bne.n	8005328 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80052fe:	f023 0302 	bic.w	r3, r3, #2
 8005302:	f043 0202 	orr.w	r2, r3, #2
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fac8 	bl	80058a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	f023 0303 	bic.w	r3, r3, #3
 800531e:	f043 0201 	orr.w	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	641a      	str	r2, [r3, #64]	; 0x40
 8005326:	e001      	b.n	800532c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005334:	7bfb      	ldrb	r3, [r7, #15]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005356:	2b01      	cmp	r3, #1
 8005358:	d101      	bne.n	800535e <HAL_ADC_Start_DMA+0x1e>
 800535a:	2302      	movs	r3, #2
 800535c:	e0e9      	b.n	8005532 <HAL_ADC_Start_DMA+0x1f2>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b01      	cmp	r3, #1
 8005372:	d018      	beq.n	80053a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0201 	orr.w	r2, r2, #1
 8005382:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005384:	4b6d      	ldr	r3, [pc, #436]	; (800553c <HAL_ADC_Start_DMA+0x1fc>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a6d      	ldr	r2, [pc, #436]	; (8005540 <HAL_ADC_Start_DMA+0x200>)
 800538a:	fba2 2303 	umull	r2, r3, r2, r3
 800538e:	0c9a      	lsrs	r2, r3, #18
 8005390:	4613      	mov	r3, r2
 8005392:	005b      	lsls	r3, r3, #1
 8005394:	4413      	add	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005398:	e002      	b.n	80053a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	3b01      	subs	r3, #1
 800539e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1f9      	bne.n	800539a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053b4:	d107      	bne.n	80053c6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	f040 80a1 	bne.w	8005518 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80053de:	f023 0301 	bic.w	r3, r3, #1
 80053e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d007      	beq.n	8005408 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005400:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005414:	d106      	bne.n	8005424 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541a:	f023 0206 	bic.w	r2, r3, #6
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	645a      	str	r2, [r3, #68]	; 0x44
 8005422:	e002      	b.n	800542a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005432:	4b44      	ldr	r3, [pc, #272]	; (8005544 <HAL_ADC_Start_DMA+0x204>)
 8005434:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543a:	4a43      	ldr	r2, [pc, #268]	; (8005548 <HAL_ADC_Start_DMA+0x208>)
 800543c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	4a42      	ldr	r2, [pc, #264]	; (800554c <HAL_ADC_Start_DMA+0x20c>)
 8005444:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544a:	4a41      	ldr	r2, [pc, #260]	; (8005550 <HAL_ADC_Start_DMA+0x210>)
 800544c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005456:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005466:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005476:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	334c      	adds	r3, #76	; 0x4c
 8005482:	4619      	mov	r1, r3
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f000 fd48 	bl	8005f1c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f003 031f 	and.w	r3, r3, #31
 8005494:	2b00      	cmp	r3, #0
 8005496:	d12a      	bne.n	80054ee <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a2d      	ldr	r2, [pc, #180]	; (8005554 <HAL_ADC_Start_DMA+0x214>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d015      	beq.n	80054ce <HAL_ADC_Start_DMA+0x18e>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a2c      	ldr	r2, [pc, #176]	; (8005558 <HAL_ADC_Start_DMA+0x218>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d105      	bne.n	80054b8 <HAL_ADC_Start_DMA+0x178>
 80054ac:	4b25      	ldr	r3, [pc, #148]	; (8005544 <HAL_ADC_Start_DMA+0x204>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a27      	ldr	r2, [pc, #156]	; (800555c <HAL_ADC_Start_DMA+0x21c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d136      	bne.n	8005530 <HAL_ADC_Start_DMA+0x1f0>
 80054c2:	4b20      	ldr	r3, [pc, #128]	; (8005544 <HAL_ADC_Start_DMA+0x204>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f003 0310 	and.w	r3, r3, #16
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d130      	bne.n	8005530 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d129      	bne.n	8005530 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80054ea:	609a      	str	r2, [r3, #8]
 80054ec:	e020      	b.n	8005530 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a18      	ldr	r2, [pc, #96]	; (8005554 <HAL_ADC_Start_DMA+0x214>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d11b      	bne.n	8005530 <HAL_ADC_Start_DMA+0x1f0>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d114      	bne.n	8005530 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005514:	609a      	str	r2, [r3, #8]
 8005516:	e00b      	b.n	8005530 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551c:	f043 0210 	orr.w	r2, r3, #16
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005528:	f043 0201 	orr.w	r2, r3, #1
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	20000024 	.word	0x20000024
 8005540:	431bde83 	.word	0x431bde83
 8005544:	40012300 	.word	0x40012300
 8005548:	08005a99 	.word	0x08005a99
 800554c:	08005b53 	.word	0x08005b53
 8005550:	08005b6f 	.word	0x08005b6f
 8005554:	40012000 	.word	0x40012000
 8005558:	40012100 	.word	0x40012100
 800555c:	40012200 	.word	0x40012200

08005560 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <HAL_ADC_Stop_DMA+0x1a>
 8005576:	2302      	movs	r3, #2
 8005578:	e048      	b.n	800560c <HAL_ADC_Stop_DMA+0xac>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0201 	bic.w	r2, r2, #1
 8005590:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d130      	bne.n	8005602 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055ae:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d10f      	bne.n	80055de <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 fd02 	bl	8005fcc <HAL_DMA_Abort>
 80055c8:	4603      	mov	r3, r0
 80055ca:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80055ec:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80055f6:	f023 0301 	bic.w	r3, r3, #1
 80055fa:	f043 0201 	orr.w	r2, r3, #1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800560a:	7bfb      	ldrb	r3, [r7, #15]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005646:	2300      	movs	r3, #0
 8005648:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_ADC_ConfigChannel+0x1c>
 8005654:	2302      	movs	r3, #2
 8005656:	e113      	b.n	8005880 <HAL_ADC_ConfigChannel+0x244>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b09      	cmp	r3, #9
 8005666:	d925      	bls.n	80056b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68d9      	ldr	r1, [r3, #12]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	b29b      	uxth	r3, r3
 8005674:	461a      	mov	r2, r3
 8005676:	4613      	mov	r3, r2
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	4413      	add	r3, r2
 800567c:	3b1e      	subs	r3, #30
 800567e:	2207      	movs	r2, #7
 8005680:	fa02 f303 	lsl.w	r3, r2, r3
 8005684:	43da      	mvns	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	400a      	ands	r2, r1
 800568c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68d9      	ldr	r1, [r3, #12]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	b29b      	uxth	r3, r3
 800569e:	4618      	mov	r0, r3
 80056a0:	4603      	mov	r3, r0
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	4403      	add	r3, r0
 80056a6:	3b1e      	subs	r3, #30
 80056a8:	409a      	lsls	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	60da      	str	r2, [r3, #12]
 80056b2:	e022      	b.n	80056fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6919      	ldr	r1, [r3, #16]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	461a      	mov	r2, r3
 80056c2:	4613      	mov	r3, r2
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	4413      	add	r3, r2
 80056c8:	2207      	movs	r2, #7
 80056ca:	fa02 f303 	lsl.w	r3, r2, r3
 80056ce:	43da      	mvns	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	400a      	ands	r2, r1
 80056d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6919      	ldr	r1, [r3, #16]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	4618      	mov	r0, r3
 80056ea:	4603      	mov	r3, r0
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	4403      	add	r3, r0
 80056f0:	409a      	lsls	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	2b06      	cmp	r3, #6
 8005700:	d824      	bhi.n	800574c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	3b05      	subs	r3, #5
 8005714:	221f      	movs	r2, #31
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	43da      	mvns	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	400a      	ands	r2, r1
 8005722:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	b29b      	uxth	r3, r3
 8005730:	4618      	mov	r0, r3
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	3b05      	subs	r3, #5
 800573e:	fa00 f203 	lsl.w	r2, r0, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	635a      	str	r2, [r3, #52]	; 0x34
 800574a:	e04c      	b.n	80057e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b0c      	cmp	r3, #12
 8005752:	d824      	bhi.n	800579e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	3b23      	subs	r3, #35	; 0x23
 8005766:	221f      	movs	r2, #31
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	43da      	mvns	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	400a      	ands	r2, r1
 8005774:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	b29b      	uxth	r3, r3
 8005782:	4618      	mov	r0, r3
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	4613      	mov	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	3b23      	subs	r3, #35	; 0x23
 8005790:	fa00 f203 	lsl.w	r2, r0, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	631a      	str	r2, [r3, #48]	; 0x30
 800579c:	e023      	b.n	80057e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	4613      	mov	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	3b41      	subs	r3, #65	; 0x41
 80057b0:	221f      	movs	r2, #31
 80057b2:	fa02 f303 	lsl.w	r3, r2, r3
 80057b6:	43da      	mvns	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	400a      	ands	r2, r1
 80057be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	4618      	mov	r0, r3
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	4613      	mov	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	3b41      	subs	r3, #65	; 0x41
 80057da:	fa00 f203 	lsl.w	r2, r0, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057e6:	4b29      	ldr	r3, [pc, #164]	; (800588c <HAL_ADC_ConfigChannel+0x250>)
 80057e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a28      	ldr	r2, [pc, #160]	; (8005890 <HAL_ADC_ConfigChannel+0x254>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d10f      	bne.n	8005814 <HAL_ADC_ConfigChannel+0x1d8>
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b12      	cmp	r3, #18
 80057fa:	d10b      	bne.n	8005814 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a1d      	ldr	r2, [pc, #116]	; (8005890 <HAL_ADC_ConfigChannel+0x254>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d12b      	bne.n	8005876 <HAL_ADC_ConfigChannel+0x23a>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a1c      	ldr	r2, [pc, #112]	; (8005894 <HAL_ADC_ConfigChannel+0x258>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d003      	beq.n	8005830 <HAL_ADC_ConfigChannel+0x1f4>
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b11      	cmp	r3, #17
 800582e:	d122      	bne.n	8005876 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a11      	ldr	r2, [pc, #68]	; (8005894 <HAL_ADC_ConfigChannel+0x258>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d111      	bne.n	8005876 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005852:	4b11      	ldr	r3, [pc, #68]	; (8005898 <HAL_ADC_ConfigChannel+0x25c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a11      	ldr	r2, [pc, #68]	; (800589c <HAL_ADC_ConfigChannel+0x260>)
 8005858:	fba2 2303 	umull	r2, r3, r2, r3
 800585c:	0c9a      	lsrs	r2, r3, #18
 800585e:	4613      	mov	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005868:	e002      	b.n	8005870 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	3b01      	subs	r3, #1
 800586e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f9      	bne.n	800586a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	40012300 	.word	0x40012300
 8005890:	40012000 	.word	0x40012000
 8005894:	10000012 	.word	0x10000012
 8005898:	20000024 	.word	0x20000024
 800589c:	431bde83 	.word	0x431bde83

080058a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80058a8:	4b79      	ldr	r3, [pc, #484]	; (8005a90 <ADC_Init+0x1f0>)
 80058aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	431a      	orrs	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6859      	ldr	r1, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	021a      	lsls	r2, r3, #8
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80058f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6859      	ldr	r1, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800591a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6899      	ldr	r1, [r3, #8]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005932:	4a58      	ldr	r2, [pc, #352]	; (8005a94 <ADC_Init+0x1f4>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d022      	beq.n	800597e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005946:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6899      	ldr	r1, [r3, #8]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005968:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6899      	ldr	r1, [r3, #8]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	609a      	str	r2, [r3, #8]
 800597c:	e00f      	b.n	800599e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800598c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800599c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0202 	bic.w	r2, r2, #2
 80059ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6899      	ldr	r1, [r3, #8]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	7e1b      	ldrb	r3, [r3, #24]
 80059b8:	005a      	lsls	r2, r3, #1
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d01b      	beq.n	8005a04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80059ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6859      	ldr	r1, [r3, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	3b01      	subs	r3, #1
 80059f8:	035a      	lsls	r2, r3, #13
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
 8005a02:	e007      	b.n	8005a14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	051a      	lsls	r2, r3, #20
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005a48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6899      	ldr	r1, [r3, #8]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a56:	025a      	lsls	r2, r3, #9
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6899      	ldr	r1, [r3, #8]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	029a      	lsls	r2, r3, #10
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	609a      	str	r2, [r3, #8]
}
 8005a84:	bf00      	nop
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	40012300 	.word	0x40012300
 8005a94:	0f000001 	.word	0x0f000001

08005a98 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d13c      	bne.n	8005b2c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d12b      	bne.n	8005b24 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d127      	bne.n	8005b24 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ada:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d006      	beq.n	8005af0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d119      	bne.n	8005b24 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 0220 	bic.w	r2, r2, #32
 8005afe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d105      	bne.n	8005b24 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1c:	f043 0201 	orr.w	r2, r3, #1
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f7fd fcef 	bl	8003508 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005b2a:	e00e      	b.n	8005b4a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	f003 0310 	and.w	r3, r3, #16
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d003      	beq.n	8005b40 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7ff fd75 	bl	8005628 <HAL_ADC_ErrorCallback>
}
 8005b3e:	e004      	b.n	8005b4a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	4798      	blx	r3
}
 8005b4a:	bf00      	nop
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b084      	sub	sp, #16
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f7ff fd57 	bl	8005614 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b66:	bf00      	nop
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2240      	movs	r2, #64	; 0x40
 8005b80:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b86:	f043 0204 	orr.w	r2, r3, #4
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f7ff fd4a 	bl	8005628 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b94:	bf00      	nop
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f003 0307 	and.w	r3, r3, #7
 8005baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bac:	4b0c      	ldr	r3, [pc, #48]	; (8005be0 <__NVIC_SetPriorityGrouping+0x44>)
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005bb8:	4013      	ands	r3, r2
 8005bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bce:	4a04      	ldr	r2, [pc, #16]	; (8005be0 <__NVIC_SetPriorityGrouping+0x44>)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	60d3      	str	r3, [r2, #12]
}
 8005bd4:	bf00      	nop
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	e000ed00 	.word	0xe000ed00

08005be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005be8:	4b04      	ldr	r3, [pc, #16]	; (8005bfc <__NVIC_GetPriorityGrouping+0x18>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	0a1b      	lsrs	r3, r3, #8
 8005bee:	f003 0307 	and.w	r3, r3, #7
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	e000ed00 	.word	0xe000ed00

08005c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	4603      	mov	r3, r0
 8005c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	db0b      	blt.n	8005c2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c12:	79fb      	ldrb	r3, [r7, #7]
 8005c14:	f003 021f 	and.w	r2, r3, #31
 8005c18:	4907      	ldr	r1, [pc, #28]	; (8005c38 <__NVIC_EnableIRQ+0x38>)
 8005c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c1e:	095b      	lsrs	r3, r3, #5
 8005c20:	2001      	movs	r0, #1
 8005c22:	fa00 f202 	lsl.w	r2, r0, r2
 8005c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c2a:	bf00      	nop
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	e000e100 	.word	0xe000e100

08005c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	4603      	mov	r3, r0
 8005c44:	6039      	str	r1, [r7, #0]
 8005c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	db0a      	blt.n	8005c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	490c      	ldr	r1, [pc, #48]	; (8005c88 <__NVIC_SetPriority+0x4c>)
 8005c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c5a:	0112      	lsls	r2, r2, #4
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	440b      	add	r3, r1
 8005c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c64:	e00a      	b.n	8005c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	4908      	ldr	r1, [pc, #32]	; (8005c8c <__NVIC_SetPriority+0x50>)
 8005c6c:	79fb      	ldrb	r3, [r7, #7]
 8005c6e:	f003 030f 	and.w	r3, r3, #15
 8005c72:	3b04      	subs	r3, #4
 8005c74:	0112      	lsls	r2, r2, #4
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	440b      	add	r3, r1
 8005c7a:	761a      	strb	r2, [r3, #24]
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	e000e100 	.word	0xe000e100
 8005c8c:	e000ed00 	.word	0xe000ed00

08005c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b089      	sub	sp, #36	; 0x24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f1c3 0307 	rsb	r3, r3, #7
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	bf28      	it	cs
 8005cae:	2304      	movcs	r3, #4
 8005cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	2b06      	cmp	r3, #6
 8005cb8:	d902      	bls.n	8005cc0 <NVIC_EncodePriority+0x30>
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	3b03      	subs	r3, #3
 8005cbe:	e000      	b.n	8005cc2 <NVIC_EncodePriority+0x32>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	fa02 f303 	lsl.w	r3, r2, r3
 8005cce:	43da      	mvns	r2, r3
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	401a      	ands	r2, r3
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005cd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce2:	43d9      	mvns	r1, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ce8:	4313      	orrs	r3, r2
         );
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3724      	adds	r7, #36	; 0x24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
	...

08005cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d08:	d301      	bcc.n	8005d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e00f      	b.n	8005d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d0e:	4a0a      	ldr	r2, [pc, #40]	; (8005d38 <SysTick_Config+0x40>)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d16:	210f      	movs	r1, #15
 8005d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d1c:	f7ff ff8e 	bl	8005c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d20:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <SysTick_Config+0x40>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d26:	4b04      	ldr	r3, [pc, #16]	; (8005d38 <SysTick_Config+0x40>)
 8005d28:	2207      	movs	r2, #7
 8005d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	e000e010 	.word	0xe000e010

08005d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff ff29 	bl	8005b9c <__NVIC_SetPriorityGrouping>
}
 8005d4a:	bf00      	nop
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b086      	sub	sp, #24
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	4603      	mov	r3, r0
 8005d5a:	60b9      	str	r1, [r7, #8]
 8005d5c:	607a      	str	r2, [r7, #4]
 8005d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d64:	f7ff ff3e 	bl	8005be4 <__NVIC_GetPriorityGrouping>
 8005d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	68b9      	ldr	r1, [r7, #8]
 8005d6e:	6978      	ldr	r0, [r7, #20]
 8005d70:	f7ff ff8e 	bl	8005c90 <NVIC_EncodePriority>
 8005d74:	4602      	mov	r2, r0
 8005d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d7a:	4611      	mov	r1, r2
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7ff ff5d 	bl	8005c3c <__NVIC_SetPriority>
}
 8005d82:	bf00      	nop
 8005d84:	3718      	adds	r7, #24
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b082      	sub	sp, #8
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	4603      	mov	r3, r0
 8005d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff ff31 	bl	8005c00 <__NVIC_EnableIRQ>
}
 8005d9e:	bf00      	nop
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b082      	sub	sp, #8
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7ff ffa2 	bl	8005cf8 <SysTick_Config>
 8005db4:	4603      	mov	r3, r0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005dcc:	f7ff fa44 	bl	8005258 <HAL_GetTick>
 8005dd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e099      	b.n	8005f10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0201 	bic.w	r2, r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dfc:	e00f      	b.n	8005e1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dfe:	f7ff fa2b 	bl	8005258 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b05      	cmp	r3, #5
 8005e0a:	d908      	bls.n	8005e1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2203      	movs	r2, #3
 8005e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e078      	b.n	8005f10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1e8      	bne.n	8005dfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	4b38      	ldr	r3, [pc, #224]	; (8005f18 <HAL_DMA_Init+0x158>)
 8005e38:	4013      	ands	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	d107      	bne.n	8005e88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e80:	4313      	orrs	r3, r2
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f023 0307 	bic.w	r3, r3, #7
 8005e9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d117      	bne.n	8005ee2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00e      	beq.n	8005ee2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fadf 	bl	8006488 <DMA_CheckFifoParam>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d008      	beq.n	8005ee2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2240      	movs	r2, #64	; 0x40
 8005ed4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e016      	b.n	8005f10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fa96 	bl	800641c <DMA_CalcBaseAndBitshift>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef8:	223f      	movs	r2, #63	; 0x3f
 8005efa:	409a      	lsls	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	f010803f 	.word	0xf010803f

08005f1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
 8005f28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d101      	bne.n	8005f42 <HAL_DMA_Start_IT+0x26>
 8005f3e:	2302      	movs	r3, #2
 8005f40:	e040      	b.n	8005fc4 <HAL_DMA_Start_IT+0xa8>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d12f      	bne.n	8005fb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	68b9      	ldr	r1, [r7, #8]
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 fa28 	bl	80063c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f74:	223f      	movs	r2, #63	; 0x3f
 8005f76:	409a      	lsls	r2, r3
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0216 	orr.w	r2, r2, #22
 8005f8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d007      	beq.n	8005fa4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0208 	orr.w	r2, r2, #8
 8005fa2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0201 	orr.w	r2, r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	e005      	b.n	8005fc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005fda:	f7ff f93d 	bl	8005258 <HAL_GetTick>
 8005fde:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d008      	beq.n	8005ffe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2280      	movs	r2, #128	; 0x80
 8005ff0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e052      	b.n	80060a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 0216 	bic.w	r2, r2, #22
 800600c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	695a      	ldr	r2, [r3, #20]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800601c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006022:	2b00      	cmp	r3, #0
 8006024:	d103      	bne.n	800602e <HAL_DMA_Abort+0x62>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800602a:	2b00      	cmp	r3, #0
 800602c:	d007      	beq.n	800603e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0208 	bic.w	r2, r2, #8
 800603c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0201 	bic.w	r2, r2, #1
 800604c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800604e:	e013      	b.n	8006078 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006050:	f7ff f902 	bl	8005258 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b05      	cmp	r3, #5
 800605c:	d90c      	bls.n	8006078 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2220      	movs	r2, #32
 8006062:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2203      	movs	r2, #3
 8006068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e015      	b.n	80060a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1e4      	bne.n	8006050 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608a:	223f      	movs	r2, #63	; 0x3f
 800608c:	409a      	lsls	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80060b8:	4b8e      	ldr	r3, [pc, #568]	; (80062f4 <HAL_DMA_IRQHandler+0x248>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a8e      	ldr	r2, [pc, #568]	; (80062f8 <HAL_DMA_IRQHandler+0x24c>)
 80060be:	fba2 2303 	umull	r2, r3, r2, r3
 80060c2:	0a9b      	lsrs	r3, r3, #10
 80060c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d6:	2208      	movs	r2, #8
 80060d8:	409a      	lsls	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4013      	ands	r3, r2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d01a      	beq.n	8006118 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d013      	beq.n	8006118 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0204 	bic.w	r2, r2, #4
 80060fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006104:	2208      	movs	r2, #8
 8006106:	409a      	lsls	r2, r3
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006110:	f043 0201 	orr.w	r2, r3, #1
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800611c:	2201      	movs	r2, #1
 800611e:	409a      	lsls	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4013      	ands	r3, r2
 8006124:	2b00      	cmp	r3, #0
 8006126:	d012      	beq.n	800614e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00b      	beq.n	800614e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800613a:	2201      	movs	r2, #1
 800613c:	409a      	lsls	r2, r3
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006146:	f043 0202 	orr.w	r2, r3, #2
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006152:	2204      	movs	r2, #4
 8006154:	409a      	lsls	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4013      	ands	r3, r2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d012      	beq.n	8006184 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00b      	beq.n	8006184 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006170:	2204      	movs	r2, #4
 8006172:	409a      	lsls	r2, r3
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800617c:	f043 0204 	orr.w	r2, r3, #4
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006188:	2210      	movs	r2, #16
 800618a:	409a      	lsls	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4013      	ands	r3, r2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d043      	beq.n	800621c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0308 	and.w	r3, r3, #8
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d03c      	beq.n	800621c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a6:	2210      	movs	r2, #16
 80061a8:	409a      	lsls	r2, r3
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d018      	beq.n	80061ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d108      	bne.n	80061dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d024      	beq.n	800621c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	4798      	blx	r3
 80061da:	e01f      	b.n	800621c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d01b      	beq.n	800621c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	4798      	blx	r3
 80061ec:	e016      	b.n	800621c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d107      	bne.n	800620c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0208 	bic.w	r2, r2, #8
 800620a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006220:	2220      	movs	r2, #32
 8006222:	409a      	lsls	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4013      	ands	r3, r2
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 808f 	beq.w	800634c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0310 	and.w	r3, r3, #16
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 8087 	beq.w	800634c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006242:	2220      	movs	r2, #32
 8006244:	409a      	lsls	r2, r3
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b05      	cmp	r3, #5
 8006254:	d136      	bne.n	80062c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0216 	bic.w	r2, r2, #22
 8006264:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	695a      	ldr	r2, [r3, #20]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006274:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	2b00      	cmp	r3, #0
 800627c:	d103      	bne.n	8006286 <HAL_DMA_IRQHandler+0x1da>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006282:	2b00      	cmp	r3, #0
 8006284:	d007      	beq.n	8006296 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 0208 	bic.w	r2, r2, #8
 8006294:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800629a:	223f      	movs	r2, #63	; 0x3f
 800629c:	409a      	lsls	r2, r3
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d07e      	beq.n	80063b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	4798      	blx	r3
        }
        return;
 80062c2:	e079      	b.n	80063b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d01d      	beq.n	800630e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10d      	bne.n	80062fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d031      	beq.n	800634c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	4798      	blx	r3
 80062f0:	e02c      	b.n	800634c <HAL_DMA_IRQHandler+0x2a0>
 80062f2:	bf00      	nop
 80062f4:	20000024 	.word	0x20000024
 80062f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006300:	2b00      	cmp	r3, #0
 8006302:	d023      	beq.n	800634c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	4798      	blx	r3
 800630c:	e01e      	b.n	800634c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10f      	bne.n	800633c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0210 	bic.w	r2, r2, #16
 800632a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006350:	2b00      	cmp	r3, #0
 8006352:	d032      	beq.n	80063ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b00      	cmp	r3, #0
 800635e:	d022      	beq.n	80063a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2205      	movs	r2, #5
 8006364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0201 	bic.w	r2, r2, #1
 8006376:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	3301      	adds	r3, #1
 800637c:	60bb      	str	r3, [r7, #8]
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	429a      	cmp	r2, r3
 8006382:	d307      	bcc.n	8006394 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1f2      	bne.n	8006378 <HAL_DMA_IRQHandler+0x2cc>
 8006392:	e000      	b.n	8006396 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006394:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d005      	beq.n	80063ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	4798      	blx	r3
 80063b6:	e000      	b.n	80063ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80063b8:	bf00      	nop
    }
  }
}
 80063ba:	3718      	adds	r7, #24
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
 80063cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	2b40      	cmp	r3, #64	; 0x40
 80063ec:	d108      	bne.n	8006400 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80063fe:	e007      	b.n	8006410 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	60da      	str	r2, [r3, #12]
}
 8006410:	bf00      	nop
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	b2db      	uxtb	r3, r3
 800642a:	3b10      	subs	r3, #16
 800642c:	4a14      	ldr	r2, [pc, #80]	; (8006480 <DMA_CalcBaseAndBitshift+0x64>)
 800642e:	fba2 2303 	umull	r2, r3, r2, r3
 8006432:	091b      	lsrs	r3, r3, #4
 8006434:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006436:	4a13      	ldr	r2, [pc, #76]	; (8006484 <DMA_CalcBaseAndBitshift+0x68>)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4413      	add	r3, r2
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b03      	cmp	r3, #3
 8006448:	d909      	bls.n	800645e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006452:	f023 0303 	bic.w	r3, r3, #3
 8006456:	1d1a      	adds	r2, r3, #4
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	659a      	str	r2, [r3, #88]	; 0x58
 800645c:	e007      	b.n	800646e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006466:	f023 0303 	bic.w	r3, r3, #3
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	aaaaaaab 	.word	0xaaaaaaab
 8006484:	08013c20 	.word	0x08013c20

08006488 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006498:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d11f      	bne.n	80064e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d856      	bhi.n	8006556 <DMA_CheckFifoParam+0xce>
 80064a8:	a201      	add	r2, pc, #4	; (adr r2, 80064b0 <DMA_CheckFifoParam+0x28>)
 80064aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ae:	bf00      	nop
 80064b0:	080064c1 	.word	0x080064c1
 80064b4:	080064d3 	.word	0x080064d3
 80064b8:	080064c1 	.word	0x080064c1
 80064bc:	08006557 	.word	0x08006557
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d046      	beq.n	800655a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064d0:	e043      	b.n	800655a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064da:	d140      	bne.n	800655e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064e0:	e03d      	b.n	800655e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ea:	d121      	bne.n	8006530 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d837      	bhi.n	8006562 <DMA_CheckFifoParam+0xda>
 80064f2:	a201      	add	r2, pc, #4	; (adr r2, 80064f8 <DMA_CheckFifoParam+0x70>)
 80064f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f8:	08006509 	.word	0x08006509
 80064fc:	0800650f 	.word	0x0800650f
 8006500:	08006509 	.word	0x08006509
 8006504:	08006521 	.word	0x08006521
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	73fb      	strb	r3, [r7, #15]
      break;
 800650c:	e030      	b.n	8006570 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d025      	beq.n	8006566 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800651e:	e022      	b.n	8006566 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006528:	d11f      	bne.n	800656a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800652e:	e01c      	b.n	800656a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	2b02      	cmp	r3, #2
 8006534:	d903      	bls.n	800653e <DMA_CheckFifoParam+0xb6>
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2b03      	cmp	r3, #3
 800653a:	d003      	beq.n	8006544 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800653c:	e018      	b.n	8006570 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	73fb      	strb	r3, [r7, #15]
      break;
 8006542:	e015      	b.n	8006570 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006548:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00e      	beq.n	800656e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	73fb      	strb	r3, [r7, #15]
      break;
 8006554:	e00b      	b.n	800656e <DMA_CheckFifoParam+0xe6>
      break;
 8006556:	bf00      	nop
 8006558:	e00a      	b.n	8006570 <DMA_CheckFifoParam+0xe8>
      break;
 800655a:	bf00      	nop
 800655c:	e008      	b.n	8006570 <DMA_CheckFifoParam+0xe8>
      break;
 800655e:	bf00      	nop
 8006560:	e006      	b.n	8006570 <DMA_CheckFifoParam+0xe8>
      break;
 8006562:	bf00      	nop
 8006564:	e004      	b.n	8006570 <DMA_CheckFifoParam+0xe8>
      break;
 8006566:	bf00      	nop
 8006568:	e002      	b.n	8006570 <DMA_CheckFifoParam+0xe8>
      break;   
 800656a:	bf00      	nop
 800656c:	e000      	b.n	8006570 <DMA_CheckFifoParam+0xe8>
      break;
 800656e:	bf00      	nop
    }
  } 
  
  return status; 
 8006570:	7bfb      	ldrb	r3, [r7, #15]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop

08006580 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e06c      	b.n	800666c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006598:	2b00      	cmp	r3, #0
 800659a:	d106      	bne.n	80065aa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2223      	movs	r2, #35	; 0x23
 80065a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f7fe fab9 	bl	8004b1c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065aa:	2300      	movs	r3, #0
 80065ac:	60bb      	str	r3, [r7, #8]
 80065ae:	4b31      	ldr	r3, [pc, #196]	; (8006674 <HAL_ETH_Init+0xf4>)
 80065b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b2:	4a30      	ldr	r2, [pc, #192]	; (8006674 <HAL_ETH_Init+0xf4>)
 80065b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065b8:	6453      	str	r3, [r2, #68]	; 0x44
 80065ba:	4b2e      	ldr	r3, [pc, #184]	; (8006674 <HAL_ETH_Init+0xf4>)
 80065bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065c2:	60bb      	str	r3, [r7, #8]
 80065c4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80065c6:	4b2c      	ldr	r3, [pc, #176]	; (8006678 <HAL_ETH_Init+0xf8>)
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	4a2b      	ldr	r2, [pc, #172]	; (8006678 <HAL_ETH_Init+0xf8>)
 80065cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80065d0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80065d2:	4b29      	ldr	r3, [pc, #164]	; (8006678 <HAL_ETH_Init+0xf8>)
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	4927      	ldr	r1, [pc, #156]	; (8006678 <HAL_ETH_Init+0xf8>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80065e0:	4b25      	ldr	r3, [pc, #148]	; (8006678 <HAL_ETH_Init+0xf8>)
 80065e2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	6812      	ldr	r2, [r2, #0]
 80065f2:	f043 0301 	orr.w	r3, r3, #1
 80065f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065fc:	f7fe fe2c 	bl	8005258 <HAL_GetTick>
 8006600:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006602:	e011      	b.n	8006628 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006604:	f7fe fe28 	bl	8005258 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006612:	d909      	bls.n	8006628 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2204      	movs	r2, #4
 8006618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	22e0      	movs	r2, #224	; 0xe0
 8006620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e021      	b.n	800666c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e4      	bne.n	8006604 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f958 	bl	80068f0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f9ff 	bl	8006a44 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fa55 	bl	8006af6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	461a      	mov	r2, r3
 8006652:	2100      	movs	r1, #0
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f9bd 	bl	80069d4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2210      	movs	r2, #16
 8006666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	40023800 	.word	0x40023800
 8006678:	40013800 	.word	0x40013800

0800667c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	4b51      	ldr	r3, [pc, #324]	; (80067d8 <ETH_SetMACConfig+0x15c>)
 8006692:	4013      	ands	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	7c1b      	ldrb	r3, [r3, #16]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d102      	bne.n	80066a4 <ETH_SetMACConfig+0x28>
 800669e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80066a2:	e000      	b.n	80066a6 <ETH_SetMACConfig+0x2a>
 80066a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	7c5b      	ldrb	r3, [r3, #17]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d102      	bne.n	80066b4 <ETH_SetMACConfig+0x38>
 80066ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80066b2:	e000      	b.n	80066b6 <ETH_SetMACConfig+0x3a>
 80066b4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80066b6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80066bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	7fdb      	ldrb	r3, [r3, #31]
 80066c2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80066c4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80066ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	7f92      	ldrb	r2, [r2, #30]
 80066d0:	2a00      	cmp	r2, #0
 80066d2:	d102      	bne.n	80066da <ETH_SetMACConfig+0x5e>
 80066d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066d8:	e000      	b.n	80066dc <ETH_SetMACConfig+0x60>
 80066da:	2200      	movs	r2, #0
                        macconf->Speed |
 80066dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	7f1b      	ldrb	r3, [r3, #28]
 80066e2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80066e4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80066ea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	791b      	ldrb	r3, [r3, #4]
 80066f0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80066f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80066fa:	2a00      	cmp	r2, #0
 80066fc:	d102      	bne.n	8006704 <ETH_SetMACConfig+0x88>
 80066fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006702:	e000      	b.n	8006706 <ETH_SetMACConfig+0x8a>
 8006704:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006706:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	7bdb      	ldrb	r3, [r3, #15]
 800670c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800670e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006714:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800671c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800671e:	4313      	orrs	r3, r2
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	4313      	orrs	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006736:	2001      	movs	r0, #1
 8006738:	f7fe fd9a 	bl	8005270 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8006752:	4013      	ands	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800675a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006762:	2a00      	cmp	r2, #0
 8006764:	d101      	bne.n	800676a <ETH_SetMACConfig+0xee>
 8006766:	2280      	movs	r2, #128	; 0x80
 8006768:	e000      	b.n	800676c <ETH_SetMACConfig+0xf0>
 800676a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800676c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8006772:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800677a:	2a01      	cmp	r2, #1
 800677c:	d101      	bne.n	8006782 <ETH_SetMACConfig+0x106>
 800677e:	2208      	movs	r2, #8
 8006780:	e000      	b.n	8006784 <ETH_SetMACConfig+0x108>
 8006782:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8006784:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800678c:	2a01      	cmp	r2, #1
 800678e:	d101      	bne.n	8006794 <ETH_SetMACConfig+0x118>
 8006790:	2204      	movs	r2, #4
 8006792:	e000      	b.n	8006796 <ETH_SetMACConfig+0x11a>
 8006794:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8006796:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800679e:	2a01      	cmp	r2, #1
 80067a0:	d101      	bne.n	80067a6 <ETH_SetMACConfig+0x12a>
 80067a2:	2202      	movs	r2, #2
 80067a4:	e000      	b.n	80067a8 <ETH_SetMACConfig+0x12c>
 80067a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80067a8:	4313      	orrs	r3, r2
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80067c0:	2001      	movs	r0, #1
 80067c2:	f7fe fd55 	bl	8005270 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	619a      	str	r2, [r3, #24]
}
 80067ce:	bf00      	nop
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	ff20810f 	.word	0xff20810f

080067dc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	4b3d      	ldr	r3, [pc, #244]	; (80068ec <ETH_SetDMAConfig+0x110>)
 80067f6:	4013      	ands	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	7b1b      	ldrb	r3, [r3, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d102      	bne.n	8006808 <ETH_SetDMAConfig+0x2c>
 8006802:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006806:	e000      	b.n	800680a <ETH_SetDMAConfig+0x2e>
 8006808:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	7b5b      	ldrb	r3, [r3, #13]
 800680e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006810:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	7f52      	ldrb	r2, [r2, #29]
 8006816:	2a00      	cmp	r2, #0
 8006818:	d102      	bne.n	8006820 <ETH_SetDMAConfig+0x44>
 800681a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800681e:	e000      	b.n	8006822 <ETH_SetDMAConfig+0x46>
 8006820:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006822:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	7b9b      	ldrb	r3, [r3, #14]
 8006828:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800682a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006830:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	7f1b      	ldrb	r3, [r3, #28]
 8006836:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8006838:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	7f9b      	ldrb	r3, [r3, #30]
 800683e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006840:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006846:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800684e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006850:	4313      	orrs	r3, r2
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006860:	461a      	mov	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006872:	2001      	movs	r0, #1
 8006874:	f7fe fcfc 	bl	8005270 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006880:	461a      	mov	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	791b      	ldrb	r3, [r3, #4]
 800688a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006890:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8006896:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800689c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80068a4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80068a6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ac:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80068ae:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80068b4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	6812      	ldr	r2, [r2, #0]
 80068ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80068be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80068c2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80068d0:	2001      	movs	r0, #1
 80068d2:	f7fe fccd 	bl	8005270 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068de:	461a      	mov	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6013      	str	r3, [r2, #0]
}
 80068e4:	bf00      	nop
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	f8de3f23 	.word	0xf8de3f23

080068f0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b0a6      	sub	sp, #152	; 0x98
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80068f8:	2301      	movs	r3, #1
 80068fa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80068fe:	2301      	movs	r3, #1
 8006900:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8006904:	2300      	movs	r3, #0
 8006906:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006908:	2300      	movs	r3, #0
 800690a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800690e:	2301      	movs	r3, #1
 8006910:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8006914:	2300      	movs	r3, #0
 8006916:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800691a:	2301      	movs	r3, #1
 800691c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8006920:	2300      	movs	r3, #0
 8006922:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8006926:	2300      	movs	r3, #0
 8006928:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800692c:	2300      	movs	r3, #0
 800692e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8006930:	2300      	movs	r3, #0
 8006932:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8006936:	2300      	movs	r3, #0
 8006938:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800693a:	2300      	movs	r3, #0
 800693c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8006940:	2300      	movs	r3, #0
 8006942:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006946:	2300      	movs	r3, #0
 8006948:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800694c:	2300      	movs	r3, #0
 800694e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006952:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006956:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006958:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800695c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800695e:	2300      	movs	r3, #0
 8006960:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006964:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7ff fe86 	bl	800667c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8006970:	2301      	movs	r3, #1
 8006972:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8006974:	2301      	movs	r3, #1
 8006976:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8006978:	2301      	movs	r3, #1
 800697a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800697e:	2301      	movs	r3, #1
 8006980:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8006982:	2300      	movs	r3, #0
 8006984:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8006986:	2300      	movs	r3, #0
 8006988:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800698c:	2300      	movs	r3, #0
 800698e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8006992:	2300      	movs	r3, #0
 8006994:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8006996:	2301      	movs	r3, #1
 8006998:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800699c:	2301      	movs	r3, #1
 800699e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80069a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80069a4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80069a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80069aa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80069ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069b0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80069b2:	2301      	movs	r3, #1
 80069b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80069bc:	2300      	movs	r3, #0
 80069be:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80069c0:	f107 0308 	add.w	r3, r7, #8
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7ff ff08 	bl	80067dc <ETH_SetDMAConfig>
}
 80069cc:	bf00      	nop
 80069ce:	3798      	adds	r7, #152	; 0x98
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3305      	adds	r3, #5
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	021b      	lsls	r3, r3, #8
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	3204      	adds	r2, #4
 80069ec:	7812      	ldrb	r2, [r2, #0]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	4b11      	ldr	r3, [pc, #68]	; (8006a3c <ETH_MACAddressConfig+0x68>)
 80069f6:	4413      	add	r3, r2
 80069f8:	461a      	mov	r2, r3
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	3303      	adds	r3, #3
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	061a      	lsls	r2, r3, #24
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	3302      	adds	r3, #2
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	041b      	lsls	r3, r3, #16
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	3301      	adds	r3, #1
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	021b      	lsls	r3, r3, #8
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	7812      	ldrb	r2, [r2, #0]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	4b06      	ldr	r3, [pc, #24]	; (8006a40 <ETH_MACAddressConfig+0x6c>)
 8006a26:	4413      	add	r3, r2
 8006a28:	461a      	mov	r2, r3
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	6013      	str	r3, [r2, #0]
}
 8006a2e:	bf00      	nop
 8006a30:	371c      	adds	r7, #28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	40028040 	.word	0x40028040
 8006a40:	40028044 	.word	0x40028044

08006a44 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	e03e      	b.n	8006ad0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68d9      	ldr	r1, [r3, #12]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	440b      	add	r3, r1
 8006a62:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	2200      	movs	r2, #0
 8006a68:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2200      	movs	r2, #0
 8006a74:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	3206      	adds	r2, #6
 8006a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d80c      	bhi.n	8006ab4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68d9      	ldr	r1, [r3, #12]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	1c5a      	adds	r2, r3, #1
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	00db      	lsls	r3, r3, #3
 8006aaa:	440b      	add	r3, r1
 8006aac:	461a      	mov	r2, r3
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	60da      	str	r2, [r3, #12]
 8006ab2:	e004      	b.n	8006abe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	3301      	adds	r3, #1
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	d9bd      	bls.n	8006a52 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68da      	ldr	r2, [r3, #12]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae8:	611a      	str	r2, [r3, #16]
}
 8006aea:	bf00      	nop
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b085      	sub	sp, #20
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006afe:	2300      	movs	r3, #0
 8006b00:	60fb      	str	r3, [r7, #12]
 8006b02:	e046      	b.n	8006b92 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6919      	ldr	r1, [r3, #16]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	00db      	lsls	r3, r3, #3
 8006b12:	440b      	add	r3, r1
 8006b14:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2200      	movs	r2, #0
 8006b26:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2200      	movs	r2, #0
 8006b32:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2200      	movs	r2, #0
 8006b38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b40:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8006b48:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006b56:	68b9      	ldr	r1, [r7, #8]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	3212      	adds	r2, #18
 8006b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d80c      	bhi.n	8006b82 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6919      	ldr	r1, [r3, #16]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	4613      	mov	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	440b      	add	r3, r1
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	60da      	str	r2, [r3, #12]
 8006b80:	e004      	b.n	8006b8c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	461a      	mov	r2, r3
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b03      	cmp	r3, #3
 8006b96:	d9b5      	bls.n	8006b04 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691a      	ldr	r2, [r3, #16]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bc2:	60da      	str	r2, [r3, #12]
}
 8006bc4:	bf00      	nop
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b089      	sub	sp, #36	; 0x24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006be2:	2300      	movs	r3, #0
 8006be4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006be6:	2300      	movs	r3, #0
 8006be8:	61fb      	str	r3, [r7, #28]
 8006bea:	e177      	b.n	8006edc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006bec:	2201      	movs	r2, #1
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	f040 8166 	bne.w	8006ed6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f003 0303 	and.w	r3, r3, #3
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d005      	beq.n	8006c22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d130      	bne.n	8006c84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	2203      	movs	r2, #3
 8006c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c32:	43db      	mvns	r3, r3
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	4013      	ands	r3, r2
 8006c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	68da      	ldr	r2, [r3, #12]
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	005b      	lsls	r3, r3, #1
 8006c42:	fa02 f303 	lsl.w	r3, r2, r3
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c58:	2201      	movs	r2, #1
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c60:	43db      	mvns	r3, r3
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	4013      	ands	r3, r2
 8006c66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	091b      	lsrs	r3, r3, #4
 8006c6e:	f003 0201 	and.w	r2, r3, #1
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	fa02 f303 	lsl.w	r3, r2, r3
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f003 0303 	and.w	r3, r3, #3
 8006c8c:	2b03      	cmp	r3, #3
 8006c8e:	d017      	beq.n	8006cc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	005b      	lsls	r3, r3, #1
 8006c9a:	2203      	movs	r2, #3
 8006c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca0:	43db      	mvns	r3, r3
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	689a      	ldr	r2, [r3, #8]
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	005b      	lsls	r3, r3, #1
 8006cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	69ba      	ldr	r2, [r7, #24]
 8006cbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f003 0303 	and.w	r3, r3, #3
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d123      	bne.n	8006d14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	08da      	lsrs	r2, r3, #3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3208      	adds	r2, #8
 8006cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	f003 0307 	and.w	r3, r3, #7
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	220f      	movs	r2, #15
 8006ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce8:	43db      	mvns	r3, r3
 8006cea:	69ba      	ldr	r2, [r7, #24]
 8006cec:	4013      	ands	r3, r2
 8006cee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	f003 0307 	and.w	r3, r3, #7
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	08da      	lsrs	r2, r3, #3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	3208      	adds	r2, #8
 8006d0e:	69b9      	ldr	r1, [r7, #24]
 8006d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	2203      	movs	r2, #3
 8006d20:	fa02 f303 	lsl.w	r3, r2, r3
 8006d24:	43db      	mvns	r3, r3
 8006d26:	69ba      	ldr	r2, [r7, #24]
 8006d28:	4013      	ands	r3, r2
 8006d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f003 0203 	and.w	r2, r3, #3
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	005b      	lsls	r3, r3, #1
 8006d38:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 80c0 	beq.w	8006ed6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d56:	2300      	movs	r3, #0
 8006d58:	60fb      	str	r3, [r7, #12]
 8006d5a:	4b66      	ldr	r3, [pc, #408]	; (8006ef4 <HAL_GPIO_Init+0x324>)
 8006d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d5e:	4a65      	ldr	r2, [pc, #404]	; (8006ef4 <HAL_GPIO_Init+0x324>)
 8006d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d64:	6453      	str	r3, [r2, #68]	; 0x44
 8006d66:	4b63      	ldr	r3, [pc, #396]	; (8006ef4 <HAL_GPIO_Init+0x324>)
 8006d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d72:	4a61      	ldr	r2, [pc, #388]	; (8006ef8 <HAL_GPIO_Init+0x328>)
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	089b      	lsrs	r3, r3, #2
 8006d78:	3302      	adds	r3, #2
 8006d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	f003 0303 	and.w	r3, r3, #3
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	220f      	movs	r2, #15
 8006d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8e:	43db      	mvns	r3, r3
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	4013      	ands	r3, r2
 8006d94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a58      	ldr	r2, [pc, #352]	; (8006efc <HAL_GPIO_Init+0x32c>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d037      	beq.n	8006e0e <HAL_GPIO_Init+0x23e>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a57      	ldr	r2, [pc, #348]	; (8006f00 <HAL_GPIO_Init+0x330>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d031      	beq.n	8006e0a <HAL_GPIO_Init+0x23a>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a56      	ldr	r2, [pc, #344]	; (8006f04 <HAL_GPIO_Init+0x334>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d02b      	beq.n	8006e06 <HAL_GPIO_Init+0x236>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a55      	ldr	r2, [pc, #340]	; (8006f08 <HAL_GPIO_Init+0x338>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d025      	beq.n	8006e02 <HAL_GPIO_Init+0x232>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a54      	ldr	r2, [pc, #336]	; (8006f0c <HAL_GPIO_Init+0x33c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d01f      	beq.n	8006dfe <HAL_GPIO_Init+0x22e>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a53      	ldr	r2, [pc, #332]	; (8006f10 <HAL_GPIO_Init+0x340>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d019      	beq.n	8006dfa <HAL_GPIO_Init+0x22a>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a52      	ldr	r2, [pc, #328]	; (8006f14 <HAL_GPIO_Init+0x344>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d013      	beq.n	8006df6 <HAL_GPIO_Init+0x226>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a51      	ldr	r2, [pc, #324]	; (8006f18 <HAL_GPIO_Init+0x348>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d00d      	beq.n	8006df2 <HAL_GPIO_Init+0x222>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a50      	ldr	r2, [pc, #320]	; (8006f1c <HAL_GPIO_Init+0x34c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d007      	beq.n	8006dee <HAL_GPIO_Init+0x21e>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a4f      	ldr	r2, [pc, #316]	; (8006f20 <HAL_GPIO_Init+0x350>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d101      	bne.n	8006dea <HAL_GPIO_Init+0x21a>
 8006de6:	2309      	movs	r3, #9
 8006de8:	e012      	b.n	8006e10 <HAL_GPIO_Init+0x240>
 8006dea:	230a      	movs	r3, #10
 8006dec:	e010      	b.n	8006e10 <HAL_GPIO_Init+0x240>
 8006dee:	2308      	movs	r3, #8
 8006df0:	e00e      	b.n	8006e10 <HAL_GPIO_Init+0x240>
 8006df2:	2307      	movs	r3, #7
 8006df4:	e00c      	b.n	8006e10 <HAL_GPIO_Init+0x240>
 8006df6:	2306      	movs	r3, #6
 8006df8:	e00a      	b.n	8006e10 <HAL_GPIO_Init+0x240>
 8006dfa:	2305      	movs	r3, #5
 8006dfc:	e008      	b.n	8006e10 <HAL_GPIO_Init+0x240>
 8006dfe:	2304      	movs	r3, #4
 8006e00:	e006      	b.n	8006e10 <HAL_GPIO_Init+0x240>
 8006e02:	2303      	movs	r3, #3
 8006e04:	e004      	b.n	8006e10 <HAL_GPIO_Init+0x240>
 8006e06:	2302      	movs	r3, #2
 8006e08:	e002      	b.n	8006e10 <HAL_GPIO_Init+0x240>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e000      	b.n	8006e10 <HAL_GPIO_Init+0x240>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	69fa      	ldr	r2, [r7, #28]
 8006e12:	f002 0203 	and.w	r2, r2, #3
 8006e16:	0092      	lsls	r2, r2, #2
 8006e18:	4093      	lsls	r3, r2
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e20:	4935      	ldr	r1, [pc, #212]	; (8006ef8 <HAL_GPIO_Init+0x328>)
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	089b      	lsrs	r3, r3, #2
 8006e26:	3302      	adds	r3, #2
 8006e28:	69ba      	ldr	r2, [r7, #24]
 8006e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e2e:	4b3d      	ldr	r3, [pc, #244]	; (8006f24 <HAL_GPIO_Init+0x354>)
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	43db      	mvns	r3, r3
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006e52:	4a34      	ldr	r2, [pc, #208]	; (8006f24 <HAL_GPIO_Init+0x354>)
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006e58:	4b32      	ldr	r3, [pc, #200]	; (8006f24 <HAL_GPIO_Init+0x354>)
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	43db      	mvns	r3, r3
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	4013      	ands	r3, r2
 8006e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006e7c:	4a29      	ldr	r2, [pc, #164]	; (8006f24 <HAL_GPIO_Init+0x354>)
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006e82:	4b28      	ldr	r3, [pc, #160]	; (8006f24 <HAL_GPIO_Init+0x354>)
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	43db      	mvns	r3, r3
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	4013      	ands	r3, r2
 8006e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006ea6:	4a1f      	ldr	r2, [pc, #124]	; (8006f24 <HAL_GPIO_Init+0x354>)
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006eac:	4b1d      	ldr	r3, [pc, #116]	; (8006f24 <HAL_GPIO_Init+0x354>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	43db      	mvns	r3, r3
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	4013      	ands	r3, r2
 8006eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d003      	beq.n	8006ed0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006ed0:	4a14      	ldr	r2, [pc, #80]	; (8006f24 <HAL_GPIO_Init+0x354>)
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	61fb      	str	r3, [r7, #28]
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	2b0f      	cmp	r3, #15
 8006ee0:	f67f ae84 	bls.w	8006bec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop
 8006ee8:	3724      	adds	r7, #36	; 0x24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	40023800 	.word	0x40023800
 8006ef8:	40013800 	.word	0x40013800
 8006efc:	40020000 	.word	0x40020000
 8006f00:	40020400 	.word	0x40020400
 8006f04:	40020800 	.word	0x40020800
 8006f08:	40020c00 	.word	0x40020c00
 8006f0c:	40021000 	.word	0x40021000
 8006f10:	40021400 	.word	0x40021400
 8006f14:	40021800 	.word	0x40021800
 8006f18:	40021c00 	.word	0x40021c00
 8006f1c:	40022000 	.word	0x40022000
 8006f20:	40022400 	.word	0x40022400
 8006f24:	40013c00 	.word	0x40013c00

08006f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	460b      	mov	r3, r1
 8006f32:	807b      	strh	r3, [r7, #2]
 8006f34:	4613      	mov	r3, r2
 8006f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f38:	787b      	ldrb	r3, [r7, #1]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d003      	beq.n	8006f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f3e:	887a      	ldrh	r2, [r7, #2]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006f44:	e003      	b.n	8006f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006f46:	887b      	ldrh	r3, [r7, #2]
 8006f48:	041a      	lsls	r2, r3, #16
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	619a      	str	r2, [r3, #24]
}
 8006f4e:	bf00      	nop
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b085      	sub	sp, #20
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
 8006f62:	460b      	mov	r3, r1
 8006f64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006f6c:	887a      	ldrh	r2, [r7, #2]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	4013      	ands	r3, r2
 8006f72:	041a      	lsls	r2, r3, #16
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	43d9      	mvns	r1, r3
 8006f78:	887b      	ldrh	r3, [r7, #2]
 8006f7a:	400b      	ands	r3, r1
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	619a      	str	r2, [r3, #24]
}
 8006f82:	bf00      	nop
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
	...

08006f90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	4603      	mov	r3, r0
 8006f98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006f9a:	4b08      	ldr	r3, [pc, #32]	; (8006fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f9c:	695a      	ldr	r2, [r3, #20]
 8006f9e:	88fb      	ldrh	r3, [r7, #6]
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d006      	beq.n	8006fb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006fa6:	4a05      	ldr	r2, [pc, #20]	; (8006fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006fa8:	88fb      	ldrh	r3, [r7, #6]
 8006faa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006fac:	88fb      	ldrh	r3, [r7, #6]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fc fc6a 	bl	8003888 <HAL_GPIO_EXTI_Callback>
  }
}
 8006fb4:	bf00      	nop
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	40013c00 	.word	0x40013c00

08006fc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e12b      	b.n	800722a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d106      	bne.n	8006fec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7fd fe5e 	bl	8004ca8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2224      	movs	r2, #36	; 0x24
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f022 0201 	bic.w	r2, r2, #1
 8007002:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007012:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007022:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007024:	f001 fcde 	bl	80089e4 <HAL_RCC_GetPCLK1Freq>
 8007028:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	4a81      	ldr	r2, [pc, #516]	; (8007234 <HAL_I2C_Init+0x274>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d807      	bhi.n	8007044 <HAL_I2C_Init+0x84>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4a80      	ldr	r2, [pc, #512]	; (8007238 <HAL_I2C_Init+0x278>)
 8007038:	4293      	cmp	r3, r2
 800703a:	bf94      	ite	ls
 800703c:	2301      	movls	r3, #1
 800703e:	2300      	movhi	r3, #0
 8007040:	b2db      	uxtb	r3, r3
 8007042:	e006      	b.n	8007052 <HAL_I2C_Init+0x92>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4a7d      	ldr	r2, [pc, #500]	; (800723c <HAL_I2C_Init+0x27c>)
 8007048:	4293      	cmp	r3, r2
 800704a:	bf94      	ite	ls
 800704c:	2301      	movls	r3, #1
 800704e:	2300      	movhi	r3, #0
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e0e7      	b.n	800722a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	4a78      	ldr	r2, [pc, #480]	; (8007240 <HAL_I2C_Init+0x280>)
 800705e:	fba2 2303 	umull	r2, r3, r2, r3
 8007062:	0c9b      	lsrs	r3, r3, #18
 8007064:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	430a      	orrs	r2, r1
 8007078:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6a1b      	ldr	r3, [r3, #32]
 8007080:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	4a6a      	ldr	r2, [pc, #424]	; (8007234 <HAL_I2C_Init+0x274>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d802      	bhi.n	8007094 <HAL_I2C_Init+0xd4>
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	3301      	adds	r3, #1
 8007092:	e009      	b.n	80070a8 <HAL_I2C_Init+0xe8>
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800709a:	fb02 f303 	mul.w	r3, r2, r3
 800709e:	4a69      	ldr	r2, [pc, #420]	; (8007244 <HAL_I2C_Init+0x284>)
 80070a0:	fba2 2303 	umull	r2, r3, r2, r3
 80070a4:	099b      	lsrs	r3, r3, #6
 80070a6:	3301      	adds	r3, #1
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	6812      	ldr	r2, [r2, #0]
 80070ac:	430b      	orrs	r3, r1
 80070ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80070ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	495c      	ldr	r1, [pc, #368]	; (8007234 <HAL_I2C_Init+0x274>)
 80070c4:	428b      	cmp	r3, r1
 80070c6:	d819      	bhi.n	80070fc <HAL_I2C_Init+0x13c>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	1e59      	subs	r1, r3, #1
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	005b      	lsls	r3, r3, #1
 80070d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80070d6:	1c59      	adds	r1, r3, #1
 80070d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80070dc:	400b      	ands	r3, r1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00a      	beq.n	80070f8 <HAL_I2C_Init+0x138>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	1e59      	subs	r1, r3, #1
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	005b      	lsls	r3, r3, #1
 80070ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80070f0:	3301      	adds	r3, #1
 80070f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070f6:	e051      	b.n	800719c <HAL_I2C_Init+0x1dc>
 80070f8:	2304      	movs	r3, #4
 80070fa:	e04f      	b.n	800719c <HAL_I2C_Init+0x1dc>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d111      	bne.n	8007128 <HAL_I2C_Init+0x168>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	1e58      	subs	r0, r3, #1
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6859      	ldr	r1, [r3, #4]
 800710c:	460b      	mov	r3, r1
 800710e:	005b      	lsls	r3, r3, #1
 8007110:	440b      	add	r3, r1
 8007112:	fbb0 f3f3 	udiv	r3, r0, r3
 8007116:	3301      	adds	r3, #1
 8007118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800711c:	2b00      	cmp	r3, #0
 800711e:	bf0c      	ite	eq
 8007120:	2301      	moveq	r3, #1
 8007122:	2300      	movne	r3, #0
 8007124:	b2db      	uxtb	r3, r3
 8007126:	e012      	b.n	800714e <HAL_I2C_Init+0x18e>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	1e58      	subs	r0, r3, #1
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6859      	ldr	r1, [r3, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	440b      	add	r3, r1
 8007136:	0099      	lsls	r1, r3, #2
 8007138:	440b      	add	r3, r1
 800713a:	fbb0 f3f3 	udiv	r3, r0, r3
 800713e:	3301      	adds	r3, #1
 8007140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007144:	2b00      	cmp	r3, #0
 8007146:	bf0c      	ite	eq
 8007148:	2301      	moveq	r3, #1
 800714a:	2300      	movne	r3, #0
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <HAL_I2C_Init+0x196>
 8007152:	2301      	movs	r3, #1
 8007154:	e022      	b.n	800719c <HAL_I2C_Init+0x1dc>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10e      	bne.n	800717c <HAL_I2C_Init+0x1bc>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	1e58      	subs	r0, r3, #1
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6859      	ldr	r1, [r3, #4]
 8007166:	460b      	mov	r3, r1
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	440b      	add	r3, r1
 800716c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007170:	3301      	adds	r3, #1
 8007172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800717a:	e00f      	b.n	800719c <HAL_I2C_Init+0x1dc>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	1e58      	subs	r0, r3, #1
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6859      	ldr	r1, [r3, #4]
 8007184:	460b      	mov	r3, r1
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	440b      	add	r3, r1
 800718a:	0099      	lsls	r1, r3, #2
 800718c:	440b      	add	r3, r1
 800718e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007192:	3301      	adds	r3, #1
 8007194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800719c:	6879      	ldr	r1, [r7, #4]
 800719e:	6809      	ldr	r1, [r1, #0]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	69da      	ldr	r2, [r3, #28]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	431a      	orrs	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	430a      	orrs	r2, r1
 80071be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80071ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	6911      	ldr	r1, [r2, #16]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	68d2      	ldr	r2, [r2, #12]
 80071d6:	4311      	orrs	r1, r2
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	6812      	ldr	r2, [r2, #0]
 80071dc:	430b      	orrs	r3, r1
 80071de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	695a      	ldr	r2, [r3, #20]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	431a      	orrs	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f042 0201 	orr.w	r2, r2, #1
 800720a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2220      	movs	r2, #32
 8007216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	000186a0 	.word	0x000186a0
 8007238:	001e847f 	.word	0x001e847f
 800723c:	003d08ff 	.word	0x003d08ff
 8007240:	431bde83 	.word	0x431bde83
 8007244:	10624dd3 	.word	0x10624dd3

08007248 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b088      	sub	sp, #32
 800724c:	af02      	add	r7, sp, #8
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	607a      	str	r2, [r7, #4]
 8007252:	461a      	mov	r2, r3
 8007254:	460b      	mov	r3, r1
 8007256:	817b      	strh	r3, [r7, #10]
 8007258:	4613      	mov	r3, r2
 800725a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800725c:	f7fd fffc 	bl	8005258 <HAL_GetTick>
 8007260:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b20      	cmp	r3, #32
 800726c:	f040 80e0 	bne.w	8007430 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	2319      	movs	r3, #25
 8007276:	2201      	movs	r2, #1
 8007278:	4970      	ldr	r1, [pc, #448]	; (800743c <HAL_I2C_Master_Transmit+0x1f4>)
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 fc22 	bl	8007ac4 <I2C_WaitOnFlagUntilTimeout>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007286:	2302      	movs	r3, #2
 8007288:	e0d3      	b.n	8007432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007290:	2b01      	cmp	r3, #1
 8007292:	d101      	bne.n	8007298 <HAL_I2C_Master_Transmit+0x50>
 8007294:	2302      	movs	r3, #2
 8007296:	e0cc      	b.n	8007432 <HAL_I2C_Master_Transmit+0x1ea>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d007      	beq.n	80072be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f042 0201 	orr.w	r2, r2, #1
 80072bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2221      	movs	r2, #33	; 0x21
 80072d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2210      	movs	r2, #16
 80072da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	893a      	ldrh	r2, [r7, #8]
 80072ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4a50      	ldr	r2, [pc, #320]	; (8007440 <HAL_I2C_Master_Transmit+0x1f8>)
 80072fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007300:	8979      	ldrh	r1, [r7, #10]
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	6a3a      	ldr	r2, [r7, #32]
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f000 fac4 	bl	8007894 <I2C_MasterRequestWrite>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e08d      	b.n	8007432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007316:	2300      	movs	r3, #0
 8007318:	613b      	str	r3, [r7, #16]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	613b      	str	r3, [r7, #16]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	613b      	str	r3, [r7, #16]
 800732a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800732c:	e066      	b.n	80073fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	6a39      	ldr	r1, [r7, #32]
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f000 fc9c 	bl	8007c70 <I2C_WaitOnTXEFlagUntilTimeout>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00d      	beq.n	800735a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	2b04      	cmp	r3, #4
 8007344:	d107      	bne.n	8007356 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007354:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e06b      	b.n	8007432 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	781a      	ldrb	r2, [r3, #0]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736a:	1c5a      	adds	r2, r3, #1
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007374:	b29b      	uxth	r3, r3
 8007376:	3b01      	subs	r3, #1
 8007378:	b29a      	uxth	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007382:	3b01      	subs	r3, #1
 8007384:	b29a      	uxth	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	f003 0304 	and.w	r3, r3, #4
 8007394:	2b04      	cmp	r3, #4
 8007396:	d11b      	bne.n	80073d0 <HAL_I2C_Master_Transmit+0x188>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800739c:	2b00      	cmp	r3, #0
 800739e:	d017      	beq.n	80073d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	781a      	ldrb	r2, [r3, #0]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	3b01      	subs	r3, #1
 80073be:	b29a      	uxth	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073c8:	3b01      	subs	r3, #1
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	6a39      	ldr	r1, [r7, #32]
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f000 fc8c 	bl	8007cf2 <I2C_WaitOnBTFFlagUntilTimeout>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00d      	beq.n	80073fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	d107      	bne.n	80073f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e01a      	b.n	8007432 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007400:	2b00      	cmp	r3, #0
 8007402:	d194      	bne.n	800732e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2220      	movs	r2, #32
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	e000      	b.n	8007432 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007430:	2302      	movs	r3, #2
  }
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	00100002 	.word	0x00100002
 8007440:	ffff0000 	.word	0xffff0000

08007444 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b088      	sub	sp, #32
 8007448:	af02      	add	r7, sp, #8
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	4608      	mov	r0, r1
 800744e:	4611      	mov	r1, r2
 8007450:	461a      	mov	r2, r3
 8007452:	4603      	mov	r3, r0
 8007454:	817b      	strh	r3, [r7, #10]
 8007456:	460b      	mov	r3, r1
 8007458:	813b      	strh	r3, [r7, #8]
 800745a:	4613      	mov	r3, r2
 800745c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800745e:	f7fd fefb 	bl	8005258 <HAL_GetTick>
 8007462:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b20      	cmp	r3, #32
 800746e:	f040 80d9 	bne.w	8007624 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	2319      	movs	r3, #25
 8007478:	2201      	movs	r2, #1
 800747a:	496d      	ldr	r1, [pc, #436]	; (8007630 <HAL_I2C_Mem_Write+0x1ec>)
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f000 fb21 	bl	8007ac4 <I2C_WaitOnFlagUntilTimeout>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d001      	beq.n	800748c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007488:	2302      	movs	r3, #2
 800748a:	e0cc      	b.n	8007626 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007492:	2b01      	cmp	r3, #1
 8007494:	d101      	bne.n	800749a <HAL_I2C_Mem_Write+0x56>
 8007496:	2302      	movs	r3, #2
 8007498:	e0c5      	b.n	8007626 <HAL_I2C_Mem_Write+0x1e2>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d007      	beq.n	80074c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f042 0201 	orr.w	r2, r2, #1
 80074be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2221      	movs	r2, #33	; 0x21
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2240      	movs	r2, #64	; 0x40
 80074dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6a3a      	ldr	r2, [r7, #32]
 80074ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	4a4d      	ldr	r2, [pc, #308]	; (8007634 <HAL_I2C_Mem_Write+0x1f0>)
 8007500:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007502:	88f8      	ldrh	r0, [r7, #6]
 8007504:	893a      	ldrh	r2, [r7, #8]
 8007506:	8979      	ldrh	r1, [r7, #10]
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	9301      	str	r3, [sp, #4]
 800750c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	4603      	mov	r3, r0
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f000 fa40 	bl	8007998 <I2C_RequestMemoryWrite>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d052      	beq.n	80075c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e081      	b.n	8007626 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f000 fba2 	bl	8007c70 <I2C_WaitOnTXEFlagUntilTimeout>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00d      	beq.n	800754e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	2b04      	cmp	r3, #4
 8007538:	d107      	bne.n	800754a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007548:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e06b      	b.n	8007626 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007552:	781a      	ldrb	r2, [r3, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755e:	1c5a      	adds	r2, r3, #1
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007568:	3b01      	subs	r3, #1
 800756a:	b29a      	uxth	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007574:	b29b      	uxth	r3, r3
 8007576:	3b01      	subs	r3, #1
 8007578:	b29a      	uxth	r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	f003 0304 	and.w	r3, r3, #4
 8007588:	2b04      	cmp	r3, #4
 800758a:	d11b      	bne.n	80075c4 <HAL_I2C_Mem_Write+0x180>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007590:	2b00      	cmp	r3, #0
 8007592:	d017      	beq.n	80075c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	781a      	ldrb	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ae:	3b01      	subs	r3, #1
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	3b01      	subs	r3, #1
 80075be:	b29a      	uxth	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1aa      	bne.n	8007522 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f000 fb8e 	bl	8007cf2 <I2C_WaitOnBTFFlagUntilTimeout>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00d      	beq.n	80075f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e0:	2b04      	cmp	r3, #4
 80075e2:	d107      	bne.n	80075f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e016      	b.n	8007626 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2220      	movs	r2, #32
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007620:	2300      	movs	r3, #0
 8007622:	e000      	b.n	8007626 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007624:	2302      	movs	r3, #2
  }
}
 8007626:	4618      	mov	r0, r3
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	00100002 	.word	0x00100002
 8007634:	ffff0000 	.word	0xffff0000

08007638 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b08a      	sub	sp, #40	; 0x28
 800763c:	af02      	add	r7, sp, #8
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	607a      	str	r2, [r7, #4]
 8007642:	603b      	str	r3, [r7, #0]
 8007644:	460b      	mov	r3, r1
 8007646:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007648:	f7fd fe06 	bl	8005258 <HAL_GetTick>
 800764c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800764e:	2300      	movs	r3, #0
 8007650:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b20      	cmp	r3, #32
 800765c:	f040 8111 	bne.w	8007882 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	2319      	movs	r3, #25
 8007666:	2201      	movs	r2, #1
 8007668:	4988      	ldr	r1, [pc, #544]	; (800788c <HAL_I2C_IsDeviceReady+0x254>)
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f000 fa2a 	bl	8007ac4 <I2C_WaitOnFlagUntilTimeout>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d001      	beq.n	800767a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007676:	2302      	movs	r3, #2
 8007678:	e104      	b.n	8007884 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007680:	2b01      	cmp	r3, #1
 8007682:	d101      	bne.n	8007688 <HAL_I2C_IsDeviceReady+0x50>
 8007684:	2302      	movs	r3, #2
 8007686:	e0fd      	b.n	8007884 <HAL_I2C_IsDeviceReady+0x24c>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b01      	cmp	r3, #1
 800769c:	d007      	beq.n	80076ae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f042 0201 	orr.w	r2, r2, #1
 80076ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2224      	movs	r2, #36	; 0x24
 80076c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4a70      	ldr	r2, [pc, #448]	; (8007890 <HAL_I2C_IsDeviceReady+0x258>)
 80076d0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076e0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f000 f9e8 	bl	8007ac4 <I2C_WaitOnFlagUntilTimeout>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00d      	beq.n	8007716 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007708:	d103      	bne.n	8007712 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007710:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e0b6      	b.n	8007884 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007716:	897b      	ldrh	r3, [r7, #10]
 8007718:	b2db      	uxtb	r3, r3
 800771a:	461a      	mov	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007724:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007726:	f7fd fd97 	bl	8005258 <HAL_GetTick>
 800772a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b02      	cmp	r3, #2
 8007738:	bf0c      	ite	eq
 800773a:	2301      	moveq	r3, #1
 800773c:	2300      	movne	r3, #0
 800773e:	b2db      	uxtb	r3, r3
 8007740:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	695b      	ldr	r3, [r3, #20]
 8007748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800774c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007750:	bf0c      	ite	eq
 8007752:	2301      	moveq	r3, #1
 8007754:	2300      	movne	r3, #0
 8007756:	b2db      	uxtb	r3, r3
 8007758:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800775a:	e025      	b.n	80077a8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800775c:	f7fd fd7c 	bl	8005258 <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	429a      	cmp	r2, r3
 800776a:	d302      	bcc.n	8007772 <HAL_I2C_IsDeviceReady+0x13a>
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d103      	bne.n	800777a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	22a0      	movs	r2, #160	; 0xa0
 8007776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	f003 0302 	and.w	r3, r3, #2
 8007784:	2b02      	cmp	r3, #2
 8007786:	bf0c      	ite	eq
 8007788:	2301      	moveq	r3, #1
 800778a:	2300      	movne	r3, #0
 800778c:	b2db      	uxtb	r3, r3
 800778e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800779a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800779e:	bf0c      	ite	eq
 80077a0:	2301      	moveq	r3, #1
 80077a2:	2300      	movne	r3, #0
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2ba0      	cmp	r3, #160	; 0xa0
 80077b2:	d005      	beq.n	80077c0 <HAL_I2C_IsDeviceReady+0x188>
 80077b4:	7dfb      	ldrb	r3, [r7, #23]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d102      	bne.n	80077c0 <HAL_I2C_IsDeviceReady+0x188>
 80077ba:	7dbb      	ldrb	r3, [r7, #22]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d0cd      	beq.n	800775c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2220      	movs	r2, #32
 80077c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d129      	bne.n	800782a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077e4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077e6:	2300      	movs	r3, #0
 80077e8:	613b      	str	r3, [r7, #16]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	613b      	str	r3, [r7, #16]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	613b      	str	r3, [r7, #16]
 80077fa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	2319      	movs	r3, #25
 8007802:	2201      	movs	r2, #1
 8007804:	4921      	ldr	r1, [pc, #132]	; (800788c <HAL_I2C_IsDeviceReady+0x254>)
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f000 f95c 	bl	8007ac4 <I2C_WaitOnFlagUntilTimeout>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d001      	beq.n	8007816 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e036      	b.n	8007884 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2220      	movs	r2, #32
 800781a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	e02c      	b.n	8007884 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007838:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007842:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	2319      	movs	r3, #25
 800784a:	2201      	movs	r2, #1
 800784c:	490f      	ldr	r1, [pc, #60]	; (800788c <HAL_I2C_IsDeviceReady+0x254>)
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f000 f938 	bl	8007ac4 <I2C_WaitOnFlagUntilTimeout>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d001      	beq.n	800785e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e012      	b.n	8007884 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	3301      	adds	r3, #1
 8007862:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007864:	69ba      	ldr	r2, [r7, #24]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	429a      	cmp	r2, r3
 800786a:	f4ff af32 	bcc.w	80076d2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2220      	movs	r2, #32
 8007872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e000      	b.n	8007884 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007882:	2302      	movs	r3, #2
  }
}
 8007884:	4618      	mov	r0, r3
 8007886:	3720      	adds	r7, #32
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	00100002 	.word	0x00100002
 8007890:	ffff0000 	.word	0xffff0000

08007894 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b088      	sub	sp, #32
 8007898:	af02      	add	r7, sp, #8
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	607a      	str	r2, [r7, #4]
 800789e:	603b      	str	r3, [r7, #0]
 80078a0:	460b      	mov	r3, r1
 80078a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	2b08      	cmp	r3, #8
 80078ae:	d006      	beq.n	80078be <I2C_MasterRequestWrite+0x2a>
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d003      	beq.n	80078be <I2C_MasterRequestWrite+0x2a>
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80078bc:	d108      	bne.n	80078d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	e00b      	b.n	80078e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d4:	2b12      	cmp	r3, #18
 80078d6:	d107      	bne.n	80078e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 f8e5 	bl	8007ac4 <I2C_WaitOnFlagUntilTimeout>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00d      	beq.n	800791c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800790a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800790e:	d103      	bne.n	8007918 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007916:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e035      	b.n	8007988 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007924:	d108      	bne.n	8007938 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007926:	897b      	ldrh	r3, [r7, #10]
 8007928:	b2db      	uxtb	r3, r3
 800792a:	461a      	mov	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007934:	611a      	str	r2, [r3, #16]
 8007936:	e01b      	b.n	8007970 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007938:	897b      	ldrh	r3, [r7, #10]
 800793a:	11db      	asrs	r3, r3, #7
 800793c:	b2db      	uxtb	r3, r3
 800793e:	f003 0306 	and.w	r3, r3, #6
 8007942:	b2db      	uxtb	r3, r3
 8007944:	f063 030f 	orn	r3, r3, #15
 8007948:	b2da      	uxtb	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	490e      	ldr	r1, [pc, #56]	; (8007990 <I2C_MasterRequestWrite+0xfc>)
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 f90b 	bl	8007b72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e010      	b.n	8007988 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007966:	897b      	ldrh	r3, [r7, #10]
 8007968:	b2da      	uxtb	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	4907      	ldr	r1, [pc, #28]	; (8007994 <I2C_MasterRequestWrite+0x100>)
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f000 f8fb 	bl	8007b72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d001      	beq.n	8007986 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e000      	b.n	8007988 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3718      	adds	r7, #24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	00010008 	.word	0x00010008
 8007994:	00010002 	.word	0x00010002

08007998 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b088      	sub	sp, #32
 800799c:	af02      	add	r7, sp, #8
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	4608      	mov	r0, r1
 80079a2:	4611      	mov	r1, r2
 80079a4:	461a      	mov	r2, r3
 80079a6:	4603      	mov	r3, r0
 80079a8:	817b      	strh	r3, [r7, #10]
 80079aa:	460b      	mov	r3, r1
 80079ac:	813b      	strh	r3, [r7, #8]
 80079ae:	4613      	mov	r3, r2
 80079b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f000 f878 	bl	8007ac4 <I2C_WaitOnFlagUntilTimeout>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00d      	beq.n	80079f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079e8:	d103      	bne.n	80079f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e05f      	b.n	8007ab6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80079f6:	897b      	ldrh	r3, [r7, #10]
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	461a      	mov	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	6a3a      	ldr	r2, [r7, #32]
 8007a0a:	492d      	ldr	r1, [pc, #180]	; (8007ac0 <I2C_RequestMemoryWrite+0x128>)
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 f8b0 	bl	8007b72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e04c      	b.n	8007ab6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	617b      	str	r3, [r7, #20]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	617b      	str	r3, [r7, #20]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	617b      	str	r3, [r7, #20]
 8007a30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a34:	6a39      	ldr	r1, [r7, #32]
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 f91a 	bl	8007c70 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00d      	beq.n	8007a5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a46:	2b04      	cmp	r3, #4
 8007a48:	d107      	bne.n	8007a5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e02b      	b.n	8007ab6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a5e:	88fb      	ldrh	r3, [r7, #6]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d105      	bne.n	8007a70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a64:	893b      	ldrh	r3, [r7, #8]
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	611a      	str	r2, [r3, #16]
 8007a6e:	e021      	b.n	8007ab4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007a70:	893b      	ldrh	r3, [r7, #8]
 8007a72:	0a1b      	lsrs	r3, r3, #8
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a80:	6a39      	ldr	r1, [r7, #32]
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f000 f8f4 	bl	8007c70 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00d      	beq.n	8007aaa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a92:	2b04      	cmp	r3, #4
 8007a94:	d107      	bne.n	8007aa6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aa4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e005      	b.n	8007ab6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007aaa:	893b      	ldrh	r3, [r7, #8]
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	00010002 	.word	0x00010002

08007ac4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	603b      	str	r3, [r7, #0]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ad4:	e025      	b.n	8007b22 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007adc:	d021      	beq.n	8007b22 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ade:	f7fd fbbb 	bl	8005258 <HAL_GetTick>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d302      	bcc.n	8007af4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d116      	bne.n	8007b22 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2220      	movs	r2, #32
 8007afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0e:	f043 0220 	orr.w	r2, r3, #32
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e023      	b.n	8007b6a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	0c1b      	lsrs	r3, r3, #16
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d10d      	bne.n	8007b48 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	43da      	mvns	r2, r3
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	4013      	ands	r3, r2
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	bf0c      	ite	eq
 8007b3e:	2301      	moveq	r3, #1
 8007b40:	2300      	movne	r3, #0
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	461a      	mov	r2, r3
 8007b46:	e00c      	b.n	8007b62 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	43da      	mvns	r2, r3
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	4013      	ands	r3, r2
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	bf0c      	ite	eq
 8007b5a:	2301      	moveq	r3, #1
 8007b5c:	2300      	movne	r3, #0
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	461a      	mov	r2, r3
 8007b62:	79fb      	ldrb	r3, [r7, #7]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d0b6      	beq.n	8007ad6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b084      	sub	sp, #16
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	60f8      	str	r0, [r7, #12]
 8007b7a:	60b9      	str	r1, [r7, #8]
 8007b7c:	607a      	str	r2, [r7, #4]
 8007b7e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b80:	e051      	b.n	8007c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b90:	d123      	bne.n	8007bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ba0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007baa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2220      	movs	r2, #32
 8007bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc6:	f043 0204 	orr.w	r2, r3, #4
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e046      	b.n	8007c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007be0:	d021      	beq.n	8007c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007be2:	f7fd fb39 	bl	8005258 <HAL_GetTick>
 8007be6:	4602      	mov	r2, r0
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d302      	bcc.n	8007bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d116      	bne.n	8007c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2220      	movs	r2, #32
 8007c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c12:	f043 0220 	orr.w	r2, r3, #32
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e020      	b.n	8007c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	0c1b      	lsrs	r3, r3, #16
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d10c      	bne.n	8007c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	43da      	mvns	r2, r3
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	bf14      	ite	ne
 8007c42:	2301      	movne	r3, #1
 8007c44:	2300      	moveq	r3, #0
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	e00b      	b.n	8007c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	43da      	mvns	r2, r3
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	4013      	ands	r3, r2
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	bf14      	ite	ne
 8007c5c:	2301      	movne	r3, #1
 8007c5e:	2300      	moveq	r3, #0
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d18d      	bne.n	8007b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c7c:	e02d      	b.n	8007cda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f000 f878 	bl	8007d74 <I2C_IsAcknowledgeFailed>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e02d      	b.n	8007cea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c94:	d021      	beq.n	8007cda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c96:	f7fd fadf 	bl	8005258 <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d302      	bcc.n	8007cac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d116      	bne.n	8007cda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2220      	movs	r2, #32
 8007cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc6:	f043 0220 	orr.w	r2, r3, #32
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e007      	b.n	8007cea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	695b      	ldr	r3, [r3, #20]
 8007ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce4:	2b80      	cmp	r3, #128	; 0x80
 8007ce6:	d1ca      	bne.n	8007c7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b084      	sub	sp, #16
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	60f8      	str	r0, [r7, #12]
 8007cfa:	60b9      	str	r1, [r7, #8]
 8007cfc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007cfe:	e02d      	b.n	8007d5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f000 f837 	bl	8007d74 <I2C_IsAcknowledgeFailed>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e02d      	b.n	8007d6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d16:	d021      	beq.n	8007d5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d18:	f7fd fa9e 	bl	8005258 <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d302      	bcc.n	8007d2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d116      	bne.n	8007d5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2220      	movs	r2, #32
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d48:	f043 0220 	orr.w	r2, r3, #32
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e007      	b.n	8007d6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	695b      	ldr	r3, [r3, #20]
 8007d62:	f003 0304 	and.w	r3, r3, #4
 8007d66:	2b04      	cmp	r3, #4
 8007d68:	d1ca      	bne.n	8007d00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d8a:	d11b      	bne.n	8007dc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db0:	f043 0204 	orr.w	r2, r3, #4
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e000      	b.n	8007dc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b083      	sub	sp, #12
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b20      	cmp	r3, #32
 8007de6:	d129      	bne.n	8007e3c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2224      	movs	r2, #36	; 0x24
 8007dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f022 0201 	bic.w	r2, r2, #1
 8007dfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f022 0210 	bic.w	r2, r2, #16
 8007e0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f042 0201 	orr.w	r2, r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2220      	movs	r2, #32
 8007e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	e000      	b.n	8007e3e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007e3c:	2302      	movs	r3, #2
  }
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b085      	sub	sp, #20
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007e54:	2300      	movs	r3, #0
 8007e56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b20      	cmp	r3, #32
 8007e62:	d12a      	bne.n	8007eba <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2224      	movs	r2, #36	; 0x24
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f022 0201 	bic.w	r2, r2, #1
 8007e7a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007e84:	89fb      	ldrh	r3, [r7, #14]
 8007e86:	f023 030f 	bic.w	r3, r3, #15
 8007e8a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	89fb      	ldrh	r3, [r7, #14]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	89fa      	ldrh	r2, [r7, #14]
 8007e9c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f042 0201 	orr.w	r2, r2, #1
 8007eac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2220      	movs	r2, #32
 8007eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	e000      	b.n	8007ebc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007eba:	2302      	movs	r3, #2
  }
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3714      	adds	r7, #20
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eca:	b08f      	sub	sp, #60	; 0x3c
 8007ecc:	af0a      	add	r7, sp, #40	; 0x28
 8007ece:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e10f      	b.n	80080fa <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d106      	bne.n	8007efa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f7fd f801 	bl	8004efc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2203      	movs	r2, #3
 8007efe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d102      	bne.n	8007f14 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f001 fe6c 	bl	8009bf6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	603b      	str	r3, [r7, #0]
 8007f24:	687e      	ldr	r6, [r7, #4]
 8007f26:	466d      	mov	r5, sp
 8007f28:	f106 0410 	add.w	r4, r6, #16
 8007f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007f38:	e885 0003 	stmia.w	r5, {r0, r1}
 8007f3c:	1d33      	adds	r3, r6, #4
 8007f3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f40:	6838      	ldr	r0, [r7, #0]
 8007f42:	f001 fdf7 	bl	8009b34 <USB_CoreInit>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d005      	beq.n	8007f58 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e0d0      	b.n	80080fa <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f001 fe5a 	bl	8009c18 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f64:	2300      	movs	r3, #0
 8007f66:	73fb      	strb	r3, [r7, #15]
 8007f68:	e04a      	b.n	8008000 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007f6a:	7bfa      	ldrb	r2, [r7, #15]
 8007f6c:	6879      	ldr	r1, [r7, #4]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	00db      	lsls	r3, r3, #3
 8007f72:	4413      	add	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	440b      	add	r3, r1
 8007f78:	333d      	adds	r3, #61	; 0x3d
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007f7e:	7bfa      	ldrb	r2, [r7, #15]
 8007f80:	6879      	ldr	r1, [r7, #4]
 8007f82:	4613      	mov	r3, r2
 8007f84:	00db      	lsls	r3, r3, #3
 8007f86:	4413      	add	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	440b      	add	r3, r1
 8007f8c:	333c      	adds	r3, #60	; 0x3c
 8007f8e:	7bfa      	ldrb	r2, [r7, #15]
 8007f90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007f92:	7bfa      	ldrb	r2, [r7, #15]
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
 8007f96:	b298      	uxth	r0, r3
 8007f98:	6879      	ldr	r1, [r7, #4]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	00db      	lsls	r3, r3, #3
 8007f9e:	4413      	add	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	440b      	add	r3, r1
 8007fa4:	3344      	adds	r3, #68	; 0x44
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007faa:	7bfa      	ldrb	r2, [r7, #15]
 8007fac:	6879      	ldr	r1, [r7, #4]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	00db      	lsls	r3, r3, #3
 8007fb2:	4413      	add	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	440b      	add	r3, r1
 8007fb8:	3340      	adds	r3, #64	; 0x40
 8007fba:	2200      	movs	r2, #0
 8007fbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007fbe:	7bfa      	ldrb	r2, [r7, #15]
 8007fc0:	6879      	ldr	r1, [r7, #4]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	00db      	lsls	r3, r3, #3
 8007fc6:	4413      	add	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	440b      	add	r3, r1
 8007fcc:	3348      	adds	r3, #72	; 0x48
 8007fce:	2200      	movs	r2, #0
 8007fd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007fd2:	7bfa      	ldrb	r2, [r7, #15]
 8007fd4:	6879      	ldr	r1, [r7, #4]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	00db      	lsls	r3, r3, #3
 8007fda:	4413      	add	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	440b      	add	r3, r1
 8007fe0:	334c      	adds	r3, #76	; 0x4c
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007fe6:	7bfa      	ldrb	r2, [r7, #15]
 8007fe8:	6879      	ldr	r1, [r7, #4]
 8007fea:	4613      	mov	r3, r2
 8007fec:	00db      	lsls	r3, r3, #3
 8007fee:	4413      	add	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	440b      	add	r3, r1
 8007ff4:	3354      	adds	r3, #84	; 0x54
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ffa:	7bfb      	ldrb	r3, [r7, #15]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	73fb      	strb	r3, [r7, #15]
 8008000:	7bfa      	ldrb	r2, [r7, #15]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	429a      	cmp	r2, r3
 8008008:	d3af      	bcc.n	8007f6a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800800a:	2300      	movs	r3, #0
 800800c:	73fb      	strb	r3, [r7, #15]
 800800e:	e044      	b.n	800809a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008010:	7bfa      	ldrb	r2, [r7, #15]
 8008012:	6879      	ldr	r1, [r7, #4]
 8008014:	4613      	mov	r3, r2
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	4413      	add	r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	440b      	add	r3, r1
 800801e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008022:	2200      	movs	r2, #0
 8008024:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008026:	7bfa      	ldrb	r2, [r7, #15]
 8008028:	6879      	ldr	r1, [r7, #4]
 800802a:	4613      	mov	r3, r2
 800802c:	00db      	lsls	r3, r3, #3
 800802e:	4413      	add	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	440b      	add	r3, r1
 8008034:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008038:	7bfa      	ldrb	r2, [r7, #15]
 800803a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800803c:	7bfa      	ldrb	r2, [r7, #15]
 800803e:	6879      	ldr	r1, [r7, #4]
 8008040:	4613      	mov	r3, r2
 8008042:	00db      	lsls	r3, r3, #3
 8008044:	4413      	add	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	440b      	add	r3, r1
 800804a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800804e:	2200      	movs	r2, #0
 8008050:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008052:	7bfa      	ldrb	r2, [r7, #15]
 8008054:	6879      	ldr	r1, [r7, #4]
 8008056:	4613      	mov	r3, r2
 8008058:	00db      	lsls	r3, r3, #3
 800805a:	4413      	add	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	440b      	add	r3, r1
 8008060:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008064:	2200      	movs	r2, #0
 8008066:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008068:	7bfa      	ldrb	r2, [r7, #15]
 800806a:	6879      	ldr	r1, [r7, #4]
 800806c:	4613      	mov	r3, r2
 800806e:	00db      	lsls	r3, r3, #3
 8008070:	4413      	add	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	440b      	add	r3, r1
 8008076:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800807a:	2200      	movs	r2, #0
 800807c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800807e:	7bfa      	ldrb	r2, [r7, #15]
 8008080:	6879      	ldr	r1, [r7, #4]
 8008082:	4613      	mov	r3, r2
 8008084:	00db      	lsls	r3, r3, #3
 8008086:	4413      	add	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	440b      	add	r3, r1
 800808c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008090:	2200      	movs	r2, #0
 8008092:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008094:	7bfb      	ldrb	r3, [r7, #15]
 8008096:	3301      	adds	r3, #1
 8008098:	73fb      	strb	r3, [r7, #15]
 800809a:	7bfa      	ldrb	r2, [r7, #15]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d3b5      	bcc.n	8008010 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	603b      	str	r3, [r7, #0]
 80080aa:	687e      	ldr	r6, [r7, #4]
 80080ac:	466d      	mov	r5, sp
 80080ae:	f106 0410 	add.w	r4, r6, #16
 80080b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80080b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80080ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80080be:	e885 0003 	stmia.w	r5, {r0, r1}
 80080c2:	1d33      	adds	r3, r6, #4
 80080c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080c6:	6838      	ldr	r0, [r7, #0]
 80080c8:	f001 fdf2 	bl	8009cb0 <USB_DevInit>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d005      	beq.n	80080de <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2202      	movs	r2, #2
 80080d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e00d      	b.n	80080fa <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f001 ffbd 	bl	800a072 <USB_DevDisconnect>

  return HAL_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3714      	adds	r7, #20
 80080fe:	46bd      	mov	sp, r7
 8008100:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008104 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d101      	bne.n	8008116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e267      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	2b00      	cmp	r3, #0
 8008120:	d075      	beq.n	800820e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008122:	4b88      	ldr	r3, [pc, #544]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f003 030c 	and.w	r3, r3, #12
 800812a:	2b04      	cmp	r3, #4
 800812c:	d00c      	beq.n	8008148 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800812e:	4b85      	ldr	r3, [pc, #532]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008136:	2b08      	cmp	r3, #8
 8008138:	d112      	bne.n	8008160 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800813a:	4b82      	ldr	r3, [pc, #520]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008142:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008146:	d10b      	bne.n	8008160 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008148:	4b7e      	ldr	r3, [pc, #504]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008150:	2b00      	cmp	r3, #0
 8008152:	d05b      	beq.n	800820c <HAL_RCC_OscConfig+0x108>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d157      	bne.n	800820c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e242      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008168:	d106      	bne.n	8008178 <HAL_RCC_OscConfig+0x74>
 800816a:	4b76      	ldr	r3, [pc, #472]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a75      	ldr	r2, [pc, #468]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 8008170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008174:	6013      	str	r3, [r2, #0]
 8008176:	e01d      	b.n	80081b4 <HAL_RCC_OscConfig+0xb0>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008180:	d10c      	bne.n	800819c <HAL_RCC_OscConfig+0x98>
 8008182:	4b70      	ldr	r3, [pc, #448]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a6f      	ldr	r2, [pc, #444]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 8008188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800818c:	6013      	str	r3, [r2, #0]
 800818e:	4b6d      	ldr	r3, [pc, #436]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a6c      	ldr	r2, [pc, #432]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 8008194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	e00b      	b.n	80081b4 <HAL_RCC_OscConfig+0xb0>
 800819c:	4b69      	ldr	r3, [pc, #420]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a68      	ldr	r2, [pc, #416]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 80081a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081a6:	6013      	str	r3, [r2, #0]
 80081a8:	4b66      	ldr	r3, [pc, #408]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a65      	ldr	r2, [pc, #404]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 80081ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d013      	beq.n	80081e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081bc:	f7fd f84c 	bl	8005258 <HAL_GetTick>
 80081c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081c2:	e008      	b.n	80081d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081c4:	f7fd f848 	bl	8005258 <HAL_GetTick>
 80081c8:	4602      	mov	r2, r0
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	2b64      	cmp	r3, #100	; 0x64
 80081d0:	d901      	bls.n	80081d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80081d2:	2303      	movs	r3, #3
 80081d4:	e207      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081d6:	4b5b      	ldr	r3, [pc, #364]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d0f0      	beq.n	80081c4 <HAL_RCC_OscConfig+0xc0>
 80081e2:	e014      	b.n	800820e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081e4:	f7fd f838 	bl	8005258 <HAL_GetTick>
 80081e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80081ea:	e008      	b.n	80081fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081ec:	f7fd f834 	bl	8005258 <HAL_GetTick>
 80081f0:	4602      	mov	r2, r0
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	2b64      	cmp	r3, #100	; 0x64
 80081f8:	d901      	bls.n	80081fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e1f3      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80081fe:	4b51      	ldr	r3, [pc, #324]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1f0      	bne.n	80081ec <HAL_RCC_OscConfig+0xe8>
 800820a:	e000      	b.n	800820e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800820c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 0302 	and.w	r3, r3, #2
 8008216:	2b00      	cmp	r3, #0
 8008218:	d063      	beq.n	80082e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800821a:	4b4a      	ldr	r3, [pc, #296]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	f003 030c 	and.w	r3, r3, #12
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00b      	beq.n	800823e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008226:	4b47      	ldr	r3, [pc, #284]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800822e:	2b08      	cmp	r3, #8
 8008230:	d11c      	bne.n	800826c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008232:	4b44      	ldr	r3, [pc, #272]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d116      	bne.n	800826c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800823e:	4b41      	ldr	r3, [pc, #260]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 0302 	and.w	r3, r3, #2
 8008246:	2b00      	cmp	r3, #0
 8008248:	d005      	beq.n	8008256 <HAL_RCC_OscConfig+0x152>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d001      	beq.n	8008256 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e1c7      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008256:	4b3b      	ldr	r3, [pc, #236]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	00db      	lsls	r3, r3, #3
 8008264:	4937      	ldr	r1, [pc, #220]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 8008266:	4313      	orrs	r3, r2
 8008268:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800826a:	e03a      	b.n	80082e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d020      	beq.n	80082b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008274:	4b34      	ldr	r3, [pc, #208]	; (8008348 <HAL_RCC_OscConfig+0x244>)
 8008276:	2201      	movs	r2, #1
 8008278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800827a:	f7fc ffed 	bl	8005258 <HAL_GetTick>
 800827e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008280:	e008      	b.n	8008294 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008282:	f7fc ffe9 	bl	8005258 <HAL_GetTick>
 8008286:	4602      	mov	r2, r0
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	2b02      	cmp	r3, #2
 800828e:	d901      	bls.n	8008294 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	e1a8      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008294:	4b2b      	ldr	r3, [pc, #172]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0302 	and.w	r3, r3, #2
 800829c:	2b00      	cmp	r3, #0
 800829e:	d0f0      	beq.n	8008282 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082a0:	4b28      	ldr	r3, [pc, #160]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	00db      	lsls	r3, r3, #3
 80082ae:	4925      	ldr	r1, [pc, #148]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 80082b0:	4313      	orrs	r3, r2
 80082b2:	600b      	str	r3, [r1, #0]
 80082b4:	e015      	b.n	80082e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082b6:	4b24      	ldr	r3, [pc, #144]	; (8008348 <HAL_RCC_OscConfig+0x244>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082bc:	f7fc ffcc 	bl	8005258 <HAL_GetTick>
 80082c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082c2:	e008      	b.n	80082d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082c4:	f7fc ffc8 	bl	8005258 <HAL_GetTick>
 80082c8:	4602      	mov	r2, r0
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d901      	bls.n	80082d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e187      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082d6:	4b1b      	ldr	r3, [pc, #108]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0302 	and.w	r3, r3, #2
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1f0      	bne.n	80082c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0308 	and.w	r3, r3, #8
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d036      	beq.n	800835c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d016      	beq.n	8008324 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082f6:	4b15      	ldr	r3, [pc, #84]	; (800834c <HAL_RCC_OscConfig+0x248>)
 80082f8:	2201      	movs	r2, #1
 80082fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082fc:	f7fc ffac 	bl	8005258 <HAL_GetTick>
 8008300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008302:	e008      	b.n	8008316 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008304:	f7fc ffa8 	bl	8005258 <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	2b02      	cmp	r3, #2
 8008310:	d901      	bls.n	8008316 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008312:	2303      	movs	r3, #3
 8008314:	e167      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008316:	4b0b      	ldr	r3, [pc, #44]	; (8008344 <HAL_RCC_OscConfig+0x240>)
 8008318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800831a:	f003 0302 	and.w	r3, r3, #2
 800831e:	2b00      	cmp	r3, #0
 8008320:	d0f0      	beq.n	8008304 <HAL_RCC_OscConfig+0x200>
 8008322:	e01b      	b.n	800835c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008324:	4b09      	ldr	r3, [pc, #36]	; (800834c <HAL_RCC_OscConfig+0x248>)
 8008326:	2200      	movs	r2, #0
 8008328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800832a:	f7fc ff95 	bl	8005258 <HAL_GetTick>
 800832e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008330:	e00e      	b.n	8008350 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008332:	f7fc ff91 	bl	8005258 <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	2b02      	cmp	r3, #2
 800833e:	d907      	bls.n	8008350 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e150      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
 8008344:	40023800 	.word	0x40023800
 8008348:	42470000 	.word	0x42470000
 800834c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008350:	4b88      	ldr	r3, [pc, #544]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 8008352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008354:	f003 0302 	and.w	r3, r3, #2
 8008358:	2b00      	cmp	r3, #0
 800835a:	d1ea      	bne.n	8008332 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 0304 	and.w	r3, r3, #4
 8008364:	2b00      	cmp	r3, #0
 8008366:	f000 8097 	beq.w	8008498 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800836a:	2300      	movs	r3, #0
 800836c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800836e:	4b81      	ldr	r3, [pc, #516]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 8008370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10f      	bne.n	800839a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800837a:	2300      	movs	r3, #0
 800837c:	60bb      	str	r3, [r7, #8]
 800837e:	4b7d      	ldr	r3, [pc, #500]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 8008380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008382:	4a7c      	ldr	r2, [pc, #496]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 8008384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008388:	6413      	str	r3, [r2, #64]	; 0x40
 800838a:	4b7a      	ldr	r3, [pc, #488]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 800838c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008392:	60bb      	str	r3, [r7, #8]
 8008394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008396:	2301      	movs	r3, #1
 8008398:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800839a:	4b77      	ldr	r3, [pc, #476]	; (8008578 <HAL_RCC_OscConfig+0x474>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d118      	bne.n	80083d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80083a6:	4b74      	ldr	r3, [pc, #464]	; (8008578 <HAL_RCC_OscConfig+0x474>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a73      	ldr	r2, [pc, #460]	; (8008578 <HAL_RCC_OscConfig+0x474>)
 80083ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083b2:	f7fc ff51 	bl	8005258 <HAL_GetTick>
 80083b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083b8:	e008      	b.n	80083cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083ba:	f7fc ff4d 	bl	8005258 <HAL_GetTick>
 80083be:	4602      	mov	r2, r0
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	1ad3      	subs	r3, r2, r3
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d901      	bls.n	80083cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e10c      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083cc:	4b6a      	ldr	r3, [pc, #424]	; (8008578 <HAL_RCC_OscConfig+0x474>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d0f0      	beq.n	80083ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d106      	bne.n	80083ee <HAL_RCC_OscConfig+0x2ea>
 80083e0:	4b64      	ldr	r3, [pc, #400]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 80083e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e4:	4a63      	ldr	r2, [pc, #396]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 80083e6:	f043 0301 	orr.w	r3, r3, #1
 80083ea:	6713      	str	r3, [r2, #112]	; 0x70
 80083ec:	e01c      	b.n	8008428 <HAL_RCC_OscConfig+0x324>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	2b05      	cmp	r3, #5
 80083f4:	d10c      	bne.n	8008410 <HAL_RCC_OscConfig+0x30c>
 80083f6:	4b5f      	ldr	r3, [pc, #380]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 80083f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083fa:	4a5e      	ldr	r2, [pc, #376]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 80083fc:	f043 0304 	orr.w	r3, r3, #4
 8008400:	6713      	str	r3, [r2, #112]	; 0x70
 8008402:	4b5c      	ldr	r3, [pc, #368]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 8008404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008406:	4a5b      	ldr	r2, [pc, #364]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 8008408:	f043 0301 	orr.w	r3, r3, #1
 800840c:	6713      	str	r3, [r2, #112]	; 0x70
 800840e:	e00b      	b.n	8008428 <HAL_RCC_OscConfig+0x324>
 8008410:	4b58      	ldr	r3, [pc, #352]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 8008412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008414:	4a57      	ldr	r2, [pc, #348]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 8008416:	f023 0301 	bic.w	r3, r3, #1
 800841a:	6713      	str	r3, [r2, #112]	; 0x70
 800841c:	4b55      	ldr	r3, [pc, #340]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 800841e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008420:	4a54      	ldr	r2, [pc, #336]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 8008422:	f023 0304 	bic.w	r3, r3, #4
 8008426:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d015      	beq.n	800845c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008430:	f7fc ff12 	bl	8005258 <HAL_GetTick>
 8008434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008436:	e00a      	b.n	800844e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008438:	f7fc ff0e 	bl	8005258 <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	f241 3288 	movw	r2, #5000	; 0x1388
 8008446:	4293      	cmp	r3, r2
 8008448:	d901      	bls.n	800844e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e0cb      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800844e:	4b49      	ldr	r3, [pc, #292]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 8008450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008452:	f003 0302 	and.w	r3, r3, #2
 8008456:	2b00      	cmp	r3, #0
 8008458:	d0ee      	beq.n	8008438 <HAL_RCC_OscConfig+0x334>
 800845a:	e014      	b.n	8008486 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800845c:	f7fc fefc 	bl	8005258 <HAL_GetTick>
 8008460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008462:	e00a      	b.n	800847a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008464:	f7fc fef8 	bl	8005258 <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008472:	4293      	cmp	r3, r2
 8008474:	d901      	bls.n	800847a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e0b5      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800847a:	4b3e      	ldr	r3, [pc, #248]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 800847c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800847e:	f003 0302 	and.w	r3, r3, #2
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1ee      	bne.n	8008464 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008486:	7dfb      	ldrb	r3, [r7, #23]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d105      	bne.n	8008498 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800848c:	4b39      	ldr	r3, [pc, #228]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 800848e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008490:	4a38      	ldr	r2, [pc, #224]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 8008492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008496:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 80a1 	beq.w	80085e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80084a2:	4b34      	ldr	r3, [pc, #208]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f003 030c 	and.w	r3, r3, #12
 80084aa:	2b08      	cmp	r3, #8
 80084ac:	d05c      	beq.n	8008568 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d141      	bne.n	800853a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084b6:	4b31      	ldr	r3, [pc, #196]	; (800857c <HAL_RCC_OscConfig+0x478>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084bc:	f7fc fecc 	bl	8005258 <HAL_GetTick>
 80084c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084c2:	e008      	b.n	80084d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084c4:	f7fc fec8 	bl	8005258 <HAL_GetTick>
 80084c8:	4602      	mov	r2, r0
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d901      	bls.n	80084d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80084d2:	2303      	movs	r3, #3
 80084d4:	e087      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084d6:	4b27      	ldr	r3, [pc, #156]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1f0      	bne.n	80084c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	69da      	ldr	r2, [r3, #28]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	431a      	orrs	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f0:	019b      	lsls	r3, r3, #6
 80084f2:	431a      	orrs	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f8:	085b      	lsrs	r3, r3, #1
 80084fa:	3b01      	subs	r3, #1
 80084fc:	041b      	lsls	r3, r3, #16
 80084fe:	431a      	orrs	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008504:	061b      	lsls	r3, r3, #24
 8008506:	491b      	ldr	r1, [pc, #108]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 8008508:	4313      	orrs	r3, r2
 800850a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800850c:	4b1b      	ldr	r3, [pc, #108]	; (800857c <HAL_RCC_OscConfig+0x478>)
 800850e:	2201      	movs	r2, #1
 8008510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008512:	f7fc fea1 	bl	8005258 <HAL_GetTick>
 8008516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008518:	e008      	b.n	800852c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800851a:	f7fc fe9d 	bl	8005258 <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	2b02      	cmp	r3, #2
 8008526:	d901      	bls.n	800852c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008528:	2303      	movs	r3, #3
 800852a:	e05c      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800852c:	4b11      	ldr	r3, [pc, #68]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d0f0      	beq.n	800851a <HAL_RCC_OscConfig+0x416>
 8008538:	e054      	b.n	80085e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800853a:	4b10      	ldr	r3, [pc, #64]	; (800857c <HAL_RCC_OscConfig+0x478>)
 800853c:	2200      	movs	r2, #0
 800853e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008540:	f7fc fe8a 	bl	8005258 <HAL_GetTick>
 8008544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008546:	e008      	b.n	800855a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008548:	f7fc fe86 	bl	8005258 <HAL_GetTick>
 800854c:	4602      	mov	r2, r0
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	2b02      	cmp	r3, #2
 8008554:	d901      	bls.n	800855a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008556:	2303      	movs	r3, #3
 8008558:	e045      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800855a:	4b06      	ldr	r3, [pc, #24]	; (8008574 <HAL_RCC_OscConfig+0x470>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1f0      	bne.n	8008548 <HAL_RCC_OscConfig+0x444>
 8008566:	e03d      	b.n	80085e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d107      	bne.n	8008580 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e038      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
 8008574:	40023800 	.word	0x40023800
 8008578:	40007000 	.word	0x40007000
 800857c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008580:	4b1b      	ldr	r3, [pc, #108]	; (80085f0 <HAL_RCC_OscConfig+0x4ec>)
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d028      	beq.n	80085e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008598:	429a      	cmp	r2, r3
 800859a:	d121      	bne.n	80085e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d11a      	bne.n	80085e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80085b0:	4013      	ands	r3, r2
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80085b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d111      	bne.n	80085e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c6:	085b      	lsrs	r3, r3, #1
 80085c8:	3b01      	subs	r3, #1
 80085ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d107      	bne.n	80085e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80085dc:	429a      	cmp	r2, r3
 80085de:	d001      	beq.n	80085e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e000      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3718      	adds	r7, #24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	40023800 	.word	0x40023800

080085f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d101      	bne.n	8008608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	e0cc      	b.n	80087a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008608:	4b68      	ldr	r3, [pc, #416]	; (80087ac <HAL_RCC_ClockConfig+0x1b8>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 030f 	and.w	r3, r3, #15
 8008610:	683a      	ldr	r2, [r7, #0]
 8008612:	429a      	cmp	r2, r3
 8008614:	d90c      	bls.n	8008630 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008616:	4b65      	ldr	r3, [pc, #404]	; (80087ac <HAL_RCC_ClockConfig+0x1b8>)
 8008618:	683a      	ldr	r2, [r7, #0]
 800861a:	b2d2      	uxtb	r2, r2
 800861c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800861e:	4b63      	ldr	r3, [pc, #396]	; (80087ac <HAL_RCC_ClockConfig+0x1b8>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 030f 	and.w	r3, r3, #15
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	429a      	cmp	r2, r3
 800862a:	d001      	beq.n	8008630 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e0b8      	b.n	80087a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 0302 	and.w	r3, r3, #2
 8008638:	2b00      	cmp	r3, #0
 800863a:	d020      	beq.n	800867e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0304 	and.w	r3, r3, #4
 8008644:	2b00      	cmp	r3, #0
 8008646:	d005      	beq.n	8008654 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008648:	4b59      	ldr	r3, [pc, #356]	; (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	4a58      	ldr	r2, [pc, #352]	; (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 800864e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008652:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0308 	and.w	r3, r3, #8
 800865c:	2b00      	cmp	r3, #0
 800865e:	d005      	beq.n	800866c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008660:	4b53      	ldr	r3, [pc, #332]	; (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	4a52      	ldr	r2, [pc, #328]	; (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008666:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800866a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800866c:	4b50      	ldr	r3, [pc, #320]	; (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	494d      	ldr	r1, [pc, #308]	; (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 800867a:	4313      	orrs	r3, r2
 800867c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	2b00      	cmp	r3, #0
 8008688:	d044      	beq.n	8008714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d107      	bne.n	80086a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008692:	4b47      	ldr	r3, [pc, #284]	; (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d119      	bne.n	80086d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e07f      	b.n	80087a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d003      	beq.n	80086b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	d107      	bne.n	80086c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086b2:	4b3f      	ldr	r3, [pc, #252]	; (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d109      	bne.n	80086d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e06f      	b.n	80087a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086c2:	4b3b      	ldr	r3, [pc, #236]	; (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0302 	and.w	r3, r3, #2
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e067      	b.n	80087a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80086d2:	4b37      	ldr	r3, [pc, #220]	; (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	f023 0203 	bic.w	r2, r3, #3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	4934      	ldr	r1, [pc, #208]	; (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 80086e0:	4313      	orrs	r3, r2
 80086e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80086e4:	f7fc fdb8 	bl	8005258 <HAL_GetTick>
 80086e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086ea:	e00a      	b.n	8008702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086ec:	f7fc fdb4 	bl	8005258 <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d901      	bls.n	8008702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e04f      	b.n	80087a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008702:	4b2b      	ldr	r3, [pc, #172]	; (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f003 020c 	and.w	r2, r3, #12
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	429a      	cmp	r2, r3
 8008712:	d1eb      	bne.n	80086ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008714:	4b25      	ldr	r3, [pc, #148]	; (80087ac <HAL_RCC_ClockConfig+0x1b8>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 030f 	and.w	r3, r3, #15
 800871c:	683a      	ldr	r2, [r7, #0]
 800871e:	429a      	cmp	r2, r3
 8008720:	d20c      	bcs.n	800873c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008722:	4b22      	ldr	r3, [pc, #136]	; (80087ac <HAL_RCC_ClockConfig+0x1b8>)
 8008724:	683a      	ldr	r2, [r7, #0]
 8008726:	b2d2      	uxtb	r2, r2
 8008728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800872a:	4b20      	ldr	r3, [pc, #128]	; (80087ac <HAL_RCC_ClockConfig+0x1b8>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 030f 	and.w	r3, r3, #15
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	429a      	cmp	r2, r3
 8008736:	d001      	beq.n	800873c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e032      	b.n	80087a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 0304 	and.w	r3, r3, #4
 8008744:	2b00      	cmp	r3, #0
 8008746:	d008      	beq.n	800875a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008748:	4b19      	ldr	r3, [pc, #100]	; (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	4916      	ldr	r1, [pc, #88]	; (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008756:	4313      	orrs	r3, r2
 8008758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 0308 	and.w	r3, r3, #8
 8008762:	2b00      	cmp	r3, #0
 8008764:	d009      	beq.n	800877a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008766:	4b12      	ldr	r3, [pc, #72]	; (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	00db      	lsls	r3, r3, #3
 8008774:	490e      	ldr	r1, [pc, #56]	; (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008776:	4313      	orrs	r3, r2
 8008778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800877a:	f000 f821 	bl	80087c0 <HAL_RCC_GetSysClockFreq>
 800877e:	4602      	mov	r2, r0
 8008780:	4b0b      	ldr	r3, [pc, #44]	; (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	091b      	lsrs	r3, r3, #4
 8008786:	f003 030f 	and.w	r3, r3, #15
 800878a:	490a      	ldr	r1, [pc, #40]	; (80087b4 <HAL_RCC_ClockConfig+0x1c0>)
 800878c:	5ccb      	ldrb	r3, [r1, r3]
 800878e:	fa22 f303 	lsr.w	r3, r2, r3
 8008792:	4a09      	ldr	r2, [pc, #36]	; (80087b8 <HAL_RCC_ClockConfig+0x1c4>)
 8008794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008796:	4b09      	ldr	r3, [pc, #36]	; (80087bc <HAL_RCC_ClockConfig+0x1c8>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4618      	mov	r0, r3
 800879c:	f7fc fd18 	bl	80051d0 <HAL_InitTick>

  return HAL_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	40023c00 	.word	0x40023c00
 80087b0:	40023800 	.word	0x40023800
 80087b4:	08013c08 	.word	0x08013c08
 80087b8:	20000024 	.word	0x20000024
 80087bc:	20000028 	.word	0x20000028

080087c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087c4:	b094      	sub	sp, #80	; 0x50
 80087c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80087c8:	2300      	movs	r3, #0
 80087ca:	647b      	str	r3, [r7, #68]	; 0x44
 80087cc:	2300      	movs	r3, #0
 80087ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087d0:	2300      	movs	r3, #0
 80087d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80087d4:	2300      	movs	r3, #0
 80087d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80087d8:	4b79      	ldr	r3, [pc, #484]	; (80089c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	f003 030c 	and.w	r3, r3, #12
 80087e0:	2b08      	cmp	r3, #8
 80087e2:	d00d      	beq.n	8008800 <HAL_RCC_GetSysClockFreq+0x40>
 80087e4:	2b08      	cmp	r3, #8
 80087e6:	f200 80e1 	bhi.w	80089ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d002      	beq.n	80087f4 <HAL_RCC_GetSysClockFreq+0x34>
 80087ee:	2b04      	cmp	r3, #4
 80087f0:	d003      	beq.n	80087fa <HAL_RCC_GetSysClockFreq+0x3a>
 80087f2:	e0db      	b.n	80089ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80087f4:	4b73      	ldr	r3, [pc, #460]	; (80089c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80087f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80087f8:	e0db      	b.n	80089b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80087fa:	4b73      	ldr	r3, [pc, #460]	; (80089c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80087fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80087fe:	e0d8      	b.n	80089b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008800:	4b6f      	ldr	r3, [pc, #444]	; (80089c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008808:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800880a:	4b6d      	ldr	r3, [pc, #436]	; (80089c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d063      	beq.n	80088de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008816:	4b6a      	ldr	r3, [pc, #424]	; (80089c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	099b      	lsrs	r3, r3, #6
 800881c:	2200      	movs	r2, #0
 800881e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008820:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008828:	633b      	str	r3, [r7, #48]	; 0x30
 800882a:	2300      	movs	r3, #0
 800882c:	637b      	str	r3, [r7, #52]	; 0x34
 800882e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008832:	4622      	mov	r2, r4
 8008834:	462b      	mov	r3, r5
 8008836:	f04f 0000 	mov.w	r0, #0
 800883a:	f04f 0100 	mov.w	r1, #0
 800883e:	0159      	lsls	r1, r3, #5
 8008840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008844:	0150      	lsls	r0, r2, #5
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	4621      	mov	r1, r4
 800884c:	1a51      	subs	r1, r2, r1
 800884e:	6139      	str	r1, [r7, #16]
 8008850:	4629      	mov	r1, r5
 8008852:	eb63 0301 	sbc.w	r3, r3, r1
 8008856:	617b      	str	r3, [r7, #20]
 8008858:	f04f 0200 	mov.w	r2, #0
 800885c:	f04f 0300 	mov.w	r3, #0
 8008860:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008864:	4659      	mov	r1, fp
 8008866:	018b      	lsls	r3, r1, #6
 8008868:	4651      	mov	r1, sl
 800886a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800886e:	4651      	mov	r1, sl
 8008870:	018a      	lsls	r2, r1, #6
 8008872:	4651      	mov	r1, sl
 8008874:	ebb2 0801 	subs.w	r8, r2, r1
 8008878:	4659      	mov	r1, fp
 800887a:	eb63 0901 	sbc.w	r9, r3, r1
 800887e:	f04f 0200 	mov.w	r2, #0
 8008882:	f04f 0300 	mov.w	r3, #0
 8008886:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800888a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800888e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008892:	4690      	mov	r8, r2
 8008894:	4699      	mov	r9, r3
 8008896:	4623      	mov	r3, r4
 8008898:	eb18 0303 	adds.w	r3, r8, r3
 800889c:	60bb      	str	r3, [r7, #8]
 800889e:	462b      	mov	r3, r5
 80088a0:	eb49 0303 	adc.w	r3, r9, r3
 80088a4:	60fb      	str	r3, [r7, #12]
 80088a6:	f04f 0200 	mov.w	r2, #0
 80088aa:	f04f 0300 	mov.w	r3, #0
 80088ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80088b2:	4629      	mov	r1, r5
 80088b4:	024b      	lsls	r3, r1, #9
 80088b6:	4621      	mov	r1, r4
 80088b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80088bc:	4621      	mov	r1, r4
 80088be:	024a      	lsls	r2, r1, #9
 80088c0:	4610      	mov	r0, r2
 80088c2:	4619      	mov	r1, r3
 80088c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088c6:	2200      	movs	r2, #0
 80088c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80088ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80088d0:	f7f8 f8d4 	bl	8000a7c <__aeabi_uldivmod>
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	4613      	mov	r3, r2
 80088da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088dc:	e058      	b.n	8008990 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088de:	4b38      	ldr	r3, [pc, #224]	; (80089c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	099b      	lsrs	r3, r3, #6
 80088e4:	2200      	movs	r2, #0
 80088e6:	4618      	mov	r0, r3
 80088e8:	4611      	mov	r1, r2
 80088ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80088ee:	623b      	str	r3, [r7, #32]
 80088f0:	2300      	movs	r3, #0
 80088f2:	627b      	str	r3, [r7, #36]	; 0x24
 80088f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80088f8:	4642      	mov	r2, r8
 80088fa:	464b      	mov	r3, r9
 80088fc:	f04f 0000 	mov.w	r0, #0
 8008900:	f04f 0100 	mov.w	r1, #0
 8008904:	0159      	lsls	r1, r3, #5
 8008906:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800890a:	0150      	lsls	r0, r2, #5
 800890c:	4602      	mov	r2, r0
 800890e:	460b      	mov	r3, r1
 8008910:	4641      	mov	r1, r8
 8008912:	ebb2 0a01 	subs.w	sl, r2, r1
 8008916:	4649      	mov	r1, r9
 8008918:	eb63 0b01 	sbc.w	fp, r3, r1
 800891c:	f04f 0200 	mov.w	r2, #0
 8008920:	f04f 0300 	mov.w	r3, #0
 8008924:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008928:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800892c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008930:	ebb2 040a 	subs.w	r4, r2, sl
 8008934:	eb63 050b 	sbc.w	r5, r3, fp
 8008938:	f04f 0200 	mov.w	r2, #0
 800893c:	f04f 0300 	mov.w	r3, #0
 8008940:	00eb      	lsls	r3, r5, #3
 8008942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008946:	00e2      	lsls	r2, r4, #3
 8008948:	4614      	mov	r4, r2
 800894a:	461d      	mov	r5, r3
 800894c:	4643      	mov	r3, r8
 800894e:	18e3      	adds	r3, r4, r3
 8008950:	603b      	str	r3, [r7, #0]
 8008952:	464b      	mov	r3, r9
 8008954:	eb45 0303 	adc.w	r3, r5, r3
 8008958:	607b      	str	r3, [r7, #4]
 800895a:	f04f 0200 	mov.w	r2, #0
 800895e:	f04f 0300 	mov.w	r3, #0
 8008962:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008966:	4629      	mov	r1, r5
 8008968:	028b      	lsls	r3, r1, #10
 800896a:	4621      	mov	r1, r4
 800896c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008970:	4621      	mov	r1, r4
 8008972:	028a      	lsls	r2, r1, #10
 8008974:	4610      	mov	r0, r2
 8008976:	4619      	mov	r1, r3
 8008978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800897a:	2200      	movs	r2, #0
 800897c:	61bb      	str	r3, [r7, #24]
 800897e:	61fa      	str	r2, [r7, #28]
 8008980:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008984:	f7f8 f87a 	bl	8000a7c <__aeabi_uldivmod>
 8008988:	4602      	mov	r2, r0
 800898a:	460b      	mov	r3, r1
 800898c:	4613      	mov	r3, r2
 800898e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008990:	4b0b      	ldr	r3, [pc, #44]	; (80089c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	0c1b      	lsrs	r3, r3, #16
 8008996:	f003 0303 	and.w	r3, r3, #3
 800899a:	3301      	adds	r3, #1
 800899c:	005b      	lsls	r3, r3, #1
 800899e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80089a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80089aa:	e002      	b.n	80089b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80089ac:	4b05      	ldr	r3, [pc, #20]	; (80089c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80089ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80089b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80089b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3750      	adds	r7, #80	; 0x50
 80089b8:	46bd      	mov	sp, r7
 80089ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089be:	bf00      	nop
 80089c0:	40023800 	.word	0x40023800
 80089c4:	00f42400 	.word	0x00f42400
 80089c8:	007a1200 	.word	0x007a1200

080089cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089cc:	b480      	push	{r7}
 80089ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80089d0:	4b03      	ldr	r3, [pc, #12]	; (80089e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80089d2:	681b      	ldr	r3, [r3, #0]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	20000024 	.word	0x20000024

080089e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80089e8:	f7ff fff0 	bl	80089cc <HAL_RCC_GetHCLKFreq>
 80089ec:	4602      	mov	r2, r0
 80089ee:	4b05      	ldr	r3, [pc, #20]	; (8008a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	0a9b      	lsrs	r3, r3, #10
 80089f4:	f003 0307 	and.w	r3, r3, #7
 80089f8:	4903      	ldr	r1, [pc, #12]	; (8008a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80089fa:	5ccb      	ldrb	r3, [r1, r3]
 80089fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	40023800 	.word	0x40023800
 8008a08:	08013c18 	.word	0x08013c18

08008a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008a10:	f7ff ffdc 	bl	80089cc <HAL_RCC_GetHCLKFreq>
 8008a14:	4602      	mov	r2, r0
 8008a16:	4b05      	ldr	r3, [pc, #20]	; (8008a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	0b5b      	lsrs	r3, r3, #13
 8008a1c:	f003 0307 	and.w	r3, r3, #7
 8008a20:	4903      	ldr	r1, [pc, #12]	; (8008a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a22:	5ccb      	ldrb	r3, [r1, r3]
 8008a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	40023800 	.word	0x40023800
 8008a30:	08013c18 	.word	0x08013c18

08008a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e041      	b.n	8008aca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d106      	bne.n	8008a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f7fc f9a2 	bl	8004da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2202      	movs	r2, #2
 8008a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	3304      	adds	r3, #4
 8008a70:	4619      	mov	r1, r3
 8008a72:	4610      	mov	r0, r2
 8008a74:	f000 fad2 	bl	800901c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
	...

08008ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d001      	beq.n	8008aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e04e      	b.n	8008b8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2202      	movs	r2, #2
 8008af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68da      	ldr	r2, [r3, #12]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f042 0201 	orr.w	r2, r2, #1
 8008b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a23      	ldr	r2, [pc, #140]	; (8008b98 <HAL_TIM_Base_Start_IT+0xc4>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d022      	beq.n	8008b54 <HAL_TIM_Base_Start_IT+0x80>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b16:	d01d      	beq.n	8008b54 <HAL_TIM_Base_Start_IT+0x80>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a1f      	ldr	r2, [pc, #124]	; (8008b9c <HAL_TIM_Base_Start_IT+0xc8>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d018      	beq.n	8008b54 <HAL_TIM_Base_Start_IT+0x80>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a1e      	ldr	r2, [pc, #120]	; (8008ba0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d013      	beq.n	8008b54 <HAL_TIM_Base_Start_IT+0x80>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a1c      	ldr	r2, [pc, #112]	; (8008ba4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d00e      	beq.n	8008b54 <HAL_TIM_Base_Start_IT+0x80>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a1b      	ldr	r2, [pc, #108]	; (8008ba8 <HAL_TIM_Base_Start_IT+0xd4>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d009      	beq.n	8008b54 <HAL_TIM_Base_Start_IT+0x80>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a19      	ldr	r2, [pc, #100]	; (8008bac <HAL_TIM_Base_Start_IT+0xd8>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d004      	beq.n	8008b54 <HAL_TIM_Base_Start_IT+0x80>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a18      	ldr	r2, [pc, #96]	; (8008bb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d111      	bne.n	8008b78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	f003 0307 	and.w	r3, r3, #7
 8008b5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2b06      	cmp	r3, #6
 8008b64:	d010      	beq.n	8008b88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f042 0201 	orr.w	r2, r2, #1
 8008b74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b76:	e007      	b.n	8008b88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f042 0201 	orr.w	r2, r2, #1
 8008b86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3714      	adds	r7, #20
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	40010000 	.word	0x40010000
 8008b9c:	40000400 	.word	0x40000400
 8008ba0:	40000800 	.word	0x40000800
 8008ba4:	40000c00 	.word	0x40000c00
 8008ba8:	40010400 	.word	0x40010400
 8008bac:	40014000 	.word	0x40014000
 8008bb0:	40001800 	.word	0x40001800

08008bb4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68da      	ldr	r2, [r3, #12]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f022 0201 	bic.w	r2, r2, #1
 8008bca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6a1a      	ldr	r2, [r3, #32]
 8008bd2:	f241 1311 	movw	r3, #4369	; 0x1111
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10f      	bne.n	8008bfc <HAL_TIM_Base_Stop_IT+0x48>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6a1a      	ldr	r2, [r3, #32]
 8008be2:	f240 4344 	movw	r3, #1092	; 0x444
 8008be6:	4013      	ands	r3, r2
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d107      	bne.n	8008bfc <HAL_TIM_Base_Stop_IT+0x48>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f022 0201 	bic.w	r2, r2, #1
 8008bfa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b082      	sub	sp, #8
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	f003 0302 	and.w	r3, r3, #2
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d122      	bne.n	8008c6e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	f003 0302 	and.w	r3, r3, #2
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d11b      	bne.n	8008c6e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f06f 0202 	mvn.w	r2, #2
 8008c3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	f003 0303 	and.w	r3, r3, #3
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d003      	beq.n	8008c5c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f9b5 	bl	8008fc4 <HAL_TIM_IC_CaptureCallback>
 8008c5a:	e005      	b.n	8008c68 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f9a7 	bl	8008fb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f9b8 	bl	8008fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	691b      	ldr	r3, [r3, #16]
 8008c74:	f003 0304 	and.w	r3, r3, #4
 8008c78:	2b04      	cmp	r3, #4
 8008c7a:	d122      	bne.n	8008cc2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	f003 0304 	and.w	r3, r3, #4
 8008c86:	2b04      	cmp	r3, #4
 8008c88:	d11b      	bne.n	8008cc2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f06f 0204 	mvn.w	r2, #4
 8008c92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2202      	movs	r2, #2
 8008c98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d003      	beq.n	8008cb0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f98b 	bl	8008fc4 <HAL_TIM_IC_CaptureCallback>
 8008cae:	e005      	b.n	8008cbc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 f97d 	bl	8008fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f98e 	bl	8008fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	f003 0308 	and.w	r3, r3, #8
 8008ccc:	2b08      	cmp	r3, #8
 8008cce:	d122      	bne.n	8008d16 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	f003 0308 	and.w	r3, r3, #8
 8008cda:	2b08      	cmp	r3, #8
 8008cdc:	d11b      	bne.n	8008d16 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f06f 0208 	mvn.w	r2, #8
 8008ce6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2204      	movs	r2, #4
 8008cec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	69db      	ldr	r3, [r3, #28]
 8008cf4:	f003 0303 	and.w	r3, r3, #3
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d003      	beq.n	8008d04 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f961 	bl	8008fc4 <HAL_TIM_IC_CaptureCallback>
 8008d02:	e005      	b.n	8008d10 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f953 	bl	8008fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f964 	bl	8008fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	f003 0310 	and.w	r3, r3, #16
 8008d20:	2b10      	cmp	r3, #16
 8008d22:	d122      	bne.n	8008d6a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	f003 0310 	and.w	r3, r3, #16
 8008d2e:	2b10      	cmp	r3, #16
 8008d30:	d11b      	bne.n	8008d6a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f06f 0210 	mvn.w	r2, #16
 8008d3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2208      	movs	r2, #8
 8008d40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	69db      	ldr	r3, [r3, #28]
 8008d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d003      	beq.n	8008d58 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f937 	bl	8008fc4 <HAL_TIM_IC_CaptureCallback>
 8008d56:	e005      	b.n	8008d64 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 f929 	bl	8008fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f93a 	bl	8008fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	f003 0301 	and.w	r3, r3, #1
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d10e      	bne.n	8008d96 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d107      	bne.n	8008d96 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f06f 0201 	mvn.w	r2, #1
 8008d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f7fa fd43 	bl	800381c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	691b      	ldr	r3, [r3, #16]
 8008d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008da0:	2b80      	cmp	r3, #128	; 0x80
 8008da2:	d10e      	bne.n	8008dc2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dae:	2b80      	cmp	r3, #128	; 0x80
 8008db0:	d107      	bne.n	8008dc2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 faed 	bl	800939c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dcc:	2b40      	cmp	r3, #64	; 0x40
 8008dce:	d10e      	bne.n	8008dee <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dda:	2b40      	cmp	r3, #64	; 0x40
 8008ddc:	d107      	bne.n	8008dee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 f8ff 	bl	8008fec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	f003 0320 	and.w	r3, r3, #32
 8008df8:	2b20      	cmp	r3, #32
 8008dfa:	d10e      	bne.n	8008e1a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	f003 0320 	and.w	r3, r3, #32
 8008e06:	2b20      	cmp	r3, #32
 8008e08:	d107      	bne.n	8008e1a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f06f 0220 	mvn.w	r2, #32
 8008e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fab7 	bl	8009388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e1a:	bf00      	nop
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b084      	sub	sp, #16
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
 8008e2a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d101      	bne.n	8008e3e <HAL_TIM_ConfigClockSource+0x1c>
 8008e3a:	2302      	movs	r3, #2
 8008e3c:	e0b4      	b.n	8008fa8 <HAL_TIM_ConfigClockSource+0x186>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2202      	movs	r2, #2
 8008e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008e5c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e64:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e76:	d03e      	beq.n	8008ef6 <HAL_TIM_ConfigClockSource+0xd4>
 8008e78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e7c:	f200 8087 	bhi.w	8008f8e <HAL_TIM_ConfigClockSource+0x16c>
 8008e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e84:	f000 8086 	beq.w	8008f94 <HAL_TIM_ConfigClockSource+0x172>
 8008e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e8c:	d87f      	bhi.n	8008f8e <HAL_TIM_ConfigClockSource+0x16c>
 8008e8e:	2b70      	cmp	r3, #112	; 0x70
 8008e90:	d01a      	beq.n	8008ec8 <HAL_TIM_ConfigClockSource+0xa6>
 8008e92:	2b70      	cmp	r3, #112	; 0x70
 8008e94:	d87b      	bhi.n	8008f8e <HAL_TIM_ConfigClockSource+0x16c>
 8008e96:	2b60      	cmp	r3, #96	; 0x60
 8008e98:	d050      	beq.n	8008f3c <HAL_TIM_ConfigClockSource+0x11a>
 8008e9a:	2b60      	cmp	r3, #96	; 0x60
 8008e9c:	d877      	bhi.n	8008f8e <HAL_TIM_ConfigClockSource+0x16c>
 8008e9e:	2b50      	cmp	r3, #80	; 0x50
 8008ea0:	d03c      	beq.n	8008f1c <HAL_TIM_ConfigClockSource+0xfa>
 8008ea2:	2b50      	cmp	r3, #80	; 0x50
 8008ea4:	d873      	bhi.n	8008f8e <HAL_TIM_ConfigClockSource+0x16c>
 8008ea6:	2b40      	cmp	r3, #64	; 0x40
 8008ea8:	d058      	beq.n	8008f5c <HAL_TIM_ConfigClockSource+0x13a>
 8008eaa:	2b40      	cmp	r3, #64	; 0x40
 8008eac:	d86f      	bhi.n	8008f8e <HAL_TIM_ConfigClockSource+0x16c>
 8008eae:	2b30      	cmp	r3, #48	; 0x30
 8008eb0:	d064      	beq.n	8008f7c <HAL_TIM_ConfigClockSource+0x15a>
 8008eb2:	2b30      	cmp	r3, #48	; 0x30
 8008eb4:	d86b      	bhi.n	8008f8e <HAL_TIM_ConfigClockSource+0x16c>
 8008eb6:	2b20      	cmp	r3, #32
 8008eb8:	d060      	beq.n	8008f7c <HAL_TIM_ConfigClockSource+0x15a>
 8008eba:	2b20      	cmp	r3, #32
 8008ebc:	d867      	bhi.n	8008f8e <HAL_TIM_ConfigClockSource+0x16c>
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d05c      	beq.n	8008f7c <HAL_TIM_ConfigClockSource+0x15a>
 8008ec2:	2b10      	cmp	r3, #16
 8008ec4:	d05a      	beq.n	8008f7c <HAL_TIM_ConfigClockSource+0x15a>
 8008ec6:	e062      	b.n	8008f8e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6818      	ldr	r0, [r3, #0]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	6899      	ldr	r1, [r3, #8]
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	685a      	ldr	r2, [r3, #4]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	f000 f9ba 	bl	8009250 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008eea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	609a      	str	r2, [r3, #8]
      break;
 8008ef4:	e04f      	b.n	8008f96 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6818      	ldr	r0, [r3, #0]
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	6899      	ldr	r1, [r3, #8]
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	685a      	ldr	r2, [r3, #4]
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	f000 f9a3 	bl	8009250 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	689a      	ldr	r2, [r3, #8]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f18:	609a      	str	r2, [r3, #8]
      break;
 8008f1a:	e03c      	b.n	8008f96 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6818      	ldr	r0, [r3, #0]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	6859      	ldr	r1, [r3, #4]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	461a      	mov	r2, r3
 8008f2a:	f000 f917 	bl	800915c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2150      	movs	r1, #80	; 0x50
 8008f34:	4618      	mov	r0, r3
 8008f36:	f000 f970 	bl	800921a <TIM_ITRx_SetConfig>
      break;
 8008f3a:	e02c      	b.n	8008f96 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6818      	ldr	r0, [r3, #0]
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	6859      	ldr	r1, [r3, #4]
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	461a      	mov	r2, r3
 8008f4a:	f000 f936 	bl	80091ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2160      	movs	r1, #96	; 0x60
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 f960 	bl	800921a <TIM_ITRx_SetConfig>
      break;
 8008f5a:	e01c      	b.n	8008f96 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6818      	ldr	r0, [r3, #0]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	6859      	ldr	r1, [r3, #4]
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	461a      	mov	r2, r3
 8008f6a:	f000 f8f7 	bl	800915c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2140      	movs	r1, #64	; 0x40
 8008f74:	4618      	mov	r0, r3
 8008f76:	f000 f950 	bl	800921a <TIM_ITRx_SetConfig>
      break;
 8008f7a:	e00c      	b.n	8008f96 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4619      	mov	r1, r3
 8008f86:	4610      	mov	r0, r2
 8008f88:	f000 f947 	bl	800921a <TIM_ITRx_SetConfig>
      break;
 8008f8c:	e003      	b.n	8008f96 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	73fb      	strb	r3, [r7, #15]
      break;
 8008f92:	e000      	b.n	8008f96 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008f94:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ff4:	bf00      	nop
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  return htim->State;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800900e:	b2db      	uxtb	r3, r3
}
 8009010:	4618      	mov	r0, r3
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800901c:	b480      	push	{r7}
 800901e:	b085      	sub	sp, #20
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a40      	ldr	r2, [pc, #256]	; (8009130 <TIM_Base_SetConfig+0x114>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d013      	beq.n	800905c <TIM_Base_SetConfig+0x40>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800903a:	d00f      	beq.n	800905c <TIM_Base_SetConfig+0x40>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a3d      	ldr	r2, [pc, #244]	; (8009134 <TIM_Base_SetConfig+0x118>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d00b      	beq.n	800905c <TIM_Base_SetConfig+0x40>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a3c      	ldr	r2, [pc, #240]	; (8009138 <TIM_Base_SetConfig+0x11c>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d007      	beq.n	800905c <TIM_Base_SetConfig+0x40>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a3b      	ldr	r2, [pc, #236]	; (800913c <TIM_Base_SetConfig+0x120>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d003      	beq.n	800905c <TIM_Base_SetConfig+0x40>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a3a      	ldr	r2, [pc, #232]	; (8009140 <TIM_Base_SetConfig+0x124>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d108      	bne.n	800906e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	4313      	orrs	r3, r2
 800906c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a2f      	ldr	r2, [pc, #188]	; (8009130 <TIM_Base_SetConfig+0x114>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d02b      	beq.n	80090ce <TIM_Base_SetConfig+0xb2>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800907c:	d027      	beq.n	80090ce <TIM_Base_SetConfig+0xb2>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a2c      	ldr	r2, [pc, #176]	; (8009134 <TIM_Base_SetConfig+0x118>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d023      	beq.n	80090ce <TIM_Base_SetConfig+0xb2>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a2b      	ldr	r2, [pc, #172]	; (8009138 <TIM_Base_SetConfig+0x11c>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d01f      	beq.n	80090ce <TIM_Base_SetConfig+0xb2>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a2a      	ldr	r2, [pc, #168]	; (800913c <TIM_Base_SetConfig+0x120>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d01b      	beq.n	80090ce <TIM_Base_SetConfig+0xb2>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a29      	ldr	r2, [pc, #164]	; (8009140 <TIM_Base_SetConfig+0x124>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d017      	beq.n	80090ce <TIM_Base_SetConfig+0xb2>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a28      	ldr	r2, [pc, #160]	; (8009144 <TIM_Base_SetConfig+0x128>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d013      	beq.n	80090ce <TIM_Base_SetConfig+0xb2>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a27      	ldr	r2, [pc, #156]	; (8009148 <TIM_Base_SetConfig+0x12c>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d00f      	beq.n	80090ce <TIM_Base_SetConfig+0xb2>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a26      	ldr	r2, [pc, #152]	; (800914c <TIM_Base_SetConfig+0x130>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d00b      	beq.n	80090ce <TIM_Base_SetConfig+0xb2>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a25      	ldr	r2, [pc, #148]	; (8009150 <TIM_Base_SetConfig+0x134>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d007      	beq.n	80090ce <TIM_Base_SetConfig+0xb2>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a24      	ldr	r2, [pc, #144]	; (8009154 <TIM_Base_SetConfig+0x138>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d003      	beq.n	80090ce <TIM_Base_SetConfig+0xb2>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a23      	ldr	r2, [pc, #140]	; (8009158 <TIM_Base_SetConfig+0x13c>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d108      	bne.n	80090e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	4313      	orrs	r3, r2
 80090de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	695b      	ldr	r3, [r3, #20]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	689a      	ldr	r2, [r3, #8]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a0a      	ldr	r2, [pc, #40]	; (8009130 <TIM_Base_SetConfig+0x114>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d003      	beq.n	8009114 <TIM_Base_SetConfig+0xf8>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a0c      	ldr	r2, [pc, #48]	; (8009140 <TIM_Base_SetConfig+0x124>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d103      	bne.n	800911c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	691a      	ldr	r2, [r3, #16]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	615a      	str	r2, [r3, #20]
}
 8009122:	bf00      	nop
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	40010000 	.word	0x40010000
 8009134:	40000400 	.word	0x40000400
 8009138:	40000800 	.word	0x40000800
 800913c:	40000c00 	.word	0x40000c00
 8009140:	40010400 	.word	0x40010400
 8009144:	40014000 	.word	0x40014000
 8009148:	40014400 	.word	0x40014400
 800914c:	40014800 	.word	0x40014800
 8009150:	40001800 	.word	0x40001800
 8009154:	40001c00 	.word	0x40001c00
 8009158:	40002000 	.word	0x40002000

0800915c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800915c:	b480      	push	{r7}
 800915e:	b087      	sub	sp, #28
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6a1b      	ldr	r3, [r3, #32]
 800916c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	f023 0201 	bic.w	r2, r3, #1
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	699b      	ldr	r3, [r3, #24]
 800917e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	011b      	lsls	r3, r3, #4
 800918c:	693a      	ldr	r2, [r7, #16]
 800918e:	4313      	orrs	r3, r2
 8009190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	f023 030a 	bic.w	r3, r3, #10
 8009198:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800919a:	697a      	ldr	r2, [r7, #20]
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	4313      	orrs	r3, r2
 80091a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	693a      	ldr	r2, [r7, #16]
 80091a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	697a      	ldr	r2, [r7, #20]
 80091ac:	621a      	str	r2, [r3, #32]
}
 80091ae:	bf00      	nop
 80091b0:	371c      	adds	r7, #28
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091ba:	b480      	push	{r7}
 80091bc:	b087      	sub	sp, #28
 80091be:	af00      	add	r7, sp, #0
 80091c0:	60f8      	str	r0, [r7, #12]
 80091c2:	60b9      	str	r1, [r7, #8]
 80091c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6a1b      	ldr	r3, [r3, #32]
 80091ca:	f023 0210 	bic.w	r2, r3, #16
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6a1b      	ldr	r3, [r3, #32]
 80091dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	031b      	lsls	r3, r3, #12
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80091f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	011b      	lsls	r3, r3, #4
 80091fc:	693a      	ldr	r2, [r7, #16]
 80091fe:	4313      	orrs	r3, r2
 8009200:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	697a      	ldr	r2, [r7, #20]
 8009206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	693a      	ldr	r2, [r7, #16]
 800920c:	621a      	str	r2, [r3, #32]
}
 800920e:	bf00      	nop
 8009210:	371c      	adds	r7, #28
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr

0800921a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800921a:	b480      	push	{r7}
 800921c:	b085      	sub	sp, #20
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009230:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	4313      	orrs	r3, r2
 8009238:	f043 0307 	orr.w	r3, r3, #7
 800923c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	609a      	str	r2, [r3, #8]
}
 8009244:	bf00      	nop
 8009246:	3714      	adds	r7, #20
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009250:	b480      	push	{r7}
 8009252:	b087      	sub	sp, #28
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
 800925c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800926a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	021a      	lsls	r2, r3, #8
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	431a      	orrs	r2, r3
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	4313      	orrs	r3, r2
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	4313      	orrs	r3, r2
 800927c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	697a      	ldr	r2, [r7, #20]
 8009282:	609a      	str	r2, [r3, #8]
}
 8009284:	bf00      	nop
 8009286:	371c      	adds	r7, #28
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d101      	bne.n	80092a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092a4:	2302      	movs	r3, #2
 80092a6:	e05a      	b.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2202      	movs	r2, #2
 80092b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68fa      	ldr	r2, [r7, #12]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68fa      	ldr	r2, [r7, #12]
 80092e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a21      	ldr	r2, [pc, #132]	; (800936c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d022      	beq.n	8009332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092f4:	d01d      	beq.n	8009332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a1d      	ldr	r2, [pc, #116]	; (8009370 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d018      	beq.n	8009332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a1b      	ldr	r2, [pc, #108]	; (8009374 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d013      	beq.n	8009332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a1a      	ldr	r2, [pc, #104]	; (8009378 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d00e      	beq.n	8009332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a18      	ldr	r2, [pc, #96]	; (800937c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d009      	beq.n	8009332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a17      	ldr	r2, [pc, #92]	; (8009380 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d004      	beq.n	8009332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a15      	ldr	r2, [pc, #84]	; (8009384 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d10c      	bne.n	800934c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	4313      	orrs	r3, r2
 8009342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68ba      	ldr	r2, [r7, #8]
 800934a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	40010000 	.word	0x40010000
 8009370:	40000400 	.word	0x40000400
 8009374:	40000800 	.word	0x40000800
 8009378:	40000c00 	.word	0x40000c00
 800937c:	40010400 	.word	0x40010400
 8009380:	40014000 	.word	0x40014000
 8009384:	40001800 	.word	0x40001800

08009388 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d101      	bne.n	80093c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	e03f      	b.n	8009442 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d106      	bne.n	80093dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f7fb fd48 	bl	8004e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2224      	movs	r2, #36	; 0x24
 80093e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68da      	ldr	r2, [r3, #12]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 f929 	bl	800964c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	691a      	ldr	r2, [r3, #16]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009408:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	695a      	ldr	r2, [r3, #20]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009418:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68da      	ldr	r2, [r3, #12]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009428:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2220      	movs	r2, #32
 8009434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2220      	movs	r2, #32
 800943c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b08a      	sub	sp, #40	; 0x28
 800944e:	af02      	add	r7, sp, #8
 8009450:	60f8      	str	r0, [r7, #12]
 8009452:	60b9      	str	r1, [r7, #8]
 8009454:	603b      	str	r3, [r7, #0]
 8009456:	4613      	mov	r3, r2
 8009458:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800945a:	2300      	movs	r3, #0
 800945c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009464:	b2db      	uxtb	r3, r3
 8009466:	2b20      	cmp	r3, #32
 8009468:	d17c      	bne.n	8009564 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d002      	beq.n	8009476 <HAL_UART_Transmit+0x2c>
 8009470:	88fb      	ldrh	r3, [r7, #6]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d101      	bne.n	800947a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e075      	b.n	8009566 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009480:	2b01      	cmp	r3, #1
 8009482:	d101      	bne.n	8009488 <HAL_UART_Transmit+0x3e>
 8009484:	2302      	movs	r3, #2
 8009486:	e06e      	b.n	8009566 <HAL_UART_Transmit+0x11c>
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2221      	movs	r2, #33	; 0x21
 800949a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800949e:	f7fb fedb 	bl	8005258 <HAL_GetTick>
 80094a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	88fa      	ldrh	r2, [r7, #6]
 80094a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	88fa      	ldrh	r2, [r7, #6]
 80094ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094b8:	d108      	bne.n	80094cc <HAL_UART_Transmit+0x82>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	691b      	ldr	r3, [r3, #16]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d104      	bne.n	80094cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80094c2:	2300      	movs	r3, #0
 80094c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	61bb      	str	r3, [r7, #24]
 80094ca:	e003      	b.n	80094d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80094d0:	2300      	movs	r3, #0
 80094d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80094dc:	e02a      	b.n	8009534 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	9300      	str	r3, [sp, #0]
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	2200      	movs	r2, #0
 80094e6:	2180      	movs	r1, #128	; 0x80
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f000 f840 	bl	800956e <UART_WaitOnFlagUntilTimeout>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d001      	beq.n	80094f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80094f4:	2303      	movs	r3, #3
 80094f6:	e036      	b.n	8009566 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10b      	bne.n	8009516 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	881b      	ldrh	r3, [r3, #0]
 8009502:	461a      	mov	r2, r3
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800950c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	3302      	adds	r3, #2
 8009512:	61bb      	str	r3, [r7, #24]
 8009514:	e007      	b.n	8009526 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	781a      	ldrb	r2, [r3, #0]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	3301      	adds	r3, #1
 8009524:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800952a:	b29b      	uxth	r3, r3
 800952c:	3b01      	subs	r3, #1
 800952e:	b29a      	uxth	r2, r3
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009538:	b29b      	uxth	r3, r3
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1cf      	bne.n	80094de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	2200      	movs	r2, #0
 8009546:	2140      	movs	r1, #64	; 0x40
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 f810 	bl	800956e <UART_WaitOnFlagUntilTimeout>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d001      	beq.n	8009558 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009554:	2303      	movs	r3, #3
 8009556:	e006      	b.n	8009566 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2220      	movs	r2, #32
 800955c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	e000      	b.n	8009566 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009564:	2302      	movs	r3, #2
  }
}
 8009566:	4618      	mov	r0, r3
 8009568:	3720      	adds	r7, #32
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b090      	sub	sp, #64	; 0x40
 8009572:	af00      	add	r7, sp, #0
 8009574:	60f8      	str	r0, [r7, #12]
 8009576:	60b9      	str	r1, [r7, #8]
 8009578:	603b      	str	r3, [r7, #0]
 800957a:	4613      	mov	r3, r2
 800957c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800957e:	e050      	b.n	8009622 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009586:	d04c      	beq.n	8009622 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800958a:	2b00      	cmp	r3, #0
 800958c:	d007      	beq.n	800959e <UART_WaitOnFlagUntilTimeout+0x30>
 800958e:	f7fb fe63 	bl	8005258 <HAL_GetTick>
 8009592:	4602      	mov	r2, r0
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800959a:	429a      	cmp	r2, r3
 800959c:	d241      	bcs.n	8009622 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	330c      	adds	r3, #12
 80095a4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a8:	e853 3f00 	ldrex	r3, [r3]
 80095ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	330c      	adds	r3, #12
 80095bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80095be:	637a      	str	r2, [r7, #52]	; 0x34
 80095c0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095c6:	e841 2300 	strex	r3, r2, [r1]
 80095ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80095cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1e5      	bne.n	800959e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	3314      	adds	r3, #20
 80095d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	e853 3f00 	ldrex	r3, [r3]
 80095e0:	613b      	str	r3, [r7, #16]
   return(result);
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	f023 0301 	bic.w	r3, r3, #1
 80095e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	3314      	adds	r3, #20
 80095f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095f2:	623a      	str	r2, [r7, #32]
 80095f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f6:	69f9      	ldr	r1, [r7, #28]
 80095f8:	6a3a      	ldr	r2, [r7, #32]
 80095fa:	e841 2300 	strex	r3, r2, [r1]
 80095fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1e5      	bne.n	80095d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2220      	movs	r2, #32
 800960a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2220      	movs	r2, #32
 8009612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2200      	movs	r2, #0
 800961a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800961e:	2303      	movs	r3, #3
 8009620:	e00f      	b.n	8009642 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	4013      	ands	r3, r2
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	429a      	cmp	r2, r3
 8009630:	bf0c      	ite	eq
 8009632:	2301      	moveq	r3, #1
 8009634:	2300      	movne	r3, #0
 8009636:	b2db      	uxtb	r3, r3
 8009638:	461a      	mov	r2, r3
 800963a:	79fb      	ldrb	r3, [r7, #7]
 800963c:	429a      	cmp	r2, r3
 800963e:	d09f      	beq.n	8009580 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3740      	adds	r7, #64	; 0x40
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
	...

0800964c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800964c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009650:	b0c0      	sub	sp, #256	; 0x100
 8009652:	af00      	add	r7, sp, #0
 8009654:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	691b      	ldr	r3, [r3, #16]
 8009660:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009668:	68d9      	ldr	r1, [r3, #12]
 800966a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	ea40 0301 	orr.w	r3, r0, r1
 8009674:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800967a:	689a      	ldr	r2, [r3, #8]
 800967c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	431a      	orrs	r2, r3
 8009684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009688:	695b      	ldr	r3, [r3, #20]
 800968a:	431a      	orrs	r2, r3
 800968c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009690:	69db      	ldr	r3, [r3, #28]
 8009692:	4313      	orrs	r3, r2
 8009694:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80096a4:	f021 010c 	bic.w	r1, r1, #12
 80096a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80096b2:	430b      	orrs	r3, r1
 80096b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80096b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	695b      	ldr	r3, [r3, #20]
 80096be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80096c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096c6:	6999      	ldr	r1, [r3, #24]
 80096c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	ea40 0301 	orr.w	r3, r0, r1
 80096d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80096d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	4b8f      	ldr	r3, [pc, #572]	; (8009918 <UART_SetConfig+0x2cc>)
 80096dc:	429a      	cmp	r2, r3
 80096de:	d005      	beq.n	80096ec <UART_SetConfig+0xa0>
 80096e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	4b8d      	ldr	r3, [pc, #564]	; (800991c <UART_SetConfig+0x2d0>)
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d104      	bne.n	80096f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80096ec:	f7ff f98e 	bl	8008a0c <HAL_RCC_GetPCLK2Freq>
 80096f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80096f4:	e003      	b.n	80096fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80096f6:	f7ff f975 	bl	80089e4 <HAL_RCC_GetPCLK1Freq>
 80096fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009702:	69db      	ldr	r3, [r3, #28]
 8009704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009708:	f040 810c 	bne.w	8009924 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800970c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009710:	2200      	movs	r2, #0
 8009712:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009716:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800971a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800971e:	4622      	mov	r2, r4
 8009720:	462b      	mov	r3, r5
 8009722:	1891      	adds	r1, r2, r2
 8009724:	65b9      	str	r1, [r7, #88]	; 0x58
 8009726:	415b      	adcs	r3, r3
 8009728:	65fb      	str	r3, [r7, #92]	; 0x5c
 800972a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800972e:	4621      	mov	r1, r4
 8009730:	eb12 0801 	adds.w	r8, r2, r1
 8009734:	4629      	mov	r1, r5
 8009736:	eb43 0901 	adc.w	r9, r3, r1
 800973a:	f04f 0200 	mov.w	r2, #0
 800973e:	f04f 0300 	mov.w	r3, #0
 8009742:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009746:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800974a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800974e:	4690      	mov	r8, r2
 8009750:	4699      	mov	r9, r3
 8009752:	4623      	mov	r3, r4
 8009754:	eb18 0303 	adds.w	r3, r8, r3
 8009758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800975c:	462b      	mov	r3, r5
 800975e:	eb49 0303 	adc.w	r3, r9, r3
 8009762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009772:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009776:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800977a:	460b      	mov	r3, r1
 800977c:	18db      	adds	r3, r3, r3
 800977e:	653b      	str	r3, [r7, #80]	; 0x50
 8009780:	4613      	mov	r3, r2
 8009782:	eb42 0303 	adc.w	r3, r2, r3
 8009786:	657b      	str	r3, [r7, #84]	; 0x54
 8009788:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800978c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009790:	f7f7 f974 	bl	8000a7c <__aeabi_uldivmod>
 8009794:	4602      	mov	r2, r0
 8009796:	460b      	mov	r3, r1
 8009798:	4b61      	ldr	r3, [pc, #388]	; (8009920 <UART_SetConfig+0x2d4>)
 800979a:	fba3 2302 	umull	r2, r3, r3, r2
 800979e:	095b      	lsrs	r3, r3, #5
 80097a0:	011c      	lsls	r4, r3, #4
 80097a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097a6:	2200      	movs	r2, #0
 80097a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80097ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80097b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80097b4:	4642      	mov	r2, r8
 80097b6:	464b      	mov	r3, r9
 80097b8:	1891      	adds	r1, r2, r2
 80097ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80097bc:	415b      	adcs	r3, r3
 80097be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80097c4:	4641      	mov	r1, r8
 80097c6:	eb12 0a01 	adds.w	sl, r2, r1
 80097ca:	4649      	mov	r1, r9
 80097cc:	eb43 0b01 	adc.w	fp, r3, r1
 80097d0:	f04f 0200 	mov.w	r2, #0
 80097d4:	f04f 0300 	mov.w	r3, #0
 80097d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80097dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80097e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097e4:	4692      	mov	sl, r2
 80097e6:	469b      	mov	fp, r3
 80097e8:	4643      	mov	r3, r8
 80097ea:	eb1a 0303 	adds.w	r3, sl, r3
 80097ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80097f2:	464b      	mov	r3, r9
 80097f4:	eb4b 0303 	adc.w	r3, fp, r3
 80097f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80097fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009808:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800980c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009810:	460b      	mov	r3, r1
 8009812:	18db      	adds	r3, r3, r3
 8009814:	643b      	str	r3, [r7, #64]	; 0x40
 8009816:	4613      	mov	r3, r2
 8009818:	eb42 0303 	adc.w	r3, r2, r3
 800981c:	647b      	str	r3, [r7, #68]	; 0x44
 800981e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009822:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009826:	f7f7 f929 	bl	8000a7c <__aeabi_uldivmod>
 800982a:	4602      	mov	r2, r0
 800982c:	460b      	mov	r3, r1
 800982e:	4611      	mov	r1, r2
 8009830:	4b3b      	ldr	r3, [pc, #236]	; (8009920 <UART_SetConfig+0x2d4>)
 8009832:	fba3 2301 	umull	r2, r3, r3, r1
 8009836:	095b      	lsrs	r3, r3, #5
 8009838:	2264      	movs	r2, #100	; 0x64
 800983a:	fb02 f303 	mul.w	r3, r2, r3
 800983e:	1acb      	subs	r3, r1, r3
 8009840:	00db      	lsls	r3, r3, #3
 8009842:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009846:	4b36      	ldr	r3, [pc, #216]	; (8009920 <UART_SetConfig+0x2d4>)
 8009848:	fba3 2302 	umull	r2, r3, r3, r2
 800984c:	095b      	lsrs	r3, r3, #5
 800984e:	005b      	lsls	r3, r3, #1
 8009850:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009854:	441c      	add	r4, r3
 8009856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800985a:	2200      	movs	r2, #0
 800985c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009860:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009864:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009868:	4642      	mov	r2, r8
 800986a:	464b      	mov	r3, r9
 800986c:	1891      	adds	r1, r2, r2
 800986e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009870:	415b      	adcs	r3, r3
 8009872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009874:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009878:	4641      	mov	r1, r8
 800987a:	1851      	adds	r1, r2, r1
 800987c:	6339      	str	r1, [r7, #48]	; 0x30
 800987e:	4649      	mov	r1, r9
 8009880:	414b      	adcs	r3, r1
 8009882:	637b      	str	r3, [r7, #52]	; 0x34
 8009884:	f04f 0200 	mov.w	r2, #0
 8009888:	f04f 0300 	mov.w	r3, #0
 800988c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009890:	4659      	mov	r1, fp
 8009892:	00cb      	lsls	r3, r1, #3
 8009894:	4651      	mov	r1, sl
 8009896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800989a:	4651      	mov	r1, sl
 800989c:	00ca      	lsls	r2, r1, #3
 800989e:	4610      	mov	r0, r2
 80098a0:	4619      	mov	r1, r3
 80098a2:	4603      	mov	r3, r0
 80098a4:	4642      	mov	r2, r8
 80098a6:	189b      	adds	r3, r3, r2
 80098a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80098ac:	464b      	mov	r3, r9
 80098ae:	460a      	mov	r2, r1
 80098b0:	eb42 0303 	adc.w	r3, r2, r3
 80098b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80098c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80098c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80098cc:	460b      	mov	r3, r1
 80098ce:	18db      	adds	r3, r3, r3
 80098d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80098d2:	4613      	mov	r3, r2
 80098d4:	eb42 0303 	adc.w	r3, r2, r3
 80098d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80098e2:	f7f7 f8cb 	bl	8000a7c <__aeabi_uldivmod>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	4b0d      	ldr	r3, [pc, #52]	; (8009920 <UART_SetConfig+0x2d4>)
 80098ec:	fba3 1302 	umull	r1, r3, r3, r2
 80098f0:	095b      	lsrs	r3, r3, #5
 80098f2:	2164      	movs	r1, #100	; 0x64
 80098f4:	fb01 f303 	mul.w	r3, r1, r3
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	00db      	lsls	r3, r3, #3
 80098fc:	3332      	adds	r3, #50	; 0x32
 80098fe:	4a08      	ldr	r2, [pc, #32]	; (8009920 <UART_SetConfig+0x2d4>)
 8009900:	fba2 2303 	umull	r2, r3, r2, r3
 8009904:	095b      	lsrs	r3, r3, #5
 8009906:	f003 0207 	and.w	r2, r3, #7
 800990a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4422      	add	r2, r4
 8009912:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009914:	e106      	b.n	8009b24 <UART_SetConfig+0x4d8>
 8009916:	bf00      	nop
 8009918:	40011000 	.word	0x40011000
 800991c:	40011400 	.word	0x40011400
 8009920:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009928:	2200      	movs	r2, #0
 800992a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800992e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009932:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009936:	4642      	mov	r2, r8
 8009938:	464b      	mov	r3, r9
 800993a:	1891      	adds	r1, r2, r2
 800993c:	6239      	str	r1, [r7, #32]
 800993e:	415b      	adcs	r3, r3
 8009940:	627b      	str	r3, [r7, #36]	; 0x24
 8009942:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009946:	4641      	mov	r1, r8
 8009948:	1854      	adds	r4, r2, r1
 800994a:	4649      	mov	r1, r9
 800994c:	eb43 0501 	adc.w	r5, r3, r1
 8009950:	f04f 0200 	mov.w	r2, #0
 8009954:	f04f 0300 	mov.w	r3, #0
 8009958:	00eb      	lsls	r3, r5, #3
 800995a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800995e:	00e2      	lsls	r2, r4, #3
 8009960:	4614      	mov	r4, r2
 8009962:	461d      	mov	r5, r3
 8009964:	4643      	mov	r3, r8
 8009966:	18e3      	adds	r3, r4, r3
 8009968:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800996c:	464b      	mov	r3, r9
 800996e:	eb45 0303 	adc.w	r3, r5, r3
 8009972:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009982:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009986:	f04f 0200 	mov.w	r2, #0
 800998a:	f04f 0300 	mov.w	r3, #0
 800998e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009992:	4629      	mov	r1, r5
 8009994:	008b      	lsls	r3, r1, #2
 8009996:	4621      	mov	r1, r4
 8009998:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800999c:	4621      	mov	r1, r4
 800999e:	008a      	lsls	r2, r1, #2
 80099a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80099a4:	f7f7 f86a 	bl	8000a7c <__aeabi_uldivmod>
 80099a8:	4602      	mov	r2, r0
 80099aa:	460b      	mov	r3, r1
 80099ac:	4b60      	ldr	r3, [pc, #384]	; (8009b30 <UART_SetConfig+0x4e4>)
 80099ae:	fba3 2302 	umull	r2, r3, r3, r2
 80099b2:	095b      	lsrs	r3, r3, #5
 80099b4:	011c      	lsls	r4, r3, #4
 80099b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099ba:	2200      	movs	r2, #0
 80099bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80099c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80099c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80099c8:	4642      	mov	r2, r8
 80099ca:	464b      	mov	r3, r9
 80099cc:	1891      	adds	r1, r2, r2
 80099ce:	61b9      	str	r1, [r7, #24]
 80099d0:	415b      	adcs	r3, r3
 80099d2:	61fb      	str	r3, [r7, #28]
 80099d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80099d8:	4641      	mov	r1, r8
 80099da:	1851      	adds	r1, r2, r1
 80099dc:	6139      	str	r1, [r7, #16]
 80099de:	4649      	mov	r1, r9
 80099e0:	414b      	adcs	r3, r1
 80099e2:	617b      	str	r3, [r7, #20]
 80099e4:	f04f 0200 	mov.w	r2, #0
 80099e8:	f04f 0300 	mov.w	r3, #0
 80099ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80099f0:	4659      	mov	r1, fp
 80099f2:	00cb      	lsls	r3, r1, #3
 80099f4:	4651      	mov	r1, sl
 80099f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099fa:	4651      	mov	r1, sl
 80099fc:	00ca      	lsls	r2, r1, #3
 80099fe:	4610      	mov	r0, r2
 8009a00:	4619      	mov	r1, r3
 8009a02:	4603      	mov	r3, r0
 8009a04:	4642      	mov	r2, r8
 8009a06:	189b      	adds	r3, r3, r2
 8009a08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a0c:	464b      	mov	r3, r9
 8009a0e:	460a      	mov	r2, r1
 8009a10:	eb42 0303 	adc.w	r3, r2, r3
 8009a14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009a24:	f04f 0200 	mov.w	r2, #0
 8009a28:	f04f 0300 	mov.w	r3, #0
 8009a2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009a30:	4649      	mov	r1, r9
 8009a32:	008b      	lsls	r3, r1, #2
 8009a34:	4641      	mov	r1, r8
 8009a36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a3a:	4641      	mov	r1, r8
 8009a3c:	008a      	lsls	r2, r1, #2
 8009a3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009a42:	f7f7 f81b 	bl	8000a7c <__aeabi_uldivmod>
 8009a46:	4602      	mov	r2, r0
 8009a48:	460b      	mov	r3, r1
 8009a4a:	4611      	mov	r1, r2
 8009a4c:	4b38      	ldr	r3, [pc, #224]	; (8009b30 <UART_SetConfig+0x4e4>)
 8009a4e:	fba3 2301 	umull	r2, r3, r3, r1
 8009a52:	095b      	lsrs	r3, r3, #5
 8009a54:	2264      	movs	r2, #100	; 0x64
 8009a56:	fb02 f303 	mul.w	r3, r2, r3
 8009a5a:	1acb      	subs	r3, r1, r3
 8009a5c:	011b      	lsls	r3, r3, #4
 8009a5e:	3332      	adds	r3, #50	; 0x32
 8009a60:	4a33      	ldr	r2, [pc, #204]	; (8009b30 <UART_SetConfig+0x4e4>)
 8009a62:	fba2 2303 	umull	r2, r3, r2, r3
 8009a66:	095b      	lsrs	r3, r3, #5
 8009a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a6c:	441c      	add	r4, r3
 8009a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a72:	2200      	movs	r2, #0
 8009a74:	673b      	str	r3, [r7, #112]	; 0x70
 8009a76:	677a      	str	r2, [r7, #116]	; 0x74
 8009a78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009a7c:	4642      	mov	r2, r8
 8009a7e:	464b      	mov	r3, r9
 8009a80:	1891      	adds	r1, r2, r2
 8009a82:	60b9      	str	r1, [r7, #8]
 8009a84:	415b      	adcs	r3, r3
 8009a86:	60fb      	str	r3, [r7, #12]
 8009a88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a8c:	4641      	mov	r1, r8
 8009a8e:	1851      	adds	r1, r2, r1
 8009a90:	6039      	str	r1, [r7, #0]
 8009a92:	4649      	mov	r1, r9
 8009a94:	414b      	adcs	r3, r1
 8009a96:	607b      	str	r3, [r7, #4]
 8009a98:	f04f 0200 	mov.w	r2, #0
 8009a9c:	f04f 0300 	mov.w	r3, #0
 8009aa0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009aa4:	4659      	mov	r1, fp
 8009aa6:	00cb      	lsls	r3, r1, #3
 8009aa8:	4651      	mov	r1, sl
 8009aaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009aae:	4651      	mov	r1, sl
 8009ab0:	00ca      	lsls	r2, r1, #3
 8009ab2:	4610      	mov	r0, r2
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	4642      	mov	r2, r8
 8009aba:	189b      	adds	r3, r3, r2
 8009abc:	66bb      	str	r3, [r7, #104]	; 0x68
 8009abe:	464b      	mov	r3, r9
 8009ac0:	460a      	mov	r2, r1
 8009ac2:	eb42 0303 	adc.w	r3, r2, r3
 8009ac6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	663b      	str	r3, [r7, #96]	; 0x60
 8009ad2:	667a      	str	r2, [r7, #100]	; 0x64
 8009ad4:	f04f 0200 	mov.w	r2, #0
 8009ad8:	f04f 0300 	mov.w	r3, #0
 8009adc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009ae0:	4649      	mov	r1, r9
 8009ae2:	008b      	lsls	r3, r1, #2
 8009ae4:	4641      	mov	r1, r8
 8009ae6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009aea:	4641      	mov	r1, r8
 8009aec:	008a      	lsls	r2, r1, #2
 8009aee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009af2:	f7f6 ffc3 	bl	8000a7c <__aeabi_uldivmod>
 8009af6:	4602      	mov	r2, r0
 8009af8:	460b      	mov	r3, r1
 8009afa:	4b0d      	ldr	r3, [pc, #52]	; (8009b30 <UART_SetConfig+0x4e4>)
 8009afc:	fba3 1302 	umull	r1, r3, r3, r2
 8009b00:	095b      	lsrs	r3, r3, #5
 8009b02:	2164      	movs	r1, #100	; 0x64
 8009b04:	fb01 f303 	mul.w	r3, r1, r3
 8009b08:	1ad3      	subs	r3, r2, r3
 8009b0a:	011b      	lsls	r3, r3, #4
 8009b0c:	3332      	adds	r3, #50	; 0x32
 8009b0e:	4a08      	ldr	r2, [pc, #32]	; (8009b30 <UART_SetConfig+0x4e4>)
 8009b10:	fba2 2303 	umull	r2, r3, r2, r3
 8009b14:	095b      	lsrs	r3, r3, #5
 8009b16:	f003 020f 	and.w	r2, r3, #15
 8009b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4422      	add	r2, r4
 8009b22:	609a      	str	r2, [r3, #8]
}
 8009b24:	bf00      	nop
 8009b26:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b30:	51eb851f 	.word	0x51eb851f

08009b34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b34:	b084      	sub	sp, #16
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b084      	sub	sp, #16
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
 8009b3e:	f107 001c 	add.w	r0, r7, #28
 8009b42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d122      	bne.n	8009b92 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d105      	bne.n	8009b86 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 faa2 	bl	800a0d0 <USB_CoreReset>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	73fb      	strb	r3, [r7, #15]
 8009b90:	e01a      	b.n	8009bc8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fa96 	bl	800a0d0 <USB_CoreReset>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d106      	bne.n	8009bbc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	639a      	str	r2, [r3, #56]	; 0x38
 8009bba:	e005      	b.n	8009bc8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d10b      	bne.n	8009be6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	f043 0206 	orr.w	r2, r3, #6
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	f043 0220 	orr.w	r2, r3, #32
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3710      	adds	r7, #16
 8009bec:	46bd      	mov	sp, r7
 8009bee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009bf2:	b004      	add	sp, #16
 8009bf4:	4770      	bx	lr

08009bf6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009bf6:	b480      	push	{r7}
 8009bf8:	b083      	sub	sp, #12
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	f023 0201 	bic.w	r2, r3, #1
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	460b      	mov	r3, r1
 8009c22:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009c24:	2300      	movs	r3, #0
 8009c26:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009c34:	78fb      	ldrb	r3, [r7, #3]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d115      	bne.n	8009c66 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009c46:	2001      	movs	r0, #1
 8009c48:	f7fb fb12 	bl	8005270 <HAL_Delay>
      ms++;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fa2e 	bl	800a0b4 <USB_GetMode>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d01e      	beq.n	8009c9c <USB_SetCurrentMode+0x84>
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2b31      	cmp	r3, #49	; 0x31
 8009c62:	d9f0      	bls.n	8009c46 <USB_SetCurrentMode+0x2e>
 8009c64:	e01a      	b.n	8009c9c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009c66:	78fb      	ldrb	r3, [r7, #3]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d115      	bne.n	8009c98 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009c78:	2001      	movs	r0, #1
 8009c7a:	f7fb faf9 	bl	8005270 <HAL_Delay>
      ms++;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	3301      	adds	r3, #1
 8009c82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fa15 	bl	800a0b4 <USB_GetMode>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d005      	beq.n	8009c9c <USB_SetCurrentMode+0x84>
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2b31      	cmp	r3, #49	; 0x31
 8009c94:	d9f0      	bls.n	8009c78 <USB_SetCurrentMode+0x60>
 8009c96:	e001      	b.n	8009c9c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e005      	b.n	8009ca8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2b32      	cmp	r3, #50	; 0x32
 8009ca0:	d101      	bne.n	8009ca6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e000      	b.n	8009ca8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009cb0:	b084      	sub	sp, #16
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b086      	sub	sp, #24
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
 8009cba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009cbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009cca:	2300      	movs	r3, #0
 8009ccc:	613b      	str	r3, [r7, #16]
 8009cce:	e009      	b.n	8009ce4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	3340      	adds	r3, #64	; 0x40
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	4413      	add	r3, r2
 8009cda:	2200      	movs	r2, #0
 8009cdc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	613b      	str	r3, [r7, #16]
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	2b0e      	cmp	r3, #14
 8009ce8:	d9f2      	bls.n	8009cd0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d11c      	bne.n	8009d2a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cfe:	f043 0302 	orr.w	r3, r3, #2
 8009d02:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d14:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d20:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	639a      	str	r2, [r3, #56]	; 0x38
 8009d28:	e00b      	b.n	8009d42 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d3a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d48:	461a      	mov	r2, r3
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d54:	4619      	mov	r1, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	680b      	ldr	r3, [r1, #0]
 8009d60:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d10c      	bne.n	8009d82 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d104      	bne.n	8009d78 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009d6e:	2100      	movs	r1, #0
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 f965 	bl	800a040 <USB_SetDevSpeed>
 8009d76:	e008      	b.n	8009d8a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009d78:	2101      	movs	r1, #1
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 f960 	bl	800a040 <USB_SetDevSpeed>
 8009d80:	e003      	b.n	8009d8a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009d82:	2103      	movs	r1, #3
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f95b 	bl	800a040 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009d8a:	2110      	movs	r1, #16
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 f8f3 	bl	8009f78 <USB_FlushTxFifo>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d001      	beq.n	8009d9c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 f91f 	bl	8009fe0 <USB_FlushRxFifo>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d001      	beq.n	8009dac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009db2:	461a      	mov	r2, r3
 8009db4:	2300      	movs	r3, #0
 8009db6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dca:	461a      	mov	r2, r3
 8009dcc:	2300      	movs	r3, #0
 8009dce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	613b      	str	r3, [r7, #16]
 8009dd4:	e043      	b.n	8009e5e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	015a      	lsls	r2, r3, #5
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	4413      	add	r3, r2
 8009dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009de8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009dec:	d118      	bne.n	8009e20 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10a      	bne.n	8009e0a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	015a      	lsls	r2, r3, #5
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e00:	461a      	mov	r2, r3
 8009e02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e06:	6013      	str	r3, [r2, #0]
 8009e08:	e013      	b.n	8009e32 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	015a      	lsls	r2, r3, #5
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	4413      	add	r3, r2
 8009e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e16:	461a      	mov	r2, r3
 8009e18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009e1c:	6013      	str	r3, [r2, #0]
 8009e1e:	e008      	b.n	8009e32 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	015a      	lsls	r2, r3, #5
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	4413      	add	r3, r2
 8009e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	2300      	movs	r3, #0
 8009e30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	015a      	lsls	r2, r3, #5
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	4413      	add	r3, r2
 8009e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e3e:	461a      	mov	r2, r3
 8009e40:	2300      	movs	r3, #0
 8009e42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	015a      	lsls	r2, r3, #5
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e50:	461a      	mov	r2, r3
 8009e52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009e56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	613b      	str	r3, [r7, #16]
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d3b7      	bcc.n	8009dd6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e66:	2300      	movs	r3, #0
 8009e68:	613b      	str	r3, [r7, #16]
 8009e6a:	e043      	b.n	8009ef4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	015a      	lsls	r2, r3, #5
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	4413      	add	r3, r2
 8009e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e82:	d118      	bne.n	8009eb6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d10a      	bne.n	8009ea0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	015a      	lsls	r2, r3, #5
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	4413      	add	r3, r2
 8009e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e96:	461a      	mov	r2, r3
 8009e98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e9c:	6013      	str	r3, [r2, #0]
 8009e9e:	e013      	b.n	8009ec8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	015a      	lsls	r2, r3, #5
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	4413      	add	r3, r2
 8009ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eac:	461a      	mov	r2, r3
 8009eae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009eb2:	6013      	str	r3, [r2, #0]
 8009eb4:	e008      	b.n	8009ec8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	015a      	lsls	r2, r3, #5
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	015a      	lsls	r2, r3, #5
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	4413      	add	r3, r2
 8009ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	015a      	lsls	r2, r3, #5
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009eec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	613b      	str	r3, [r7, #16]
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d3b7      	bcc.n	8009e6c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f0e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009f1c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d105      	bne.n	8009f30 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	699b      	ldr	r3, [r3, #24]
 8009f28:	f043 0210 	orr.w	r2, r3, #16
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	699a      	ldr	r2, [r3, #24]
 8009f34:	4b0f      	ldr	r3, [pc, #60]	; (8009f74 <USB_DevInit+0x2c4>)
 8009f36:	4313      	orrs	r3, r2
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d005      	beq.n	8009f4e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	f043 0208 	orr.w	r2, r3, #8
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d107      	bne.n	8009f64 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	699b      	ldr	r3, [r3, #24]
 8009f58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f5c:	f043 0304 	orr.w	r3, r3, #4
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3718      	adds	r7, #24
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f70:	b004      	add	sp, #16
 8009f72:	4770      	bx	lr
 8009f74:	803c3800 	.word	0x803c3800

08009f78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009f82:	2300      	movs	r3, #0
 8009f84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	4a13      	ldr	r2, [pc, #76]	; (8009fdc <USB_FlushTxFifo+0x64>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d901      	bls.n	8009f98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009f94:	2303      	movs	r3, #3
 8009f96:	e01b      	b.n	8009fd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	daf2      	bge.n	8009f86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	019b      	lsls	r3, r3, #6
 8009fa8:	f043 0220 	orr.w	r2, r3, #32
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	4a08      	ldr	r2, [pc, #32]	; (8009fdc <USB_FlushTxFifo+0x64>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d901      	bls.n	8009fc2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	e006      	b.n	8009fd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	f003 0320 	and.w	r3, r3, #32
 8009fca:	2b20      	cmp	r3, #32
 8009fcc:	d0f0      	beq.n	8009fb0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3714      	adds	r7, #20
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	00030d40 	.word	0x00030d40

08009fe0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	4a11      	ldr	r2, [pc, #68]	; (800a03c <USB_FlushRxFifo+0x5c>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d901      	bls.n	8009ffe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	e018      	b.n	800a030 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	2b00      	cmp	r3, #0
 800a004:	daf2      	bge.n	8009fec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a006:	2300      	movs	r3, #0
 800a008:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2210      	movs	r2, #16
 800a00e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	3301      	adds	r3, #1
 800a014:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	4a08      	ldr	r2, [pc, #32]	; (800a03c <USB_FlushRxFifo+0x5c>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d901      	bls.n	800a022 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a01e:	2303      	movs	r3, #3
 800a020:	e006      	b.n	800a030 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	f003 0310 	and.w	r3, r3, #16
 800a02a:	2b10      	cmp	r3, #16
 800a02c:	d0f0      	beq.n	800a010 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3714      	adds	r7, #20
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr
 800a03c:	00030d40 	.word	0x00030d40

0800a040 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a040:	b480      	push	{r7}
 800a042:	b085      	sub	sp, #20
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	460b      	mov	r3, r1
 800a04a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	78fb      	ldrb	r3, [r7, #3]
 800a05a:	68f9      	ldr	r1, [r7, #12]
 800a05c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a060:	4313      	orrs	r3, r2
 800a062:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a064:	2300      	movs	r3, #0
}
 800a066:	4618      	mov	r0, r3
 800a068:	3714      	adds	r7, #20
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr

0800a072 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a072:	b480      	push	{r7}
 800a074:	b085      	sub	sp, #20
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68fa      	ldr	r2, [r7, #12]
 800a088:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a08c:	f023 0303 	bic.w	r3, r3, #3
 800a090:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0a0:	f043 0302 	orr.w	r3, r3, #2
 800a0a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3714      	adds	r7, #20
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	695b      	ldr	r3, [r3, #20]
 800a0c0:	f003 0301 	and.w	r3, r3, #1
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b085      	sub	sp, #20
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	4a13      	ldr	r2, [pc, #76]	; (800a134 <USB_CoreReset+0x64>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d901      	bls.n	800a0ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a0ea:	2303      	movs	r3, #3
 800a0ec:	e01b      	b.n	800a126 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	691b      	ldr	r3, [r3, #16]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	daf2      	bge.n	800a0dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	f043 0201 	orr.w	r2, r3, #1
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	3301      	adds	r3, #1
 800a10a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	4a09      	ldr	r2, [pc, #36]	; (800a134 <USB_CoreReset+0x64>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d901      	bls.n	800a118 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a114:	2303      	movs	r3, #3
 800a116:	e006      	b.n	800a126 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	f003 0301 	and.w	r3, r3, #1
 800a120:	2b01      	cmp	r3, #1
 800a122:	d0f0      	beq.n	800a106 <USB_CoreReset+0x36>

  return HAL_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3714      	adds	r7, #20
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	00030d40 	.word	0x00030d40

0800a138 <_ZdlPvj>:
 800a138:	f000 b81a 	b.w	800a170 <_ZdlPv>

0800a13c <_Znwj>:
 800a13c:	2801      	cmp	r0, #1
 800a13e:	bf38      	it	cc
 800a140:	2001      	movcc	r0, #1
 800a142:	b510      	push	{r4, lr}
 800a144:	4604      	mov	r4, r0
 800a146:	4620      	mov	r0, r4
 800a148:	f000 f824 	bl	800a194 <malloc>
 800a14c:	b100      	cbz	r0, 800a150 <_Znwj+0x14>
 800a14e:	bd10      	pop	{r4, pc}
 800a150:	f000 f810 	bl	800a174 <_ZSt15get_new_handlerv>
 800a154:	b908      	cbnz	r0, 800a15a <_Znwj+0x1e>
 800a156:	f000 f815 	bl	800a184 <abort>
 800a15a:	4780      	blx	r0
 800a15c:	e7f3      	b.n	800a146 <_Znwj+0xa>

0800a15e <_ZSt17__throw_bad_allocv>:
 800a15e:	b508      	push	{r3, lr}
 800a160:	f000 f810 	bl	800a184 <abort>

0800a164 <_ZSt28__throw_bad_array_new_lengthv>:
 800a164:	b508      	push	{r3, lr}
 800a166:	f000 f80d 	bl	800a184 <abort>

0800a16a <_ZSt20__throw_length_errorPKc>:
 800a16a:	b508      	push	{r3, lr}
 800a16c:	f000 f80a 	bl	800a184 <abort>

0800a170 <_ZdlPv>:
 800a170:	f000 b818 	b.w	800a1a4 <free>

0800a174 <_ZSt15get_new_handlerv>:
 800a174:	4b02      	ldr	r3, [pc, #8]	; (800a180 <_ZSt15get_new_handlerv+0xc>)
 800a176:	6818      	ldr	r0, [r3, #0]
 800a178:	f3bf 8f5b 	dmb	ish
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	20000ea8 	.word	0x20000ea8

0800a184 <abort>:
 800a184:	b508      	push	{r3, lr}
 800a186:	2006      	movs	r0, #6
 800a188:	f000 f964 	bl	800a454 <raise>
 800a18c:	2001      	movs	r0, #1
 800a18e:	f7fa ff81 	bl	8005094 <_exit>
	...

0800a194 <malloc>:
 800a194:	4b02      	ldr	r3, [pc, #8]	; (800a1a0 <malloc+0xc>)
 800a196:	4601      	mov	r1, r0
 800a198:	6818      	ldr	r0, [r3, #0]
 800a19a:	f000 b82b 	b.w	800a1f4 <_malloc_r>
 800a19e:	bf00      	nop
 800a1a0:	2000007c 	.word	0x2000007c

0800a1a4 <free>:
 800a1a4:	4b02      	ldr	r3, [pc, #8]	; (800a1b0 <free+0xc>)
 800a1a6:	4601      	mov	r1, r0
 800a1a8:	6818      	ldr	r0, [r3, #0]
 800a1aa:	f000 b9b9 	b.w	800a520 <_free_r>
 800a1ae:	bf00      	nop
 800a1b0:	2000007c 	.word	0x2000007c

0800a1b4 <sbrk_aligned>:
 800a1b4:	b570      	push	{r4, r5, r6, lr}
 800a1b6:	4e0e      	ldr	r6, [pc, #56]	; (800a1f0 <sbrk_aligned+0x3c>)
 800a1b8:	460c      	mov	r4, r1
 800a1ba:	6831      	ldr	r1, [r6, #0]
 800a1bc:	4605      	mov	r5, r0
 800a1be:	b911      	cbnz	r1, 800a1c6 <sbrk_aligned+0x12>
 800a1c0:	f000 f964 	bl	800a48c <_sbrk_r>
 800a1c4:	6030      	str	r0, [r6, #0]
 800a1c6:	4621      	mov	r1, r4
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	f000 f95f 	bl	800a48c <_sbrk_r>
 800a1ce:	1c43      	adds	r3, r0, #1
 800a1d0:	d00a      	beq.n	800a1e8 <sbrk_aligned+0x34>
 800a1d2:	1cc4      	adds	r4, r0, #3
 800a1d4:	f024 0403 	bic.w	r4, r4, #3
 800a1d8:	42a0      	cmp	r0, r4
 800a1da:	d007      	beq.n	800a1ec <sbrk_aligned+0x38>
 800a1dc:	1a21      	subs	r1, r4, r0
 800a1de:	4628      	mov	r0, r5
 800a1e0:	f000 f954 	bl	800a48c <_sbrk_r>
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	d101      	bne.n	800a1ec <sbrk_aligned+0x38>
 800a1e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	bd70      	pop	{r4, r5, r6, pc}
 800a1f0:	20000eb0 	.word	0x20000eb0

0800a1f4 <_malloc_r>:
 800a1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1f8:	1ccd      	adds	r5, r1, #3
 800a1fa:	f025 0503 	bic.w	r5, r5, #3
 800a1fe:	3508      	adds	r5, #8
 800a200:	2d0c      	cmp	r5, #12
 800a202:	bf38      	it	cc
 800a204:	250c      	movcc	r5, #12
 800a206:	2d00      	cmp	r5, #0
 800a208:	4607      	mov	r7, r0
 800a20a:	db01      	blt.n	800a210 <_malloc_r+0x1c>
 800a20c:	42a9      	cmp	r1, r5
 800a20e:	d905      	bls.n	800a21c <_malloc_r+0x28>
 800a210:	230c      	movs	r3, #12
 800a212:	603b      	str	r3, [r7, #0]
 800a214:	2600      	movs	r6, #0
 800a216:	4630      	mov	r0, r6
 800a218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a21c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a2f0 <_malloc_r+0xfc>
 800a220:	f000 f868 	bl	800a2f4 <__malloc_lock>
 800a224:	f8d8 3000 	ldr.w	r3, [r8]
 800a228:	461c      	mov	r4, r3
 800a22a:	bb5c      	cbnz	r4, 800a284 <_malloc_r+0x90>
 800a22c:	4629      	mov	r1, r5
 800a22e:	4638      	mov	r0, r7
 800a230:	f7ff ffc0 	bl	800a1b4 <sbrk_aligned>
 800a234:	1c43      	adds	r3, r0, #1
 800a236:	4604      	mov	r4, r0
 800a238:	d155      	bne.n	800a2e6 <_malloc_r+0xf2>
 800a23a:	f8d8 4000 	ldr.w	r4, [r8]
 800a23e:	4626      	mov	r6, r4
 800a240:	2e00      	cmp	r6, #0
 800a242:	d145      	bne.n	800a2d0 <_malloc_r+0xdc>
 800a244:	2c00      	cmp	r4, #0
 800a246:	d048      	beq.n	800a2da <_malloc_r+0xe6>
 800a248:	6823      	ldr	r3, [r4, #0]
 800a24a:	4631      	mov	r1, r6
 800a24c:	4638      	mov	r0, r7
 800a24e:	eb04 0903 	add.w	r9, r4, r3
 800a252:	f000 f91b 	bl	800a48c <_sbrk_r>
 800a256:	4581      	cmp	r9, r0
 800a258:	d13f      	bne.n	800a2da <_malloc_r+0xe6>
 800a25a:	6821      	ldr	r1, [r4, #0]
 800a25c:	1a6d      	subs	r5, r5, r1
 800a25e:	4629      	mov	r1, r5
 800a260:	4638      	mov	r0, r7
 800a262:	f7ff ffa7 	bl	800a1b4 <sbrk_aligned>
 800a266:	3001      	adds	r0, #1
 800a268:	d037      	beq.n	800a2da <_malloc_r+0xe6>
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	442b      	add	r3, r5
 800a26e:	6023      	str	r3, [r4, #0]
 800a270:	f8d8 3000 	ldr.w	r3, [r8]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d038      	beq.n	800a2ea <_malloc_r+0xf6>
 800a278:	685a      	ldr	r2, [r3, #4]
 800a27a:	42a2      	cmp	r2, r4
 800a27c:	d12b      	bne.n	800a2d6 <_malloc_r+0xe2>
 800a27e:	2200      	movs	r2, #0
 800a280:	605a      	str	r2, [r3, #4]
 800a282:	e00f      	b.n	800a2a4 <_malloc_r+0xb0>
 800a284:	6822      	ldr	r2, [r4, #0]
 800a286:	1b52      	subs	r2, r2, r5
 800a288:	d41f      	bmi.n	800a2ca <_malloc_r+0xd6>
 800a28a:	2a0b      	cmp	r2, #11
 800a28c:	d917      	bls.n	800a2be <_malloc_r+0xca>
 800a28e:	1961      	adds	r1, r4, r5
 800a290:	42a3      	cmp	r3, r4
 800a292:	6025      	str	r5, [r4, #0]
 800a294:	bf18      	it	ne
 800a296:	6059      	strne	r1, [r3, #4]
 800a298:	6863      	ldr	r3, [r4, #4]
 800a29a:	bf08      	it	eq
 800a29c:	f8c8 1000 	streq.w	r1, [r8]
 800a2a0:	5162      	str	r2, [r4, r5]
 800a2a2:	604b      	str	r3, [r1, #4]
 800a2a4:	4638      	mov	r0, r7
 800a2a6:	f104 060b 	add.w	r6, r4, #11
 800a2aa:	f000 f829 	bl	800a300 <__malloc_unlock>
 800a2ae:	f026 0607 	bic.w	r6, r6, #7
 800a2b2:	1d23      	adds	r3, r4, #4
 800a2b4:	1af2      	subs	r2, r6, r3
 800a2b6:	d0ae      	beq.n	800a216 <_malloc_r+0x22>
 800a2b8:	1b9b      	subs	r3, r3, r6
 800a2ba:	50a3      	str	r3, [r4, r2]
 800a2bc:	e7ab      	b.n	800a216 <_malloc_r+0x22>
 800a2be:	42a3      	cmp	r3, r4
 800a2c0:	6862      	ldr	r2, [r4, #4]
 800a2c2:	d1dd      	bne.n	800a280 <_malloc_r+0x8c>
 800a2c4:	f8c8 2000 	str.w	r2, [r8]
 800a2c8:	e7ec      	b.n	800a2a4 <_malloc_r+0xb0>
 800a2ca:	4623      	mov	r3, r4
 800a2cc:	6864      	ldr	r4, [r4, #4]
 800a2ce:	e7ac      	b.n	800a22a <_malloc_r+0x36>
 800a2d0:	4634      	mov	r4, r6
 800a2d2:	6876      	ldr	r6, [r6, #4]
 800a2d4:	e7b4      	b.n	800a240 <_malloc_r+0x4c>
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	e7cc      	b.n	800a274 <_malloc_r+0x80>
 800a2da:	230c      	movs	r3, #12
 800a2dc:	603b      	str	r3, [r7, #0]
 800a2de:	4638      	mov	r0, r7
 800a2e0:	f000 f80e 	bl	800a300 <__malloc_unlock>
 800a2e4:	e797      	b.n	800a216 <_malloc_r+0x22>
 800a2e6:	6025      	str	r5, [r4, #0]
 800a2e8:	e7dc      	b.n	800a2a4 <_malloc_r+0xb0>
 800a2ea:	605b      	str	r3, [r3, #4]
 800a2ec:	deff      	udf	#255	; 0xff
 800a2ee:	bf00      	nop
 800a2f0:	20000eac 	.word	0x20000eac

0800a2f4 <__malloc_lock>:
 800a2f4:	4801      	ldr	r0, [pc, #4]	; (800a2fc <__malloc_lock+0x8>)
 800a2f6:	f000 b903 	b.w	800a500 <__retarget_lock_acquire_recursive>
 800a2fa:	bf00      	nop
 800a2fc:	20000ff0 	.word	0x20000ff0

0800a300 <__malloc_unlock>:
 800a300:	4801      	ldr	r0, [pc, #4]	; (800a308 <__malloc_unlock+0x8>)
 800a302:	f000 b8fe 	b.w	800a502 <__retarget_lock_release_recursive>
 800a306:	bf00      	nop
 800a308:	20000ff0 	.word	0x20000ff0

0800a30c <siprintf>:
 800a30c:	b40e      	push	{r1, r2, r3}
 800a30e:	b500      	push	{lr}
 800a310:	b09c      	sub	sp, #112	; 0x70
 800a312:	ab1d      	add	r3, sp, #116	; 0x74
 800a314:	9002      	str	r0, [sp, #8]
 800a316:	9006      	str	r0, [sp, #24]
 800a318:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a31c:	4809      	ldr	r0, [pc, #36]	; (800a344 <siprintf+0x38>)
 800a31e:	9107      	str	r1, [sp, #28]
 800a320:	9104      	str	r1, [sp, #16]
 800a322:	4909      	ldr	r1, [pc, #36]	; (800a348 <siprintf+0x3c>)
 800a324:	f853 2b04 	ldr.w	r2, [r3], #4
 800a328:	9105      	str	r1, [sp, #20]
 800a32a:	6800      	ldr	r0, [r0, #0]
 800a32c:	9301      	str	r3, [sp, #4]
 800a32e:	a902      	add	r1, sp, #8
 800a330:	f000 f99c 	bl	800a66c <_svfiprintf_r>
 800a334:	9b02      	ldr	r3, [sp, #8]
 800a336:	2200      	movs	r2, #0
 800a338:	701a      	strb	r2, [r3, #0]
 800a33a:	b01c      	add	sp, #112	; 0x70
 800a33c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a340:	b003      	add	sp, #12
 800a342:	4770      	bx	lr
 800a344:	2000007c 	.word	0x2000007c
 800a348:	ffff0208 	.word	0xffff0208

0800a34c <_vsniprintf_r>:
 800a34c:	b530      	push	{r4, r5, lr}
 800a34e:	4614      	mov	r4, r2
 800a350:	2c00      	cmp	r4, #0
 800a352:	b09b      	sub	sp, #108	; 0x6c
 800a354:	4605      	mov	r5, r0
 800a356:	461a      	mov	r2, r3
 800a358:	da05      	bge.n	800a366 <_vsniprintf_r+0x1a>
 800a35a:	238b      	movs	r3, #139	; 0x8b
 800a35c:	6003      	str	r3, [r0, #0]
 800a35e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a362:	b01b      	add	sp, #108	; 0x6c
 800a364:	bd30      	pop	{r4, r5, pc}
 800a366:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a36a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a36e:	bf14      	ite	ne
 800a370:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a374:	4623      	moveq	r3, r4
 800a376:	9302      	str	r3, [sp, #8]
 800a378:	9305      	str	r3, [sp, #20]
 800a37a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a37e:	9100      	str	r1, [sp, #0]
 800a380:	9104      	str	r1, [sp, #16]
 800a382:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a386:	4669      	mov	r1, sp
 800a388:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a38a:	f000 f96f 	bl	800a66c <_svfiprintf_r>
 800a38e:	1c43      	adds	r3, r0, #1
 800a390:	bfbc      	itt	lt
 800a392:	238b      	movlt	r3, #139	; 0x8b
 800a394:	602b      	strlt	r3, [r5, #0]
 800a396:	2c00      	cmp	r4, #0
 800a398:	d0e3      	beq.n	800a362 <_vsniprintf_r+0x16>
 800a39a:	9b00      	ldr	r3, [sp, #0]
 800a39c:	2200      	movs	r2, #0
 800a39e:	701a      	strb	r2, [r3, #0]
 800a3a0:	e7df      	b.n	800a362 <_vsniprintf_r+0x16>
	...

0800a3a4 <vsniprintf>:
 800a3a4:	b507      	push	{r0, r1, r2, lr}
 800a3a6:	9300      	str	r3, [sp, #0]
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	460a      	mov	r2, r1
 800a3ac:	4601      	mov	r1, r0
 800a3ae:	4803      	ldr	r0, [pc, #12]	; (800a3bc <vsniprintf+0x18>)
 800a3b0:	6800      	ldr	r0, [r0, #0]
 800a3b2:	f7ff ffcb 	bl	800a34c <_vsniprintf_r>
 800a3b6:	b003      	add	sp, #12
 800a3b8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a3bc:	2000007c 	.word	0x2000007c

0800a3c0 <memmove>:
 800a3c0:	4288      	cmp	r0, r1
 800a3c2:	b510      	push	{r4, lr}
 800a3c4:	eb01 0402 	add.w	r4, r1, r2
 800a3c8:	d902      	bls.n	800a3d0 <memmove+0x10>
 800a3ca:	4284      	cmp	r4, r0
 800a3cc:	4623      	mov	r3, r4
 800a3ce:	d807      	bhi.n	800a3e0 <memmove+0x20>
 800a3d0:	1e43      	subs	r3, r0, #1
 800a3d2:	42a1      	cmp	r1, r4
 800a3d4:	d008      	beq.n	800a3e8 <memmove+0x28>
 800a3d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3de:	e7f8      	b.n	800a3d2 <memmove+0x12>
 800a3e0:	4402      	add	r2, r0
 800a3e2:	4601      	mov	r1, r0
 800a3e4:	428a      	cmp	r2, r1
 800a3e6:	d100      	bne.n	800a3ea <memmove+0x2a>
 800a3e8:	bd10      	pop	{r4, pc}
 800a3ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3f2:	e7f7      	b.n	800a3e4 <memmove+0x24>

0800a3f4 <memset>:
 800a3f4:	4402      	add	r2, r0
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d100      	bne.n	800a3fe <memset+0xa>
 800a3fc:	4770      	bx	lr
 800a3fe:	f803 1b01 	strb.w	r1, [r3], #1
 800a402:	e7f9      	b.n	800a3f8 <memset+0x4>

0800a404 <_raise_r>:
 800a404:	291f      	cmp	r1, #31
 800a406:	b538      	push	{r3, r4, r5, lr}
 800a408:	4604      	mov	r4, r0
 800a40a:	460d      	mov	r5, r1
 800a40c:	d904      	bls.n	800a418 <_raise_r+0x14>
 800a40e:	2316      	movs	r3, #22
 800a410:	6003      	str	r3, [r0, #0]
 800a412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a416:	bd38      	pop	{r3, r4, r5, pc}
 800a418:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a41a:	b112      	cbz	r2, 800a422 <_raise_r+0x1e>
 800a41c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a420:	b94b      	cbnz	r3, 800a436 <_raise_r+0x32>
 800a422:	4620      	mov	r0, r4
 800a424:	f000 f830 	bl	800a488 <_getpid_r>
 800a428:	462a      	mov	r2, r5
 800a42a:	4601      	mov	r1, r0
 800a42c:	4620      	mov	r0, r4
 800a42e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a432:	f000 b817 	b.w	800a464 <_kill_r>
 800a436:	2b01      	cmp	r3, #1
 800a438:	d00a      	beq.n	800a450 <_raise_r+0x4c>
 800a43a:	1c59      	adds	r1, r3, #1
 800a43c:	d103      	bne.n	800a446 <_raise_r+0x42>
 800a43e:	2316      	movs	r3, #22
 800a440:	6003      	str	r3, [r0, #0]
 800a442:	2001      	movs	r0, #1
 800a444:	e7e7      	b.n	800a416 <_raise_r+0x12>
 800a446:	2400      	movs	r4, #0
 800a448:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a44c:	4628      	mov	r0, r5
 800a44e:	4798      	blx	r3
 800a450:	2000      	movs	r0, #0
 800a452:	e7e0      	b.n	800a416 <_raise_r+0x12>

0800a454 <raise>:
 800a454:	4b02      	ldr	r3, [pc, #8]	; (800a460 <raise+0xc>)
 800a456:	4601      	mov	r1, r0
 800a458:	6818      	ldr	r0, [r3, #0]
 800a45a:	f7ff bfd3 	b.w	800a404 <_raise_r>
 800a45e:	bf00      	nop
 800a460:	2000007c 	.word	0x2000007c

0800a464 <_kill_r>:
 800a464:	b538      	push	{r3, r4, r5, lr}
 800a466:	4d07      	ldr	r5, [pc, #28]	; (800a484 <_kill_r+0x20>)
 800a468:	2300      	movs	r3, #0
 800a46a:	4604      	mov	r4, r0
 800a46c:	4608      	mov	r0, r1
 800a46e:	4611      	mov	r1, r2
 800a470:	602b      	str	r3, [r5, #0]
 800a472:	f7fa fdff 	bl	8005074 <_kill>
 800a476:	1c43      	adds	r3, r0, #1
 800a478:	d102      	bne.n	800a480 <_kill_r+0x1c>
 800a47a:	682b      	ldr	r3, [r5, #0]
 800a47c:	b103      	cbz	r3, 800a480 <_kill_r+0x1c>
 800a47e:	6023      	str	r3, [r4, #0]
 800a480:	bd38      	pop	{r3, r4, r5, pc}
 800a482:	bf00      	nop
 800a484:	20000fec 	.word	0x20000fec

0800a488 <_getpid_r>:
 800a488:	f7fa bdec 	b.w	8005064 <_getpid>

0800a48c <_sbrk_r>:
 800a48c:	b538      	push	{r3, r4, r5, lr}
 800a48e:	4d06      	ldr	r5, [pc, #24]	; (800a4a8 <_sbrk_r+0x1c>)
 800a490:	2300      	movs	r3, #0
 800a492:	4604      	mov	r4, r0
 800a494:	4608      	mov	r0, r1
 800a496:	602b      	str	r3, [r5, #0]
 800a498:	f7fa fe06 	bl	80050a8 <_sbrk>
 800a49c:	1c43      	adds	r3, r0, #1
 800a49e:	d102      	bne.n	800a4a6 <_sbrk_r+0x1a>
 800a4a0:	682b      	ldr	r3, [r5, #0]
 800a4a2:	b103      	cbz	r3, 800a4a6 <_sbrk_r+0x1a>
 800a4a4:	6023      	str	r3, [r4, #0]
 800a4a6:	bd38      	pop	{r3, r4, r5, pc}
 800a4a8:	20000fec 	.word	0x20000fec

0800a4ac <__errno>:
 800a4ac:	4b01      	ldr	r3, [pc, #4]	; (800a4b4 <__errno+0x8>)
 800a4ae:	6818      	ldr	r0, [r3, #0]
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop
 800a4b4:	2000007c 	.word	0x2000007c

0800a4b8 <__libc_init_array>:
 800a4b8:	b570      	push	{r4, r5, r6, lr}
 800a4ba:	4d0d      	ldr	r5, [pc, #52]	; (800a4f0 <__libc_init_array+0x38>)
 800a4bc:	4c0d      	ldr	r4, [pc, #52]	; (800a4f4 <__libc_init_array+0x3c>)
 800a4be:	1b64      	subs	r4, r4, r5
 800a4c0:	10a4      	asrs	r4, r4, #2
 800a4c2:	2600      	movs	r6, #0
 800a4c4:	42a6      	cmp	r6, r4
 800a4c6:	d109      	bne.n	800a4dc <__libc_init_array+0x24>
 800a4c8:	4d0b      	ldr	r5, [pc, #44]	; (800a4f8 <__libc_init_array+0x40>)
 800a4ca:	4c0c      	ldr	r4, [pc, #48]	; (800a4fc <__libc_init_array+0x44>)
 800a4cc:	f000 fb94 	bl	800abf8 <_init>
 800a4d0:	1b64      	subs	r4, r4, r5
 800a4d2:	10a4      	asrs	r4, r4, #2
 800a4d4:	2600      	movs	r6, #0
 800a4d6:	42a6      	cmp	r6, r4
 800a4d8:	d105      	bne.n	800a4e6 <__libc_init_array+0x2e>
 800a4da:	bd70      	pop	{r4, r5, r6, pc}
 800a4dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4e0:	4798      	blx	r3
 800a4e2:	3601      	adds	r6, #1
 800a4e4:	e7ee      	b.n	800a4c4 <__libc_init_array+0xc>
 800a4e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4ea:	4798      	blx	r3
 800a4ec:	3601      	adds	r6, #1
 800a4ee:	e7f2      	b.n	800a4d6 <__libc_init_array+0x1e>
 800a4f0:	08013c64 	.word	0x08013c64
 800a4f4:	08013c64 	.word	0x08013c64
 800a4f8:	08013c64 	.word	0x08013c64
 800a4fc:	08013c6c 	.word	0x08013c6c

0800a500 <__retarget_lock_acquire_recursive>:
 800a500:	4770      	bx	lr

0800a502 <__retarget_lock_release_recursive>:
 800a502:	4770      	bx	lr

0800a504 <memcpy>:
 800a504:	440a      	add	r2, r1
 800a506:	4291      	cmp	r1, r2
 800a508:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a50c:	d100      	bne.n	800a510 <memcpy+0xc>
 800a50e:	4770      	bx	lr
 800a510:	b510      	push	{r4, lr}
 800a512:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a51a:	4291      	cmp	r1, r2
 800a51c:	d1f9      	bne.n	800a512 <memcpy+0xe>
 800a51e:	bd10      	pop	{r4, pc}

0800a520 <_free_r>:
 800a520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a522:	2900      	cmp	r1, #0
 800a524:	d044      	beq.n	800a5b0 <_free_r+0x90>
 800a526:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a52a:	9001      	str	r0, [sp, #4]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f1a1 0404 	sub.w	r4, r1, #4
 800a532:	bfb8      	it	lt
 800a534:	18e4      	addlt	r4, r4, r3
 800a536:	f7ff fedd 	bl	800a2f4 <__malloc_lock>
 800a53a:	4a1e      	ldr	r2, [pc, #120]	; (800a5b4 <_free_r+0x94>)
 800a53c:	9801      	ldr	r0, [sp, #4]
 800a53e:	6813      	ldr	r3, [r2, #0]
 800a540:	b933      	cbnz	r3, 800a550 <_free_r+0x30>
 800a542:	6063      	str	r3, [r4, #4]
 800a544:	6014      	str	r4, [r2, #0]
 800a546:	b003      	add	sp, #12
 800a548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a54c:	f7ff bed8 	b.w	800a300 <__malloc_unlock>
 800a550:	42a3      	cmp	r3, r4
 800a552:	d908      	bls.n	800a566 <_free_r+0x46>
 800a554:	6825      	ldr	r5, [r4, #0]
 800a556:	1961      	adds	r1, r4, r5
 800a558:	428b      	cmp	r3, r1
 800a55a:	bf01      	itttt	eq
 800a55c:	6819      	ldreq	r1, [r3, #0]
 800a55e:	685b      	ldreq	r3, [r3, #4]
 800a560:	1949      	addeq	r1, r1, r5
 800a562:	6021      	streq	r1, [r4, #0]
 800a564:	e7ed      	b.n	800a542 <_free_r+0x22>
 800a566:	461a      	mov	r2, r3
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	b10b      	cbz	r3, 800a570 <_free_r+0x50>
 800a56c:	42a3      	cmp	r3, r4
 800a56e:	d9fa      	bls.n	800a566 <_free_r+0x46>
 800a570:	6811      	ldr	r1, [r2, #0]
 800a572:	1855      	adds	r5, r2, r1
 800a574:	42a5      	cmp	r5, r4
 800a576:	d10b      	bne.n	800a590 <_free_r+0x70>
 800a578:	6824      	ldr	r4, [r4, #0]
 800a57a:	4421      	add	r1, r4
 800a57c:	1854      	adds	r4, r2, r1
 800a57e:	42a3      	cmp	r3, r4
 800a580:	6011      	str	r1, [r2, #0]
 800a582:	d1e0      	bne.n	800a546 <_free_r+0x26>
 800a584:	681c      	ldr	r4, [r3, #0]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	6053      	str	r3, [r2, #4]
 800a58a:	440c      	add	r4, r1
 800a58c:	6014      	str	r4, [r2, #0]
 800a58e:	e7da      	b.n	800a546 <_free_r+0x26>
 800a590:	d902      	bls.n	800a598 <_free_r+0x78>
 800a592:	230c      	movs	r3, #12
 800a594:	6003      	str	r3, [r0, #0]
 800a596:	e7d6      	b.n	800a546 <_free_r+0x26>
 800a598:	6825      	ldr	r5, [r4, #0]
 800a59a:	1961      	adds	r1, r4, r5
 800a59c:	428b      	cmp	r3, r1
 800a59e:	bf04      	itt	eq
 800a5a0:	6819      	ldreq	r1, [r3, #0]
 800a5a2:	685b      	ldreq	r3, [r3, #4]
 800a5a4:	6063      	str	r3, [r4, #4]
 800a5a6:	bf04      	itt	eq
 800a5a8:	1949      	addeq	r1, r1, r5
 800a5aa:	6021      	streq	r1, [r4, #0]
 800a5ac:	6054      	str	r4, [r2, #4]
 800a5ae:	e7ca      	b.n	800a546 <_free_r+0x26>
 800a5b0:	b003      	add	sp, #12
 800a5b2:	bd30      	pop	{r4, r5, pc}
 800a5b4:	20000eac 	.word	0x20000eac

0800a5b8 <__ssputs_r>:
 800a5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5bc:	688e      	ldr	r6, [r1, #8]
 800a5be:	461f      	mov	r7, r3
 800a5c0:	42be      	cmp	r6, r7
 800a5c2:	680b      	ldr	r3, [r1, #0]
 800a5c4:	4682      	mov	sl, r0
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	4690      	mov	r8, r2
 800a5ca:	d82c      	bhi.n	800a626 <__ssputs_r+0x6e>
 800a5cc:	898a      	ldrh	r2, [r1, #12]
 800a5ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5d2:	d026      	beq.n	800a622 <__ssputs_r+0x6a>
 800a5d4:	6965      	ldr	r5, [r4, #20]
 800a5d6:	6909      	ldr	r1, [r1, #16]
 800a5d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5dc:	eba3 0901 	sub.w	r9, r3, r1
 800a5e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5e4:	1c7b      	adds	r3, r7, #1
 800a5e6:	444b      	add	r3, r9
 800a5e8:	106d      	asrs	r5, r5, #1
 800a5ea:	429d      	cmp	r5, r3
 800a5ec:	bf38      	it	cc
 800a5ee:	461d      	movcc	r5, r3
 800a5f0:	0553      	lsls	r3, r2, #21
 800a5f2:	d527      	bpl.n	800a644 <__ssputs_r+0x8c>
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	f7ff fdfd 	bl	800a1f4 <_malloc_r>
 800a5fa:	4606      	mov	r6, r0
 800a5fc:	b360      	cbz	r0, 800a658 <__ssputs_r+0xa0>
 800a5fe:	6921      	ldr	r1, [r4, #16]
 800a600:	464a      	mov	r2, r9
 800a602:	f7ff ff7f 	bl	800a504 <memcpy>
 800a606:	89a3      	ldrh	r3, [r4, #12]
 800a608:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a60c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a610:	81a3      	strh	r3, [r4, #12]
 800a612:	6126      	str	r6, [r4, #16]
 800a614:	6165      	str	r5, [r4, #20]
 800a616:	444e      	add	r6, r9
 800a618:	eba5 0509 	sub.w	r5, r5, r9
 800a61c:	6026      	str	r6, [r4, #0]
 800a61e:	60a5      	str	r5, [r4, #8]
 800a620:	463e      	mov	r6, r7
 800a622:	42be      	cmp	r6, r7
 800a624:	d900      	bls.n	800a628 <__ssputs_r+0x70>
 800a626:	463e      	mov	r6, r7
 800a628:	6820      	ldr	r0, [r4, #0]
 800a62a:	4632      	mov	r2, r6
 800a62c:	4641      	mov	r1, r8
 800a62e:	f7ff fec7 	bl	800a3c0 <memmove>
 800a632:	68a3      	ldr	r3, [r4, #8]
 800a634:	1b9b      	subs	r3, r3, r6
 800a636:	60a3      	str	r3, [r4, #8]
 800a638:	6823      	ldr	r3, [r4, #0]
 800a63a:	4433      	add	r3, r6
 800a63c:	6023      	str	r3, [r4, #0]
 800a63e:	2000      	movs	r0, #0
 800a640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a644:	462a      	mov	r2, r5
 800a646:	f000 fa9f 	bl	800ab88 <_realloc_r>
 800a64a:	4606      	mov	r6, r0
 800a64c:	2800      	cmp	r0, #0
 800a64e:	d1e0      	bne.n	800a612 <__ssputs_r+0x5a>
 800a650:	6921      	ldr	r1, [r4, #16]
 800a652:	4650      	mov	r0, sl
 800a654:	f7ff ff64 	bl	800a520 <_free_r>
 800a658:	230c      	movs	r3, #12
 800a65a:	f8ca 3000 	str.w	r3, [sl]
 800a65e:	89a3      	ldrh	r3, [r4, #12]
 800a660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a664:	81a3      	strh	r3, [r4, #12]
 800a666:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a66a:	e7e9      	b.n	800a640 <__ssputs_r+0x88>

0800a66c <_svfiprintf_r>:
 800a66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a670:	4698      	mov	r8, r3
 800a672:	898b      	ldrh	r3, [r1, #12]
 800a674:	061b      	lsls	r3, r3, #24
 800a676:	b09d      	sub	sp, #116	; 0x74
 800a678:	4607      	mov	r7, r0
 800a67a:	460d      	mov	r5, r1
 800a67c:	4614      	mov	r4, r2
 800a67e:	d50e      	bpl.n	800a69e <_svfiprintf_r+0x32>
 800a680:	690b      	ldr	r3, [r1, #16]
 800a682:	b963      	cbnz	r3, 800a69e <_svfiprintf_r+0x32>
 800a684:	2140      	movs	r1, #64	; 0x40
 800a686:	f7ff fdb5 	bl	800a1f4 <_malloc_r>
 800a68a:	6028      	str	r0, [r5, #0]
 800a68c:	6128      	str	r0, [r5, #16]
 800a68e:	b920      	cbnz	r0, 800a69a <_svfiprintf_r+0x2e>
 800a690:	230c      	movs	r3, #12
 800a692:	603b      	str	r3, [r7, #0]
 800a694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a698:	e0d0      	b.n	800a83c <_svfiprintf_r+0x1d0>
 800a69a:	2340      	movs	r3, #64	; 0x40
 800a69c:	616b      	str	r3, [r5, #20]
 800a69e:	2300      	movs	r3, #0
 800a6a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a6a2:	2320      	movs	r3, #32
 800a6a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6ac:	2330      	movs	r3, #48	; 0x30
 800a6ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a854 <_svfiprintf_r+0x1e8>
 800a6b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6b6:	f04f 0901 	mov.w	r9, #1
 800a6ba:	4623      	mov	r3, r4
 800a6bc:	469a      	mov	sl, r3
 800a6be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6c2:	b10a      	cbz	r2, 800a6c8 <_svfiprintf_r+0x5c>
 800a6c4:	2a25      	cmp	r2, #37	; 0x25
 800a6c6:	d1f9      	bne.n	800a6bc <_svfiprintf_r+0x50>
 800a6c8:	ebba 0b04 	subs.w	fp, sl, r4
 800a6cc:	d00b      	beq.n	800a6e6 <_svfiprintf_r+0x7a>
 800a6ce:	465b      	mov	r3, fp
 800a6d0:	4622      	mov	r2, r4
 800a6d2:	4629      	mov	r1, r5
 800a6d4:	4638      	mov	r0, r7
 800a6d6:	f7ff ff6f 	bl	800a5b8 <__ssputs_r>
 800a6da:	3001      	adds	r0, #1
 800a6dc:	f000 80a9 	beq.w	800a832 <_svfiprintf_r+0x1c6>
 800a6e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6e2:	445a      	add	r2, fp
 800a6e4:	9209      	str	r2, [sp, #36]	; 0x24
 800a6e6:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f000 80a1 	beq.w	800a832 <_svfiprintf_r+0x1c6>
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6fa:	f10a 0a01 	add.w	sl, sl, #1
 800a6fe:	9304      	str	r3, [sp, #16]
 800a700:	9307      	str	r3, [sp, #28]
 800a702:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a706:	931a      	str	r3, [sp, #104]	; 0x68
 800a708:	4654      	mov	r4, sl
 800a70a:	2205      	movs	r2, #5
 800a70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a710:	4850      	ldr	r0, [pc, #320]	; (800a854 <_svfiprintf_r+0x1e8>)
 800a712:	f7f5 fd75 	bl	8000200 <memchr>
 800a716:	9a04      	ldr	r2, [sp, #16]
 800a718:	b9d8      	cbnz	r0, 800a752 <_svfiprintf_r+0xe6>
 800a71a:	06d0      	lsls	r0, r2, #27
 800a71c:	bf44      	itt	mi
 800a71e:	2320      	movmi	r3, #32
 800a720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a724:	0711      	lsls	r1, r2, #28
 800a726:	bf44      	itt	mi
 800a728:	232b      	movmi	r3, #43	; 0x2b
 800a72a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a72e:	f89a 3000 	ldrb.w	r3, [sl]
 800a732:	2b2a      	cmp	r3, #42	; 0x2a
 800a734:	d015      	beq.n	800a762 <_svfiprintf_r+0xf6>
 800a736:	9a07      	ldr	r2, [sp, #28]
 800a738:	4654      	mov	r4, sl
 800a73a:	2000      	movs	r0, #0
 800a73c:	f04f 0c0a 	mov.w	ip, #10
 800a740:	4621      	mov	r1, r4
 800a742:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a746:	3b30      	subs	r3, #48	; 0x30
 800a748:	2b09      	cmp	r3, #9
 800a74a:	d94d      	bls.n	800a7e8 <_svfiprintf_r+0x17c>
 800a74c:	b1b0      	cbz	r0, 800a77c <_svfiprintf_r+0x110>
 800a74e:	9207      	str	r2, [sp, #28]
 800a750:	e014      	b.n	800a77c <_svfiprintf_r+0x110>
 800a752:	eba0 0308 	sub.w	r3, r0, r8
 800a756:	fa09 f303 	lsl.w	r3, r9, r3
 800a75a:	4313      	orrs	r3, r2
 800a75c:	9304      	str	r3, [sp, #16]
 800a75e:	46a2      	mov	sl, r4
 800a760:	e7d2      	b.n	800a708 <_svfiprintf_r+0x9c>
 800a762:	9b03      	ldr	r3, [sp, #12]
 800a764:	1d19      	adds	r1, r3, #4
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	9103      	str	r1, [sp, #12]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	bfbb      	ittet	lt
 800a76e:	425b      	neglt	r3, r3
 800a770:	f042 0202 	orrlt.w	r2, r2, #2
 800a774:	9307      	strge	r3, [sp, #28]
 800a776:	9307      	strlt	r3, [sp, #28]
 800a778:	bfb8      	it	lt
 800a77a:	9204      	strlt	r2, [sp, #16]
 800a77c:	7823      	ldrb	r3, [r4, #0]
 800a77e:	2b2e      	cmp	r3, #46	; 0x2e
 800a780:	d10c      	bne.n	800a79c <_svfiprintf_r+0x130>
 800a782:	7863      	ldrb	r3, [r4, #1]
 800a784:	2b2a      	cmp	r3, #42	; 0x2a
 800a786:	d134      	bne.n	800a7f2 <_svfiprintf_r+0x186>
 800a788:	9b03      	ldr	r3, [sp, #12]
 800a78a:	1d1a      	adds	r2, r3, #4
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	9203      	str	r2, [sp, #12]
 800a790:	2b00      	cmp	r3, #0
 800a792:	bfb8      	it	lt
 800a794:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a798:	3402      	adds	r4, #2
 800a79a:	9305      	str	r3, [sp, #20]
 800a79c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a864 <_svfiprintf_r+0x1f8>
 800a7a0:	7821      	ldrb	r1, [r4, #0]
 800a7a2:	2203      	movs	r2, #3
 800a7a4:	4650      	mov	r0, sl
 800a7a6:	f7f5 fd2b 	bl	8000200 <memchr>
 800a7aa:	b138      	cbz	r0, 800a7bc <_svfiprintf_r+0x150>
 800a7ac:	9b04      	ldr	r3, [sp, #16]
 800a7ae:	eba0 000a 	sub.w	r0, r0, sl
 800a7b2:	2240      	movs	r2, #64	; 0x40
 800a7b4:	4082      	lsls	r2, r0
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	3401      	adds	r4, #1
 800a7ba:	9304      	str	r3, [sp, #16]
 800a7bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7c0:	4825      	ldr	r0, [pc, #148]	; (800a858 <_svfiprintf_r+0x1ec>)
 800a7c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7c6:	2206      	movs	r2, #6
 800a7c8:	f7f5 fd1a 	bl	8000200 <memchr>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	d038      	beq.n	800a842 <_svfiprintf_r+0x1d6>
 800a7d0:	4b22      	ldr	r3, [pc, #136]	; (800a85c <_svfiprintf_r+0x1f0>)
 800a7d2:	bb1b      	cbnz	r3, 800a81c <_svfiprintf_r+0x1b0>
 800a7d4:	9b03      	ldr	r3, [sp, #12]
 800a7d6:	3307      	adds	r3, #7
 800a7d8:	f023 0307 	bic.w	r3, r3, #7
 800a7dc:	3308      	adds	r3, #8
 800a7de:	9303      	str	r3, [sp, #12]
 800a7e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7e2:	4433      	add	r3, r6
 800a7e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7e6:	e768      	b.n	800a6ba <_svfiprintf_r+0x4e>
 800a7e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7ec:	460c      	mov	r4, r1
 800a7ee:	2001      	movs	r0, #1
 800a7f0:	e7a6      	b.n	800a740 <_svfiprintf_r+0xd4>
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	3401      	adds	r4, #1
 800a7f6:	9305      	str	r3, [sp, #20]
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	f04f 0c0a 	mov.w	ip, #10
 800a7fe:	4620      	mov	r0, r4
 800a800:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a804:	3a30      	subs	r2, #48	; 0x30
 800a806:	2a09      	cmp	r2, #9
 800a808:	d903      	bls.n	800a812 <_svfiprintf_r+0x1a6>
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d0c6      	beq.n	800a79c <_svfiprintf_r+0x130>
 800a80e:	9105      	str	r1, [sp, #20]
 800a810:	e7c4      	b.n	800a79c <_svfiprintf_r+0x130>
 800a812:	fb0c 2101 	mla	r1, ip, r1, r2
 800a816:	4604      	mov	r4, r0
 800a818:	2301      	movs	r3, #1
 800a81a:	e7f0      	b.n	800a7fe <_svfiprintf_r+0x192>
 800a81c:	ab03      	add	r3, sp, #12
 800a81e:	9300      	str	r3, [sp, #0]
 800a820:	462a      	mov	r2, r5
 800a822:	4b0f      	ldr	r3, [pc, #60]	; (800a860 <_svfiprintf_r+0x1f4>)
 800a824:	a904      	add	r1, sp, #16
 800a826:	4638      	mov	r0, r7
 800a828:	f3af 8000 	nop.w
 800a82c:	1c42      	adds	r2, r0, #1
 800a82e:	4606      	mov	r6, r0
 800a830:	d1d6      	bne.n	800a7e0 <_svfiprintf_r+0x174>
 800a832:	89ab      	ldrh	r3, [r5, #12]
 800a834:	065b      	lsls	r3, r3, #25
 800a836:	f53f af2d 	bmi.w	800a694 <_svfiprintf_r+0x28>
 800a83a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a83c:	b01d      	add	sp, #116	; 0x74
 800a83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a842:	ab03      	add	r3, sp, #12
 800a844:	9300      	str	r3, [sp, #0]
 800a846:	462a      	mov	r2, r5
 800a848:	4b05      	ldr	r3, [pc, #20]	; (800a860 <_svfiprintf_r+0x1f4>)
 800a84a:	a904      	add	r1, sp, #16
 800a84c:	4638      	mov	r0, r7
 800a84e:	f000 f879 	bl	800a944 <_printf_i>
 800a852:	e7eb      	b.n	800a82c <_svfiprintf_r+0x1c0>
 800a854:	08013c28 	.word	0x08013c28
 800a858:	08013c32 	.word	0x08013c32
 800a85c:	00000000 	.word	0x00000000
 800a860:	0800a5b9 	.word	0x0800a5b9
 800a864:	08013c2e 	.word	0x08013c2e

0800a868 <_printf_common>:
 800a868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a86c:	4616      	mov	r6, r2
 800a86e:	4699      	mov	r9, r3
 800a870:	688a      	ldr	r2, [r1, #8]
 800a872:	690b      	ldr	r3, [r1, #16]
 800a874:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a878:	4293      	cmp	r3, r2
 800a87a:	bfb8      	it	lt
 800a87c:	4613      	movlt	r3, r2
 800a87e:	6033      	str	r3, [r6, #0]
 800a880:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a884:	4607      	mov	r7, r0
 800a886:	460c      	mov	r4, r1
 800a888:	b10a      	cbz	r2, 800a88e <_printf_common+0x26>
 800a88a:	3301      	adds	r3, #1
 800a88c:	6033      	str	r3, [r6, #0]
 800a88e:	6823      	ldr	r3, [r4, #0]
 800a890:	0699      	lsls	r1, r3, #26
 800a892:	bf42      	ittt	mi
 800a894:	6833      	ldrmi	r3, [r6, #0]
 800a896:	3302      	addmi	r3, #2
 800a898:	6033      	strmi	r3, [r6, #0]
 800a89a:	6825      	ldr	r5, [r4, #0]
 800a89c:	f015 0506 	ands.w	r5, r5, #6
 800a8a0:	d106      	bne.n	800a8b0 <_printf_common+0x48>
 800a8a2:	f104 0a19 	add.w	sl, r4, #25
 800a8a6:	68e3      	ldr	r3, [r4, #12]
 800a8a8:	6832      	ldr	r2, [r6, #0]
 800a8aa:	1a9b      	subs	r3, r3, r2
 800a8ac:	42ab      	cmp	r3, r5
 800a8ae:	dc26      	bgt.n	800a8fe <_printf_common+0x96>
 800a8b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a8b4:	1e13      	subs	r3, r2, #0
 800a8b6:	6822      	ldr	r2, [r4, #0]
 800a8b8:	bf18      	it	ne
 800a8ba:	2301      	movne	r3, #1
 800a8bc:	0692      	lsls	r2, r2, #26
 800a8be:	d42b      	bmi.n	800a918 <_printf_common+0xb0>
 800a8c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a8c4:	4649      	mov	r1, r9
 800a8c6:	4638      	mov	r0, r7
 800a8c8:	47c0      	blx	r8
 800a8ca:	3001      	adds	r0, #1
 800a8cc:	d01e      	beq.n	800a90c <_printf_common+0xa4>
 800a8ce:	6823      	ldr	r3, [r4, #0]
 800a8d0:	6922      	ldr	r2, [r4, #16]
 800a8d2:	f003 0306 	and.w	r3, r3, #6
 800a8d6:	2b04      	cmp	r3, #4
 800a8d8:	bf02      	ittt	eq
 800a8da:	68e5      	ldreq	r5, [r4, #12]
 800a8dc:	6833      	ldreq	r3, [r6, #0]
 800a8de:	1aed      	subeq	r5, r5, r3
 800a8e0:	68a3      	ldr	r3, [r4, #8]
 800a8e2:	bf0c      	ite	eq
 800a8e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8e8:	2500      	movne	r5, #0
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	bfc4      	itt	gt
 800a8ee:	1a9b      	subgt	r3, r3, r2
 800a8f0:	18ed      	addgt	r5, r5, r3
 800a8f2:	2600      	movs	r6, #0
 800a8f4:	341a      	adds	r4, #26
 800a8f6:	42b5      	cmp	r5, r6
 800a8f8:	d11a      	bne.n	800a930 <_printf_common+0xc8>
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	e008      	b.n	800a910 <_printf_common+0xa8>
 800a8fe:	2301      	movs	r3, #1
 800a900:	4652      	mov	r2, sl
 800a902:	4649      	mov	r1, r9
 800a904:	4638      	mov	r0, r7
 800a906:	47c0      	blx	r8
 800a908:	3001      	adds	r0, #1
 800a90a:	d103      	bne.n	800a914 <_printf_common+0xac>
 800a90c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a914:	3501      	adds	r5, #1
 800a916:	e7c6      	b.n	800a8a6 <_printf_common+0x3e>
 800a918:	18e1      	adds	r1, r4, r3
 800a91a:	1c5a      	adds	r2, r3, #1
 800a91c:	2030      	movs	r0, #48	; 0x30
 800a91e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a922:	4422      	add	r2, r4
 800a924:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a928:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a92c:	3302      	adds	r3, #2
 800a92e:	e7c7      	b.n	800a8c0 <_printf_common+0x58>
 800a930:	2301      	movs	r3, #1
 800a932:	4622      	mov	r2, r4
 800a934:	4649      	mov	r1, r9
 800a936:	4638      	mov	r0, r7
 800a938:	47c0      	blx	r8
 800a93a:	3001      	adds	r0, #1
 800a93c:	d0e6      	beq.n	800a90c <_printf_common+0xa4>
 800a93e:	3601      	adds	r6, #1
 800a940:	e7d9      	b.n	800a8f6 <_printf_common+0x8e>
	...

0800a944 <_printf_i>:
 800a944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a948:	7e0f      	ldrb	r7, [r1, #24]
 800a94a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a94c:	2f78      	cmp	r7, #120	; 0x78
 800a94e:	4691      	mov	r9, r2
 800a950:	4680      	mov	r8, r0
 800a952:	460c      	mov	r4, r1
 800a954:	469a      	mov	sl, r3
 800a956:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a95a:	d807      	bhi.n	800a96c <_printf_i+0x28>
 800a95c:	2f62      	cmp	r7, #98	; 0x62
 800a95e:	d80a      	bhi.n	800a976 <_printf_i+0x32>
 800a960:	2f00      	cmp	r7, #0
 800a962:	f000 80d4 	beq.w	800ab0e <_printf_i+0x1ca>
 800a966:	2f58      	cmp	r7, #88	; 0x58
 800a968:	f000 80c0 	beq.w	800aaec <_printf_i+0x1a8>
 800a96c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a970:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a974:	e03a      	b.n	800a9ec <_printf_i+0xa8>
 800a976:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a97a:	2b15      	cmp	r3, #21
 800a97c:	d8f6      	bhi.n	800a96c <_printf_i+0x28>
 800a97e:	a101      	add	r1, pc, #4	; (adr r1, 800a984 <_printf_i+0x40>)
 800a980:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a984:	0800a9dd 	.word	0x0800a9dd
 800a988:	0800a9f1 	.word	0x0800a9f1
 800a98c:	0800a96d 	.word	0x0800a96d
 800a990:	0800a96d 	.word	0x0800a96d
 800a994:	0800a96d 	.word	0x0800a96d
 800a998:	0800a96d 	.word	0x0800a96d
 800a99c:	0800a9f1 	.word	0x0800a9f1
 800a9a0:	0800a96d 	.word	0x0800a96d
 800a9a4:	0800a96d 	.word	0x0800a96d
 800a9a8:	0800a96d 	.word	0x0800a96d
 800a9ac:	0800a96d 	.word	0x0800a96d
 800a9b0:	0800aaf5 	.word	0x0800aaf5
 800a9b4:	0800aa1d 	.word	0x0800aa1d
 800a9b8:	0800aaaf 	.word	0x0800aaaf
 800a9bc:	0800a96d 	.word	0x0800a96d
 800a9c0:	0800a96d 	.word	0x0800a96d
 800a9c4:	0800ab17 	.word	0x0800ab17
 800a9c8:	0800a96d 	.word	0x0800a96d
 800a9cc:	0800aa1d 	.word	0x0800aa1d
 800a9d0:	0800a96d 	.word	0x0800a96d
 800a9d4:	0800a96d 	.word	0x0800a96d
 800a9d8:	0800aab7 	.word	0x0800aab7
 800a9dc:	682b      	ldr	r3, [r5, #0]
 800a9de:	1d1a      	adds	r2, r3, #4
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	602a      	str	r2, [r5, #0]
 800a9e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e09f      	b.n	800ab30 <_printf_i+0x1ec>
 800a9f0:	6820      	ldr	r0, [r4, #0]
 800a9f2:	682b      	ldr	r3, [r5, #0]
 800a9f4:	0607      	lsls	r7, r0, #24
 800a9f6:	f103 0104 	add.w	r1, r3, #4
 800a9fa:	6029      	str	r1, [r5, #0]
 800a9fc:	d501      	bpl.n	800aa02 <_printf_i+0xbe>
 800a9fe:	681e      	ldr	r6, [r3, #0]
 800aa00:	e003      	b.n	800aa0a <_printf_i+0xc6>
 800aa02:	0646      	lsls	r6, r0, #25
 800aa04:	d5fb      	bpl.n	800a9fe <_printf_i+0xba>
 800aa06:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aa0a:	2e00      	cmp	r6, #0
 800aa0c:	da03      	bge.n	800aa16 <_printf_i+0xd2>
 800aa0e:	232d      	movs	r3, #45	; 0x2d
 800aa10:	4276      	negs	r6, r6
 800aa12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa16:	485a      	ldr	r0, [pc, #360]	; (800ab80 <_printf_i+0x23c>)
 800aa18:	230a      	movs	r3, #10
 800aa1a:	e012      	b.n	800aa42 <_printf_i+0xfe>
 800aa1c:	682b      	ldr	r3, [r5, #0]
 800aa1e:	6820      	ldr	r0, [r4, #0]
 800aa20:	1d19      	adds	r1, r3, #4
 800aa22:	6029      	str	r1, [r5, #0]
 800aa24:	0605      	lsls	r5, r0, #24
 800aa26:	d501      	bpl.n	800aa2c <_printf_i+0xe8>
 800aa28:	681e      	ldr	r6, [r3, #0]
 800aa2a:	e002      	b.n	800aa32 <_printf_i+0xee>
 800aa2c:	0641      	lsls	r1, r0, #25
 800aa2e:	d5fb      	bpl.n	800aa28 <_printf_i+0xe4>
 800aa30:	881e      	ldrh	r6, [r3, #0]
 800aa32:	4853      	ldr	r0, [pc, #332]	; (800ab80 <_printf_i+0x23c>)
 800aa34:	2f6f      	cmp	r7, #111	; 0x6f
 800aa36:	bf0c      	ite	eq
 800aa38:	2308      	moveq	r3, #8
 800aa3a:	230a      	movne	r3, #10
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa42:	6865      	ldr	r5, [r4, #4]
 800aa44:	60a5      	str	r5, [r4, #8]
 800aa46:	2d00      	cmp	r5, #0
 800aa48:	bfa2      	ittt	ge
 800aa4a:	6821      	ldrge	r1, [r4, #0]
 800aa4c:	f021 0104 	bicge.w	r1, r1, #4
 800aa50:	6021      	strge	r1, [r4, #0]
 800aa52:	b90e      	cbnz	r6, 800aa58 <_printf_i+0x114>
 800aa54:	2d00      	cmp	r5, #0
 800aa56:	d04b      	beq.n	800aaf0 <_printf_i+0x1ac>
 800aa58:	4615      	mov	r5, r2
 800aa5a:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa5e:	fb03 6711 	mls	r7, r3, r1, r6
 800aa62:	5dc7      	ldrb	r7, [r0, r7]
 800aa64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa68:	4637      	mov	r7, r6
 800aa6a:	42bb      	cmp	r3, r7
 800aa6c:	460e      	mov	r6, r1
 800aa6e:	d9f4      	bls.n	800aa5a <_printf_i+0x116>
 800aa70:	2b08      	cmp	r3, #8
 800aa72:	d10b      	bne.n	800aa8c <_printf_i+0x148>
 800aa74:	6823      	ldr	r3, [r4, #0]
 800aa76:	07de      	lsls	r6, r3, #31
 800aa78:	d508      	bpl.n	800aa8c <_printf_i+0x148>
 800aa7a:	6923      	ldr	r3, [r4, #16]
 800aa7c:	6861      	ldr	r1, [r4, #4]
 800aa7e:	4299      	cmp	r1, r3
 800aa80:	bfde      	ittt	le
 800aa82:	2330      	movle	r3, #48	; 0x30
 800aa84:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa88:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800aa8c:	1b52      	subs	r2, r2, r5
 800aa8e:	6122      	str	r2, [r4, #16]
 800aa90:	f8cd a000 	str.w	sl, [sp]
 800aa94:	464b      	mov	r3, r9
 800aa96:	aa03      	add	r2, sp, #12
 800aa98:	4621      	mov	r1, r4
 800aa9a:	4640      	mov	r0, r8
 800aa9c:	f7ff fee4 	bl	800a868 <_printf_common>
 800aaa0:	3001      	adds	r0, #1
 800aaa2:	d14a      	bne.n	800ab3a <_printf_i+0x1f6>
 800aaa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aaa8:	b004      	add	sp, #16
 800aaaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaae:	6823      	ldr	r3, [r4, #0]
 800aab0:	f043 0320 	orr.w	r3, r3, #32
 800aab4:	6023      	str	r3, [r4, #0]
 800aab6:	4833      	ldr	r0, [pc, #204]	; (800ab84 <_printf_i+0x240>)
 800aab8:	2778      	movs	r7, #120	; 0x78
 800aaba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aabe:	6823      	ldr	r3, [r4, #0]
 800aac0:	6829      	ldr	r1, [r5, #0]
 800aac2:	061f      	lsls	r7, r3, #24
 800aac4:	f851 6b04 	ldr.w	r6, [r1], #4
 800aac8:	d402      	bmi.n	800aad0 <_printf_i+0x18c>
 800aaca:	065f      	lsls	r7, r3, #25
 800aacc:	bf48      	it	mi
 800aace:	b2b6      	uxthmi	r6, r6
 800aad0:	07df      	lsls	r7, r3, #31
 800aad2:	bf48      	it	mi
 800aad4:	f043 0320 	orrmi.w	r3, r3, #32
 800aad8:	6029      	str	r1, [r5, #0]
 800aada:	bf48      	it	mi
 800aadc:	6023      	strmi	r3, [r4, #0]
 800aade:	b91e      	cbnz	r6, 800aae8 <_printf_i+0x1a4>
 800aae0:	6823      	ldr	r3, [r4, #0]
 800aae2:	f023 0320 	bic.w	r3, r3, #32
 800aae6:	6023      	str	r3, [r4, #0]
 800aae8:	2310      	movs	r3, #16
 800aaea:	e7a7      	b.n	800aa3c <_printf_i+0xf8>
 800aaec:	4824      	ldr	r0, [pc, #144]	; (800ab80 <_printf_i+0x23c>)
 800aaee:	e7e4      	b.n	800aaba <_printf_i+0x176>
 800aaf0:	4615      	mov	r5, r2
 800aaf2:	e7bd      	b.n	800aa70 <_printf_i+0x12c>
 800aaf4:	682b      	ldr	r3, [r5, #0]
 800aaf6:	6826      	ldr	r6, [r4, #0]
 800aaf8:	6961      	ldr	r1, [r4, #20]
 800aafa:	1d18      	adds	r0, r3, #4
 800aafc:	6028      	str	r0, [r5, #0]
 800aafe:	0635      	lsls	r5, r6, #24
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	d501      	bpl.n	800ab08 <_printf_i+0x1c4>
 800ab04:	6019      	str	r1, [r3, #0]
 800ab06:	e002      	b.n	800ab0e <_printf_i+0x1ca>
 800ab08:	0670      	lsls	r0, r6, #25
 800ab0a:	d5fb      	bpl.n	800ab04 <_printf_i+0x1c0>
 800ab0c:	8019      	strh	r1, [r3, #0]
 800ab0e:	2300      	movs	r3, #0
 800ab10:	6123      	str	r3, [r4, #16]
 800ab12:	4615      	mov	r5, r2
 800ab14:	e7bc      	b.n	800aa90 <_printf_i+0x14c>
 800ab16:	682b      	ldr	r3, [r5, #0]
 800ab18:	1d1a      	adds	r2, r3, #4
 800ab1a:	602a      	str	r2, [r5, #0]
 800ab1c:	681d      	ldr	r5, [r3, #0]
 800ab1e:	6862      	ldr	r2, [r4, #4]
 800ab20:	2100      	movs	r1, #0
 800ab22:	4628      	mov	r0, r5
 800ab24:	f7f5 fb6c 	bl	8000200 <memchr>
 800ab28:	b108      	cbz	r0, 800ab2e <_printf_i+0x1ea>
 800ab2a:	1b40      	subs	r0, r0, r5
 800ab2c:	6060      	str	r0, [r4, #4]
 800ab2e:	6863      	ldr	r3, [r4, #4]
 800ab30:	6123      	str	r3, [r4, #16]
 800ab32:	2300      	movs	r3, #0
 800ab34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab38:	e7aa      	b.n	800aa90 <_printf_i+0x14c>
 800ab3a:	6923      	ldr	r3, [r4, #16]
 800ab3c:	462a      	mov	r2, r5
 800ab3e:	4649      	mov	r1, r9
 800ab40:	4640      	mov	r0, r8
 800ab42:	47d0      	blx	sl
 800ab44:	3001      	adds	r0, #1
 800ab46:	d0ad      	beq.n	800aaa4 <_printf_i+0x160>
 800ab48:	6823      	ldr	r3, [r4, #0]
 800ab4a:	079b      	lsls	r3, r3, #30
 800ab4c:	d413      	bmi.n	800ab76 <_printf_i+0x232>
 800ab4e:	68e0      	ldr	r0, [r4, #12]
 800ab50:	9b03      	ldr	r3, [sp, #12]
 800ab52:	4298      	cmp	r0, r3
 800ab54:	bfb8      	it	lt
 800ab56:	4618      	movlt	r0, r3
 800ab58:	e7a6      	b.n	800aaa8 <_printf_i+0x164>
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	4632      	mov	r2, r6
 800ab5e:	4649      	mov	r1, r9
 800ab60:	4640      	mov	r0, r8
 800ab62:	47d0      	blx	sl
 800ab64:	3001      	adds	r0, #1
 800ab66:	d09d      	beq.n	800aaa4 <_printf_i+0x160>
 800ab68:	3501      	adds	r5, #1
 800ab6a:	68e3      	ldr	r3, [r4, #12]
 800ab6c:	9903      	ldr	r1, [sp, #12]
 800ab6e:	1a5b      	subs	r3, r3, r1
 800ab70:	42ab      	cmp	r3, r5
 800ab72:	dcf2      	bgt.n	800ab5a <_printf_i+0x216>
 800ab74:	e7eb      	b.n	800ab4e <_printf_i+0x20a>
 800ab76:	2500      	movs	r5, #0
 800ab78:	f104 0619 	add.w	r6, r4, #25
 800ab7c:	e7f5      	b.n	800ab6a <_printf_i+0x226>
 800ab7e:	bf00      	nop
 800ab80:	08013c39 	.word	0x08013c39
 800ab84:	08013c4a 	.word	0x08013c4a

0800ab88 <_realloc_r>:
 800ab88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab8c:	4680      	mov	r8, r0
 800ab8e:	4614      	mov	r4, r2
 800ab90:	460e      	mov	r6, r1
 800ab92:	b921      	cbnz	r1, 800ab9e <_realloc_r+0x16>
 800ab94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab98:	4611      	mov	r1, r2
 800ab9a:	f7ff bb2b 	b.w	800a1f4 <_malloc_r>
 800ab9e:	b92a      	cbnz	r2, 800abac <_realloc_r+0x24>
 800aba0:	f7ff fcbe 	bl	800a520 <_free_r>
 800aba4:	4625      	mov	r5, r4
 800aba6:	4628      	mov	r0, r5
 800aba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abac:	f000 f81b 	bl	800abe6 <_malloc_usable_size_r>
 800abb0:	4284      	cmp	r4, r0
 800abb2:	4607      	mov	r7, r0
 800abb4:	d802      	bhi.n	800abbc <_realloc_r+0x34>
 800abb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800abba:	d812      	bhi.n	800abe2 <_realloc_r+0x5a>
 800abbc:	4621      	mov	r1, r4
 800abbe:	4640      	mov	r0, r8
 800abc0:	f7ff fb18 	bl	800a1f4 <_malloc_r>
 800abc4:	4605      	mov	r5, r0
 800abc6:	2800      	cmp	r0, #0
 800abc8:	d0ed      	beq.n	800aba6 <_realloc_r+0x1e>
 800abca:	42bc      	cmp	r4, r7
 800abcc:	4622      	mov	r2, r4
 800abce:	4631      	mov	r1, r6
 800abd0:	bf28      	it	cs
 800abd2:	463a      	movcs	r2, r7
 800abd4:	f7ff fc96 	bl	800a504 <memcpy>
 800abd8:	4631      	mov	r1, r6
 800abda:	4640      	mov	r0, r8
 800abdc:	f7ff fca0 	bl	800a520 <_free_r>
 800abe0:	e7e1      	b.n	800aba6 <_realloc_r+0x1e>
 800abe2:	4635      	mov	r5, r6
 800abe4:	e7df      	b.n	800aba6 <_realloc_r+0x1e>

0800abe6 <_malloc_usable_size_r>:
 800abe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abea:	1f18      	subs	r0, r3, #4
 800abec:	2b00      	cmp	r3, #0
 800abee:	bfbc      	itt	lt
 800abf0:	580b      	ldrlt	r3, [r1, r0]
 800abf2:	18c0      	addlt	r0, r0, r3
 800abf4:	4770      	bx	lr
	...

0800abf8 <_init>:
 800abf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfa:	bf00      	nop
 800abfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abfe:	bc08      	pop	{r3}
 800ac00:	469e      	mov	lr, r3
 800ac02:	4770      	bx	lr

0800ac04 <_fini>:
 800ac04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac06:	bf00      	nop
 800ac08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac0a:	bc08      	pop	{r3}
 800ac0c:	469e      	mov	lr, r3
 800ac0e:	4770      	bx	lr
